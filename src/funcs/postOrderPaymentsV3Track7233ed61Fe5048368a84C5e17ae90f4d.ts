/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SafepayCore } from "../core.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SafepayError } from "../models/errors/safepayerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Generate Capture Context
 */
export function postOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4d(
  client: SafepayCore,
  _request?:
    | operations.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dRequest
    | undefined,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dResponse,
    | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dBadRequestError
    | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dForbiddenError
    | SafepayError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    _request,
    options,
  ));
}

async function $do(
  client: SafepayCore,
  _request?:
    | operations.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dRequest
    | undefined,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dResponse,
      | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dBadRequestError
      | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dForbiddenError
      | SafepayError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const path = pathToFunc(
    "/order/payments/v3/track_7233ed61-fe50-4836-8a84-c5e17ae90f4d",
  )();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID:
      "post_/order/payments/v3/track_7233ed61-fe50-4836-8a84-c5e17ae90f4d",
    oAuth2Scopes: [],

    resolvedSecurity: null,

    securitySource: null,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "403", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dResponse,
    | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dBadRequestError
    | errors.PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dForbiddenError
    | SafepayError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(
      200,
      operations
        .PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dResponse$inboundSchema,
      { hdrs: true, key: "Result" },
    ),
    M.jsonErr(
      400,
      errors
        .PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dBadRequestError$inboundSchema,
      { hdrs: true },
    ),
    M.jsonErr(
      403,
      errors
        .PostOrderPaymentsV3Track7233ed61Fe5048368a84C5e17ae90f4dForbiddenError$inboundSchema,
      { hdrs: true },
    ),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
