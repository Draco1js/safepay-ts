/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DateTimeSeconds,
  DateTimeSeconds$inboundSchema,
  DateTimeSeconds$Outbound,
  DateTimeSeconds$outboundSchema,
} from "./datetimeseconds.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Address = {
  token?: string | undefined;
  owner?: string | undefined;
  street1?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  isDefault?: boolean | undefined;
  createdAt?: DateTimeSeconds | undefined;
  updatedAt?: DateTimeSeconds | undefined;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string().optional(),
    owner: z.string().optional(),
    street1: z.string().optional(),
    city: z.string().optional(),
    country: z.string().optional(),
    is_default: z.boolean().optional(),
    created_at: DateTimeSeconds$inboundSchema.optional(),
    updated_at: DateTimeSeconds$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "is_default": "isDefault",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Address$Outbound = {
  token?: string | undefined;
  owner?: string | undefined;
  street1?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  is_default?: boolean | undefined;
  created_at?: DateTimeSeconds$Outbound | undefined;
  updated_at?: DateTimeSeconds$Outbound | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  token: z.string().optional(),
  owner: z.string().optional(),
  street1: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  isDefault: z.boolean().optional(),
  createdAt: DateTimeSeconds$outboundSchema.optional(),
  updatedAt: DateTimeSeconds$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    isDefault: "is_default",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}
