/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { SafepayError } from "./safepayerror.js";

/**
 * 401
 */
export type PostAuthV2UserLoginUnauthorizedErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * 401
 */
export class PostAuthV2UserLoginUnauthorizedError extends SafepayError {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostAuthV2UserLoginUnauthorizedErrorData;

  constructor(
    err: PostAuthV2UserLoginUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "PostAuthV2UserLoginUnauthorizedError";
  }
}

/**
 * 400
 */
export type PostAuthV2UserLoginBadRequestErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * 400
 */
export class PostAuthV2UserLoginBadRequestError extends SafepayError {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostAuthV2UserLoginBadRequestErrorData;

  constructor(
    err: PostAuthV2UserLoginBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "PostAuthV2UserLoginBadRequestError";
  }
}

/** @internal */
export const PostAuthV2UserLoginUnauthorizedError$inboundSchema: z.ZodType<
  PostAuthV2UserLoginUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostAuthV2UserLoginUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostAuthV2UserLoginUnauthorizedError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostAuthV2UserLoginUnauthorizedError$outboundSchema: z.ZodType<
  PostAuthV2UserLoginUnauthorizedError$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginUnauthorizedError
> = z.instanceof(PostAuthV2UserLoginUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginUnauthorizedError$ {
  /** @deprecated use `PostAuthV2UserLoginUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV2UserLoginUnauthorizedError$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV2UserLoginUnauthorizedError$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginUnauthorizedError$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginUnauthorizedError$Outbound;
}

/** @internal */
export const PostAuthV2UserLoginBadRequestError$inboundSchema: z.ZodType<
  PostAuthV2UserLoginBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostAuthV2UserLoginBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostAuthV2UserLoginBadRequestError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostAuthV2UserLoginBadRequestError$outboundSchema: z.ZodType<
  PostAuthV2UserLoginBadRequestError$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginBadRequestError
> = z.instanceof(PostAuthV2UserLoginBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginBadRequestError$ {
  /** @deprecated use `PostAuthV2UserLoginBadRequestError$inboundSchema` instead. */
  export const inboundSchema = PostAuthV2UserLoginBadRequestError$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV2UserLoginBadRequestError$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginBadRequestError$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginBadRequestError$Outbound;
}
