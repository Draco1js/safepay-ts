/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { SafepayError } from "./safepayerror.js";

/**
 * 500
 */
export type PostOrderPaymentsV3InternalServerErrorData = {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3InternalServerErrorStatus | undefined;
};

/**
 * 500
 */
export class PostOrderPaymentsV3InternalServerError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3InternalServerErrorStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostOrderPaymentsV3InternalServerErrorData;

  constructor(
    err: PostOrderPaymentsV3InternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostOrderPaymentsV3InternalServerError";
  }
}

/**
 * 404
 */
export type PostOrderPaymentsV3NotFoundErrorData = {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3NotFoundStatus | undefined;
};

/**
 * 404
 */
export class PostOrderPaymentsV3NotFoundError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3NotFoundStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostOrderPaymentsV3NotFoundErrorData;

  constructor(
    err: PostOrderPaymentsV3NotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostOrderPaymentsV3NotFoundError";
  }
}

/**
 * 400
 */
export type PostOrderPaymentsV3BadRequestErrorData = {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3BadRequestStatus | undefined;
};

/**
 * 400
 */
export class PostOrderPaymentsV3BadRequestError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3BadRequestStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostOrderPaymentsV3BadRequestErrorData;

  constructor(
    err: PostOrderPaymentsV3BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostOrderPaymentsV3BadRequestError";
  }
}

/** @internal */
export const PostOrderPaymentsV3InternalServerError$inboundSchema: z.ZodType<
  PostOrderPaymentsV3InternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PostOrderPaymentsV3InternalServerErrorStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostOrderPaymentsV3InternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostOrderPaymentsV3InternalServerError$Outbound = {
  data?: any | null | undefined;
  status?:
    | operations.PostOrderPaymentsV3InternalServerErrorStatus$Outbound
    | undefined;
};

/** @internal */
export const PostOrderPaymentsV3InternalServerError$outboundSchema: z.ZodType<
  PostOrderPaymentsV3InternalServerError$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3InternalServerError
> = z.instanceof(PostOrderPaymentsV3InternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PostOrderPaymentsV3InternalServerErrorStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3InternalServerError$ {
  /** @deprecated use `PostOrderPaymentsV3InternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    PostOrderPaymentsV3InternalServerError$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3InternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3InternalServerError$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3InternalServerError$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3InternalServerError$Outbound;
}

/** @internal */
export const PostOrderPaymentsV3NotFoundError$inboundSchema: z.ZodType<
  PostOrderPaymentsV3NotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PostOrderPaymentsV3NotFoundStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostOrderPaymentsV3NotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostOrderPaymentsV3NotFoundError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3NotFoundStatus$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3NotFoundError$outboundSchema: z.ZodType<
  PostOrderPaymentsV3NotFoundError$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3NotFoundError
> = z.instanceof(PostOrderPaymentsV3NotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PostOrderPaymentsV3NotFoundStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3NotFoundError$ {
  /** @deprecated use `PostOrderPaymentsV3NotFoundError$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3NotFoundError$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NotFoundError$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3NotFoundError$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NotFoundError$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3NotFoundError$Outbound;
}

/** @internal */
export const PostOrderPaymentsV3BadRequestError$inboundSchema: z.ZodType<
  PostOrderPaymentsV3BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PostOrderPaymentsV3BadRequestStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostOrderPaymentsV3BadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostOrderPaymentsV3BadRequestError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostOrderPaymentsV3BadRequestStatus$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3BadRequestError$outboundSchema: z.ZodType<
  PostOrderPaymentsV3BadRequestError$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3BadRequestError
> = z.instanceof(PostOrderPaymentsV3BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PostOrderPaymentsV3BadRequestStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3BadRequestError$ {
  /** @deprecated use `PostOrderPaymentsV3BadRequestError$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3BadRequestError$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3BadRequestError$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BadRequestError$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3BadRequestError$Outbound;
}
