/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { SafepayError } from "./safepayerror.js";

/**
 * 401
 */
export type PutClientApiSettingsV1UnauthorizedErrorData = {
  data?: any | null | undefined;
  status?: operations.PutClientApiSettingsV1UnauthorizedStatus | undefined;
};

/**
 * 401
 */
export class PutClientApiSettingsV1UnauthorizedError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PutClientApiSettingsV1UnauthorizedStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PutClientApiSettingsV1UnauthorizedErrorData;

  constructor(
    err: PutClientApiSettingsV1UnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PutClientApiSettingsV1UnauthorizedError";
  }
}

/** @internal */
export const PutClientApiSettingsV1UnauthorizedError$inboundSchema: z.ZodType<
  PutClientApiSettingsV1UnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PutClientApiSettingsV1UnauthorizedStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PutClientApiSettingsV1UnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PutClientApiSettingsV1UnauthorizedError$Outbound = {
  data?: any | null | undefined;
  status?:
    | operations.PutClientApiSettingsV1UnauthorizedStatus$Outbound
    | undefined;
};

/** @internal */
export const PutClientApiSettingsV1UnauthorizedError$outboundSchema: z.ZodType<
  PutClientApiSettingsV1UnauthorizedError$Outbound,
  z.ZodTypeDef,
  PutClientApiSettingsV1UnauthorizedError
> = z.instanceof(PutClientApiSettingsV1UnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PutClientApiSettingsV1UnauthorizedStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutClientApiSettingsV1UnauthorizedError$ {
  /** @deprecated use `PutClientApiSettingsV1UnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PutClientApiSettingsV1UnauthorizedError$inboundSchema;
  /** @deprecated use `PutClientApiSettingsV1UnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PutClientApiSettingsV1UnauthorizedError$outboundSchema;
  /** @deprecated use `PutClientApiSettingsV1UnauthorizedError$Outbound` instead. */
  export type Outbound = PutClientApiSettingsV1UnauthorizedError$Outbound;
}
