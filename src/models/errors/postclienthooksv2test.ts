/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { SafepayError } from "./safepayerror.js";

/**
 * 401
 */
export type PostClientHooksV2TestUnauthorizedErrorData = {
  data?: any | null | undefined;
  status?: operations.PostClientHooksV2TestStatus | undefined;
};

/**
 * 401
 */
export class PostClientHooksV2TestUnauthorizedError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostClientHooksV2TestStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostClientHooksV2TestUnauthorizedErrorData;

  constructor(
    err: PostClientHooksV2TestUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostClientHooksV2TestUnauthorizedError";
  }
}

/**
 * 400
 */
export type PostClientHooksV2TestBadRequestErrorData = {
  details?: operations.Details | undefined;
  error?: string | undefined;
};

/**
 * 400
 */
export class PostClientHooksV2TestBadRequestError extends SafepayError {
  details?: operations.Details | undefined;
  error?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostClientHooksV2TestBadRequestErrorData;

  constructor(
    err: PostClientHooksV2TestBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.details != null) this.details = err.details;
    if (err.error != null) this.error = err.error;

    this.name = "PostClientHooksV2TestBadRequestError";
  }
}

/** @internal */
export const PostClientHooksV2TestUnauthorizedError$inboundSchema: z.ZodType<
  PostClientHooksV2TestUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() => operations.PostClientHooksV2TestStatus$inboundSchema)
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostClientHooksV2TestUnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostClientHooksV2TestUnauthorizedError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostClientHooksV2TestStatus$Outbound | undefined;
};

/** @internal */
export const PostClientHooksV2TestUnauthorizedError$outboundSchema: z.ZodType<
  PostClientHooksV2TestUnauthorizedError$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestUnauthorizedError
> = z.instanceof(PostClientHooksV2TestUnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() => operations.PostClientHooksV2TestStatus$outboundSchema)
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestUnauthorizedError$ {
  /** @deprecated use `PostClientHooksV2TestUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PostClientHooksV2TestUnauthorizedError$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostClientHooksV2TestUnauthorizedError$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestUnauthorizedError$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestUnauthorizedError$Outbound;
}

/** @internal */
export const PostClientHooksV2TestBadRequestError$inboundSchema: z.ZodType<
  PostClientHooksV2TestBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  details: z.lazy(() => operations.Details$inboundSchema).optional(),
  error: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostClientHooksV2TestBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostClientHooksV2TestBadRequestError$Outbound = {
  details?: operations.Details$Outbound | undefined;
  error?: string | undefined;
};

/** @internal */
export const PostClientHooksV2TestBadRequestError$outboundSchema: z.ZodType<
  PostClientHooksV2TestBadRequestError$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestBadRequestError
> = z.instanceof(PostClientHooksV2TestBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    details: z.lazy(() => operations.Details$outboundSchema).optional(),
    error: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestBadRequestError$ {
  /** @deprecated use `PostClientHooksV2TestBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PostClientHooksV2TestBadRequestError$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostClientHooksV2TestBadRequestError$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestBadRequestError$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestBadRequestError$Outbound;
}
