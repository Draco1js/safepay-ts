/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { SafepayError } from "./safepayerror.js";

/**
 * 401
 */
export type PostUserAddressV2UnauthorizedErrorData = {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2UnauthorizedStatus | undefined;
};

/**
 * 401
 */
export class PostUserAddressV2UnauthorizedError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2UnauthorizedStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostUserAddressV2UnauthorizedErrorData;

  constructor(
    err: PostUserAddressV2UnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostUserAddressV2UnauthorizedError";
  }
}

/**
 * 400
 */
export type PostUserAddressV2BadRequestErrorData = {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2BadRequestStatus | undefined;
};

/**
 * 400
 */
export class PostUserAddressV2BadRequestError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2BadRequestStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostUserAddressV2BadRequestErrorData;

  constructor(
    err: PostUserAddressV2BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostUserAddressV2BadRequestError";
  }
}

/** @internal */
export const PostUserAddressV2UnauthorizedError$inboundSchema: z.ZodType<
  PostUserAddressV2UnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PostUserAddressV2UnauthorizedStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostUserAddressV2UnauthorizedError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostUserAddressV2UnauthorizedError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2UnauthorizedStatus$Outbound | undefined;
};

/** @internal */
export const PostUserAddressV2UnauthorizedError$outboundSchema: z.ZodType<
  PostUserAddressV2UnauthorizedError$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2UnauthorizedError
> = z.instanceof(PostUserAddressV2UnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PostUserAddressV2UnauthorizedStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2UnauthorizedError$ {
  /** @deprecated use `PostUserAddressV2UnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2UnauthorizedError$inboundSchema;
  /** @deprecated use `PostUserAddressV2UnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostUserAddressV2UnauthorizedError$outboundSchema;
  /** @deprecated use `PostUserAddressV2UnauthorizedError$Outbound` instead. */
  export type Outbound = PostUserAddressV2UnauthorizedError$Outbound;
}

/** @internal */
export const PostUserAddressV2BadRequestError$inboundSchema: z.ZodType<
  PostUserAddressV2BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.any()).optional(),
  status: z.lazy(() =>
    operations.PostUserAddressV2BadRequestStatus$inboundSchema
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new PostUserAddressV2BadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostUserAddressV2BadRequestError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostUserAddressV2BadRequestStatus$Outbound | undefined;
};

/** @internal */
export const PostUserAddressV2BadRequestError$outboundSchema: z.ZodType<
  PostUserAddressV2BadRequestError$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2BadRequestError
> = z.instanceof(PostUserAddressV2BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.nullable(z.any()).optional(),
    status: z.lazy(() =>
      operations.PostUserAddressV2BadRequestStatus$outboundSchema
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2BadRequestError$ {
  /** @deprecated use `PostUserAddressV2BadRequestError$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2BadRequestError$inboundSchema;
  /** @deprecated use `PostUserAddressV2BadRequestError$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2BadRequestError$outboundSchema;
  /** @deprecated use `PostUserAddressV2BadRequestError$Outbound` instead. */
  export type Outbound = PostUserAddressV2BadRequestError$Outbound;
}
