/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { SafepayError } from "./safepayerror.js";

/**
 * 401
 */
export type PostClientPassportV1TokenUnauthorizedErrorData = {
  data?: any | null | undefined;
  status?: operations.PostClientPassportV1TokenStatus | undefined;
};

/**
 * 401
 */
export class PostClientPassportV1TokenUnauthorizedError extends SafepayError {
  data?: any | null | undefined;
  status?: operations.PostClientPassportV1TokenStatus | undefined;

  /** The original data that was passed to this error instance. */
  data$: PostClientPassportV1TokenUnauthorizedErrorData;

  constructor(
    err: PostClientPassportV1TokenUnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.status != null) this.status = err.status;

    this.name = "PostClientPassportV1TokenUnauthorizedError";
  }
}

/** @internal */
export const PostClientPassportV1TokenUnauthorizedError$inboundSchema:
  z.ZodType<PostClientPassportV1TokenUnauthorizedError, z.ZodTypeDef, unknown> =
    z.object({
      data: z.nullable(z.any()).optional(),
      status: z.lazy(() =>
        operations.PostClientPassportV1TokenStatus$inboundSchema
      ).optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new PostClientPassportV1TokenUnauthorizedError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type PostClientPassportV1TokenUnauthorizedError$Outbound = {
  data?: any | null | undefined;
  status?: operations.PostClientPassportV1TokenStatus$Outbound | undefined;
};

/** @internal */
export const PostClientPassportV1TokenUnauthorizedError$outboundSchema:
  z.ZodType<
    PostClientPassportV1TokenUnauthorizedError$Outbound,
    z.ZodTypeDef,
    PostClientPassportV1TokenUnauthorizedError
  > = z.instanceof(PostClientPassportV1TokenUnauthorizedError)
    .transform(v => v.data$)
    .pipe(z.object({
      data: z.nullable(z.any()).optional(),
      status: z.lazy(() =>
        operations.PostClientPassportV1TokenStatus$outboundSchema
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPassportV1TokenUnauthorizedError$ {
  /** @deprecated use `PostClientPassportV1TokenUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema =
    PostClientPassportV1TokenUnauthorizedError$inboundSchema;
  /** @deprecated use `PostClientPassportV1TokenUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema =
    PostClientPassportV1TokenUnauthorizedError$outboundSchema;
  /** @deprecated use `PostClientPassportV1TokenUnauthorizedError$Outbound` instead. */
  export type Outbound = PostClientPassportV1TokenUnauthorizedError$Outbound;
}
