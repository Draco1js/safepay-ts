/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetUserMetaV2CountryRequest = {
  cc?: string | undefined;
};

export type Option = {
  id?: string | undefined;
  name?: string | undefined;
};

export type AdministrativeArea = {
  name?: string | undefined;
  options?: Array<Option> | undefined;
};

export type Locality = {
  name?: string | undefined;
};

export type PostCode = {
  name?: string | undefined;
};

export type StreetAddress = {
  name?: string | undefined;
};

export type GetUserMetaV2CountryData = {
  administrativeArea?: AdministrativeArea | undefined;
  locality?: Locality | undefined;
  postCode?: PostCode | undefined;
  streetAddress?: StreetAddress | undefined;
  required?: Array<string> | undefined;
};

/**
 * 200
 */
export type GetUserMetaV2CountryResponseBody = {
  apiVersion?: string | undefined;
  data?: GetUserMetaV2CountryData | undefined;
  status?: models.Status | undefined;
};

export type GetUserMetaV2CountryResponse = {
  headers: { [k: string]: Array<string> };
  result: GetUserMetaV2CountryResponseBody;
};

/** @internal */
export const GetUserMetaV2CountryRequest$inboundSchema: z.ZodType<
  GetUserMetaV2CountryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cc: z.string().optional(),
});

/** @internal */
export type GetUserMetaV2CountryRequest$Outbound = {
  cc?: string | undefined;
};

/** @internal */
export const GetUserMetaV2CountryRequest$outboundSchema: z.ZodType<
  GetUserMetaV2CountryRequest$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountryRequest
> = z.object({
  cc: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountryRequest$ {
  /** @deprecated use `GetUserMetaV2CountryRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountryRequest$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountryRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountryRequest$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountryRequest$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountryRequest$Outbound;
}

export function getUserMetaV2CountryRequestToJSON(
  getUserMetaV2CountryRequest: GetUserMetaV2CountryRequest,
): string {
  return JSON.stringify(
    GetUserMetaV2CountryRequest$outboundSchema.parse(
      getUserMetaV2CountryRequest,
    ),
  );
}

export function getUserMetaV2CountryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountryRequest' from JSON`,
  );
}

/** @internal */
export const Option$inboundSchema: z.ZodType<Option, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
  });

/** @internal */
export type Option$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Option$outboundSchema: z.ZodType<
  Option$Outbound,
  z.ZodTypeDef,
  Option
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Option$ {
  /** @deprecated use `Option$inboundSchema` instead. */
  export const inboundSchema = Option$inboundSchema;
  /** @deprecated use `Option$outboundSchema` instead. */
  export const outboundSchema = Option$outboundSchema;
  /** @deprecated use `Option$Outbound` instead. */
  export type Outbound = Option$Outbound;
}

export function optionToJSON(option: Option): string {
  return JSON.stringify(Option$outboundSchema.parse(option));
}

export function optionFromJSON(
  jsonString: string,
): SafeParseResult<Option, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Option$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Option' from JSON`,
  );
}

/** @internal */
export const AdministrativeArea$inboundSchema: z.ZodType<
  AdministrativeArea,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  options: z.array(z.lazy(() => Option$inboundSchema)).optional(),
});

/** @internal */
export type AdministrativeArea$Outbound = {
  name?: string | undefined;
  options?: Array<Option$Outbound> | undefined;
};

/** @internal */
export const AdministrativeArea$outboundSchema: z.ZodType<
  AdministrativeArea$Outbound,
  z.ZodTypeDef,
  AdministrativeArea
> = z.object({
  name: z.string().optional(),
  options: z.array(z.lazy(() => Option$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdministrativeArea$ {
  /** @deprecated use `AdministrativeArea$inboundSchema` instead. */
  export const inboundSchema = AdministrativeArea$inboundSchema;
  /** @deprecated use `AdministrativeArea$outboundSchema` instead. */
  export const outboundSchema = AdministrativeArea$outboundSchema;
  /** @deprecated use `AdministrativeArea$Outbound` instead. */
  export type Outbound = AdministrativeArea$Outbound;
}

export function administrativeAreaToJSON(
  administrativeArea: AdministrativeArea,
): string {
  return JSON.stringify(
    AdministrativeArea$outboundSchema.parse(administrativeArea),
  );
}

export function administrativeAreaFromJSON(
  jsonString: string,
): SafeParseResult<AdministrativeArea, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdministrativeArea$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdministrativeArea' from JSON`,
  );
}

/** @internal */
export const Locality$inboundSchema: z.ZodType<
  Locality,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type Locality$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const Locality$outboundSchema: z.ZodType<
  Locality$Outbound,
  z.ZodTypeDef,
  Locality
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Locality$ {
  /** @deprecated use `Locality$inboundSchema` instead. */
  export const inboundSchema = Locality$inboundSchema;
  /** @deprecated use `Locality$outboundSchema` instead. */
  export const outboundSchema = Locality$outboundSchema;
  /** @deprecated use `Locality$Outbound` instead. */
  export type Outbound = Locality$Outbound;
}

export function localityToJSON(locality: Locality): string {
  return JSON.stringify(Locality$outboundSchema.parse(locality));
}

export function localityFromJSON(
  jsonString: string,
): SafeParseResult<Locality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Locality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Locality' from JSON`,
  );
}

/** @internal */
export const PostCode$inboundSchema: z.ZodType<
  PostCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type PostCode$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const PostCode$outboundSchema: z.ZodType<
  PostCode$Outbound,
  z.ZodTypeDef,
  PostCode
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCode$ {
  /** @deprecated use `PostCode$inboundSchema` instead. */
  export const inboundSchema = PostCode$inboundSchema;
  /** @deprecated use `PostCode$outboundSchema` instead. */
  export const outboundSchema = PostCode$outboundSchema;
  /** @deprecated use `PostCode$Outbound` instead. */
  export type Outbound = PostCode$Outbound;
}

export function postCodeToJSON(postCode: PostCode): string {
  return JSON.stringify(PostCode$outboundSchema.parse(postCode));
}

export function postCodeFromJSON(
  jsonString: string,
): SafeParseResult<PostCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostCode' from JSON`,
  );
}

/** @internal */
export const StreetAddress$inboundSchema: z.ZodType<
  StreetAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type StreetAddress$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const StreetAddress$outboundSchema: z.ZodType<
  StreetAddress$Outbound,
  z.ZodTypeDef,
  StreetAddress
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreetAddress$ {
  /** @deprecated use `StreetAddress$inboundSchema` instead. */
  export const inboundSchema = StreetAddress$inboundSchema;
  /** @deprecated use `StreetAddress$outboundSchema` instead. */
  export const outboundSchema = StreetAddress$outboundSchema;
  /** @deprecated use `StreetAddress$Outbound` instead. */
  export type Outbound = StreetAddress$Outbound;
}

export function streetAddressToJSON(streetAddress: StreetAddress): string {
  return JSON.stringify(StreetAddress$outboundSchema.parse(streetAddress));
}

export function streetAddressFromJSON(
  jsonString: string,
): SafeParseResult<StreetAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreetAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreetAddress' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountryData$inboundSchema: z.ZodType<
  GetUserMetaV2CountryData,
  z.ZodTypeDef,
  unknown
> = z.object({
  AdministrativeArea: z.lazy(() => AdministrativeArea$inboundSchema).optional(),
  Locality: z.lazy(() => Locality$inboundSchema).optional(),
  PostCode: z.lazy(() => PostCode$inboundSchema).optional(),
  StreetAddress: z.lazy(() => StreetAddress$inboundSchema).optional(),
  required: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "AdministrativeArea": "administrativeArea",
    "Locality": "locality",
    "PostCode": "postCode",
    "StreetAddress": "streetAddress",
  });
});

/** @internal */
export type GetUserMetaV2CountryData$Outbound = {
  AdministrativeArea?: AdministrativeArea$Outbound | undefined;
  Locality?: Locality$Outbound | undefined;
  PostCode?: PostCode$Outbound | undefined;
  StreetAddress?: StreetAddress$Outbound | undefined;
  required?: Array<string> | undefined;
};

/** @internal */
export const GetUserMetaV2CountryData$outboundSchema: z.ZodType<
  GetUserMetaV2CountryData$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountryData
> = z.object({
  administrativeArea: z.lazy(() => AdministrativeArea$outboundSchema)
    .optional(),
  locality: z.lazy(() => Locality$outboundSchema).optional(),
  postCode: z.lazy(() => PostCode$outboundSchema).optional(),
  streetAddress: z.lazy(() => StreetAddress$outboundSchema).optional(),
  required: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    administrativeArea: "AdministrativeArea",
    locality: "Locality",
    postCode: "PostCode",
    streetAddress: "StreetAddress",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountryData$ {
  /** @deprecated use `GetUserMetaV2CountryData$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountryData$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountryData$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountryData$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountryData$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountryData$Outbound;
}

export function getUserMetaV2CountryDataToJSON(
  getUserMetaV2CountryData: GetUserMetaV2CountryData,
): string {
  return JSON.stringify(
    GetUserMetaV2CountryData$outboundSchema.parse(getUserMetaV2CountryData),
  );
}

export function getUserMetaV2CountryDataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountryData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountryData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountryData' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountryResponseBody$inboundSchema: z.ZodType<
  GetUserMetaV2CountryResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_version: z.string().optional(),
  data: z.lazy(() => GetUserMetaV2CountryData$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "api_version": "apiVersion",
  });
});

/** @internal */
export type GetUserMetaV2CountryResponseBody$Outbound = {
  api_version?: string | undefined;
  data?: GetUserMetaV2CountryData$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetUserMetaV2CountryResponseBody$outboundSchema: z.ZodType<
  GetUserMetaV2CountryResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountryResponseBody
> = z.object({
  apiVersion: z.string().optional(),
  data: z.lazy(() => GetUserMetaV2CountryData$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiVersion: "api_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountryResponseBody$ {
  /** @deprecated use `GetUserMetaV2CountryResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountryResponseBody$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountryResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountryResponseBody$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountryResponseBody$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountryResponseBody$Outbound;
}

export function getUserMetaV2CountryResponseBodyToJSON(
  getUserMetaV2CountryResponseBody: GetUserMetaV2CountryResponseBody,
): string {
  return JSON.stringify(
    GetUserMetaV2CountryResponseBody$outboundSchema.parse(
      getUserMetaV2CountryResponseBody,
    ),
  );
}

export function getUserMetaV2CountryResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountryResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountryResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountryResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountryResponse$inboundSchema: z.ZodType<
  GetUserMetaV2CountryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserMetaV2CountryResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserMetaV2CountryResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserMetaV2CountryResponseBody$Outbound;
};

/** @internal */
export const GetUserMetaV2CountryResponse$outboundSchema: z.ZodType<
  GetUserMetaV2CountryResponse$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountryResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserMetaV2CountryResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountryResponse$ {
  /** @deprecated use `GetUserMetaV2CountryResponse$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountryResponse$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountryResponse$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountryResponse$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountryResponse$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountryResponse$Outbound;
}

export function getUserMetaV2CountryResponseToJSON(
  getUserMetaV2CountryResponse: GetUserMetaV2CountryResponse,
): string {
  return JSON.stringify(
    GetUserMetaV2CountryResponse$outboundSchema.parse(
      getUserMetaV2CountryResponse,
    ),
  );
}

export function getUserMetaV2CountryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountryResponse' from JSON`,
  );
}
