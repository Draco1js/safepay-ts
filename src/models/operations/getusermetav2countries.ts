/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetUserMetaV2CountriesRequest = {
  lang?: string | undefined;
};

export type GetUserMetaV2CountriesData = {
  code?: string | undefined;
  name?: string | undefined;
};

/**
 * 200
 */
export type GetUserMetaV2CountriesResponseBody = {
  apiVersion?: string | undefined;
  data?: Array<GetUserMetaV2CountriesData> | undefined;
  status?: models.Status | undefined;
};

export type GetUserMetaV2CountriesResponse = {
  headers: { [k: string]: Array<string> };
  result: GetUserMetaV2CountriesResponseBody;
};

/** @internal */
export const GetUserMetaV2CountriesRequest$inboundSchema: z.ZodType<
  GetUserMetaV2CountriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lang: z.string().optional(),
});

/** @internal */
export type GetUserMetaV2CountriesRequest$Outbound = {
  lang?: string | undefined;
};

/** @internal */
export const GetUserMetaV2CountriesRequest$outboundSchema: z.ZodType<
  GetUserMetaV2CountriesRequest$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountriesRequest
> = z.object({
  lang: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountriesRequest$ {
  /** @deprecated use `GetUserMetaV2CountriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountriesRequest$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountriesRequest$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesRequest$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountriesRequest$Outbound;
}

export function getUserMetaV2CountriesRequestToJSON(
  getUserMetaV2CountriesRequest: GetUserMetaV2CountriesRequest,
): string {
  return JSON.stringify(
    GetUserMetaV2CountriesRequest$outboundSchema.parse(
      getUserMetaV2CountriesRequest,
    ),
  );
}

export function getUserMetaV2CountriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountriesRequest' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountriesData$inboundSchema: z.ZodType<
  GetUserMetaV2CountriesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type GetUserMetaV2CountriesData$Outbound = {
  code?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const GetUserMetaV2CountriesData$outboundSchema: z.ZodType<
  GetUserMetaV2CountriesData$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountriesData
> = z.object({
  code: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountriesData$ {
  /** @deprecated use `GetUserMetaV2CountriesData$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountriesData$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesData$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountriesData$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesData$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountriesData$Outbound;
}

export function getUserMetaV2CountriesDataToJSON(
  getUserMetaV2CountriesData: GetUserMetaV2CountriesData,
): string {
  return JSON.stringify(
    GetUserMetaV2CountriesData$outboundSchema.parse(getUserMetaV2CountriesData),
  );
}

export function getUserMetaV2CountriesDataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountriesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountriesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountriesData' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountriesResponseBody$inboundSchema: z.ZodType<
  GetUserMetaV2CountriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_version: z.string().optional(),
  data: z.array(z.lazy(() => GetUserMetaV2CountriesData$inboundSchema))
    .optional(),
  status: models.Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "api_version": "apiVersion",
  });
});

/** @internal */
export type GetUserMetaV2CountriesResponseBody$Outbound = {
  api_version?: string | undefined;
  data?: Array<GetUserMetaV2CountriesData$Outbound> | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetUserMetaV2CountriesResponseBody$outboundSchema: z.ZodType<
  GetUserMetaV2CountriesResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountriesResponseBody
> = z.object({
  apiVersion: z.string().optional(),
  data: z.array(z.lazy(() => GetUserMetaV2CountriesData$outboundSchema))
    .optional(),
  status: models.Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiVersion: "api_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountriesResponseBody$ {
  /** @deprecated use `GetUserMetaV2CountriesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountriesResponseBody$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetUserMetaV2CountriesResponseBody$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesResponseBody$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountriesResponseBody$Outbound;
}

export function getUserMetaV2CountriesResponseBodyToJSON(
  getUserMetaV2CountriesResponseBody: GetUserMetaV2CountriesResponseBody,
): string {
  return JSON.stringify(
    GetUserMetaV2CountriesResponseBody$outboundSchema.parse(
      getUserMetaV2CountriesResponseBody,
    ),
  );
}

export function getUserMetaV2CountriesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountriesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetUserMetaV2CountriesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountriesResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserMetaV2CountriesResponse$inboundSchema: z.ZodType<
  GetUserMetaV2CountriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserMetaV2CountriesResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserMetaV2CountriesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserMetaV2CountriesResponseBody$Outbound;
};

/** @internal */
export const GetUserMetaV2CountriesResponse$outboundSchema: z.ZodType<
  GetUserMetaV2CountriesResponse$Outbound,
  z.ZodTypeDef,
  GetUserMetaV2CountriesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserMetaV2CountriesResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserMetaV2CountriesResponse$ {
  /** @deprecated use `GetUserMetaV2CountriesResponse$inboundSchema` instead. */
  export const inboundSchema = GetUserMetaV2CountriesResponse$inboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesResponse$outboundSchema` instead. */
  export const outboundSchema = GetUserMetaV2CountriesResponse$outboundSchema;
  /** @deprecated use `GetUserMetaV2CountriesResponse$Outbound` instead. */
  export type Outbound = GetUserMetaV2CountriesResponse$Outbound;
}

export function getUserMetaV2CountriesResponseToJSON(
  getUserMetaV2CountriesResponse: GetUserMetaV2CountriesResponse,
): string {
  return JSON.stringify(
    GetUserMetaV2CountriesResponse$outboundSchema.parse(
      getUserMetaV2CountriesResponse,
    ),
  );
}

export function getUserMetaV2CountriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserMetaV2CountriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserMetaV2CountriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserMetaV2CountriesResponse' from JSON`,
  );
}
