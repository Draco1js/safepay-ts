/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type MetadataRequest = {
  orderId?: string | undefined;
  source?: string | undefined;
};

export type PostOrderPaymentsV3Request = {
  amount?: number | undefined;
  currency?: string | undefined;
  entryMode?: string | undefined;
  intent?: string | undefined;
  merchantApiKey?: string | undefined;
  metadata?: MetadataRequest | undefined;
  mode?: string | undefined;
};

export type Capabilities = {
  cybersource?: boolean | undefined;
  mpgs?: boolean | undefined;
};

export type MetadataResponse = {};

export type PostOrderPaymentsV3CYBERSOURCE = {
  kind?: string | undefined;
};

export type Mpgs = {
  kind?: string | undefined;
};

export type NextActions = {
  cybersource?: PostOrderPaymentsV3CYBERSOURCE | undefined;
  mpgs?: Mpgs | undefined;
};

export type BaseAmount = {
  amount?: number | undefined;
  currency?: string | undefined;
};

export type ConversionRate = {
  baseCurrency?: string | undefined;
  quoteCurrency?: string | undefined;
  rate?: number | undefined;
};

export type QuoteAmount = {
  amount?: number | undefined;
  currency?: string | undefined;
};

export type PurchaseTotals = {
  baseAmount?: BaseAmount | undefined;
  conversionRate?: ConversionRate | undefined;
  quoteAmount?: QuoteAmount | undefined;
};

export type Tracker = {
  client?: string | undefined;
  entryMode?: string | undefined;
  environment?: string | undefined;
  intent?: string | undefined;
  metadata?: MetadataResponse | undefined;
  mode?: string | undefined;
  nextActions?: NextActions | undefined;
  purchaseTotals?: PurchaseTotals | undefined;
  state?: string | undefined;
  token?: string | undefined;
};

export type PostOrderPaymentsV3Data = {
  capabilities?: Capabilities | undefined;
  tracker?: Tracker | undefined;
};

/**
 * 201 - flex
 */
export type PostOrderPaymentsV3ResponseBody = {
  data?: PostOrderPaymentsV3Data | undefined;
  status?: models.Status | undefined;
};

export type PostOrderPaymentsV3Response = {
  headers: { [k: string]: Array<string> };
  result: PostOrderPaymentsV3ResponseBody;
};

/** @internal */
export const MetadataRequest$inboundSchema: z.ZodType<
  MetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.string().optional(),
  source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
  });
});

/** @internal */
export type MetadataRequest$Outbound = {
  order_id?: string | undefined;
  source?: string | undefined;
};

/** @internal */
export const MetadataRequest$outboundSchema: z.ZodType<
  MetadataRequest$Outbound,
  z.ZodTypeDef,
  MetadataRequest
> = z.object({
  orderId: z.string().optional(),
  source: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRequest$ {
  /** @deprecated use `MetadataRequest$inboundSchema` instead. */
  export const inboundSchema = MetadataRequest$inboundSchema;
  /** @deprecated use `MetadataRequest$outboundSchema` instead. */
  export const outboundSchema = MetadataRequest$outboundSchema;
  /** @deprecated use `MetadataRequest$Outbound` instead. */
  export type Outbound = MetadataRequest$Outbound;
}

export function metadataRequestToJSON(
  metadataRequest: MetadataRequest,
): string {
  return JSON.stringify(MetadataRequest$outboundSchema.parse(metadataRequest));
}

export function metadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRequest' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Request$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
  entry_mode: z.string().optional(),
  intent: z.string().optional(),
  merchant_api_key: z.string().optional(),
  metadata: z.lazy(() => MetadataRequest$inboundSchema).optional(),
  mode: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "entry_mode": "entryMode",
    "merchant_api_key": "merchantApiKey",
  });
});

/** @internal */
export type PostOrderPaymentsV3Request$Outbound = {
  amount?: number | undefined;
  currency?: string | undefined;
  entry_mode?: string | undefined;
  intent?: string | undefined;
  merchant_api_key?: string | undefined;
  metadata?: MetadataRequest$Outbound | undefined;
  mode?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Request$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Request$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Request
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
  entryMode: z.string().optional(),
  intent: z.string().optional(),
  merchantApiKey: z.string().optional(),
  metadata: z.lazy(() => MetadataRequest$outboundSchema).optional(),
  mode: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    entryMode: "entry_mode",
    merchantApiKey: "merchant_api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Request$ {
  /** @deprecated use `PostOrderPaymentsV3Request$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Request$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Request$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Request$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Request$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Request$Outbound;
}

export function postOrderPaymentsV3RequestToJSON(
  postOrderPaymentsV3Request: PostOrderPaymentsV3Request,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Request$outboundSchema.parse(postOrderPaymentsV3Request),
  );
}

export function postOrderPaymentsV3RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Request' from JSON`,
  );
}

/** @internal */
export const Capabilities$inboundSchema: z.ZodType<
  Capabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  CYBERSOURCE: z.boolean().optional(),
  MPGS: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "CYBERSOURCE": "cybersource",
    "MPGS": "mpgs",
  });
});

/** @internal */
export type Capabilities$Outbound = {
  CYBERSOURCE?: boolean | undefined;
  MPGS?: boolean | undefined;
};

/** @internal */
export const Capabilities$outboundSchema: z.ZodType<
  Capabilities$Outbound,
  z.ZodTypeDef,
  Capabilities
> = z.object({
  cybersource: z.boolean().optional(),
  mpgs: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    cybersource: "CYBERSOURCE",
    mpgs: "MPGS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Capabilities$ {
  /** @deprecated use `Capabilities$inboundSchema` instead. */
  export const inboundSchema = Capabilities$inboundSchema;
  /** @deprecated use `Capabilities$outboundSchema` instead. */
  export const outboundSchema = Capabilities$outboundSchema;
  /** @deprecated use `Capabilities$Outbound` instead. */
  export type Outbound = Capabilities$Outbound;
}

export function capabilitiesToJSON(capabilities: Capabilities): string {
  return JSON.stringify(Capabilities$outboundSchema.parse(capabilities));
}

export function capabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<Capabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Capabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Capabilities' from JSON`,
  );
}

/** @internal */
export const MetadataResponse$inboundSchema: z.ZodType<
  MetadataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataResponse$Outbound = {};

/** @internal */
export const MetadataResponse$outboundSchema: z.ZodType<
  MetadataResponse$Outbound,
  z.ZodTypeDef,
  MetadataResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataResponse$ {
  /** @deprecated use `MetadataResponse$inboundSchema` instead. */
  export const inboundSchema = MetadataResponse$inboundSchema;
  /** @deprecated use `MetadataResponse$outboundSchema` instead. */
  export const outboundSchema = MetadataResponse$outboundSchema;
  /** @deprecated use `MetadataResponse$Outbound` instead. */
  export type Outbound = MetadataResponse$Outbound;
}

export function metadataResponseToJSON(
  metadataResponse: MetadataResponse,
): string {
  return JSON.stringify(
    MetadataResponse$outboundSchema.parse(metadataResponse),
  );
}

export function metadataResponseFromJSON(
  jsonString: string,
): SafeParseResult<MetadataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataResponse' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3CYBERSOURCE$inboundSchema: z.ZodType<
  PostOrderPaymentsV3CYBERSOURCE,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3CYBERSOURCE$Outbound = {
  kind?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3CYBERSOURCE$outboundSchema: z.ZodType<
  PostOrderPaymentsV3CYBERSOURCE$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3CYBERSOURCE
> = z.object({
  kind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3CYBERSOURCE$ {
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3CYBERSOURCE$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3CYBERSOURCE$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3CYBERSOURCE$Outbound;
}

export function postOrderPaymentsV3CYBERSOURCEToJSON(
  postOrderPaymentsV3CYBERSOURCE: PostOrderPaymentsV3CYBERSOURCE,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3CYBERSOURCE$outboundSchema.parse(
      postOrderPaymentsV3CYBERSOURCE,
    ),
  );
}

export function postOrderPaymentsV3CYBERSOURCEFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3CYBERSOURCE, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3CYBERSOURCE$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3CYBERSOURCE' from JSON`,
  );
}

/** @internal */
export const Mpgs$inboundSchema: z.ZodType<Mpgs, z.ZodTypeDef, unknown> = z
  .object({
    kind: z.string().optional(),
  });

/** @internal */
export type Mpgs$Outbound = {
  kind?: string | undefined;
};

/** @internal */
export const Mpgs$outboundSchema: z.ZodType<Mpgs$Outbound, z.ZodTypeDef, Mpgs> =
  z.object({
    kind: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mpgs$ {
  /** @deprecated use `Mpgs$inboundSchema` instead. */
  export const inboundSchema = Mpgs$inboundSchema;
  /** @deprecated use `Mpgs$outboundSchema` instead. */
  export const outboundSchema = Mpgs$outboundSchema;
  /** @deprecated use `Mpgs$Outbound` instead. */
  export type Outbound = Mpgs$Outbound;
}

export function mpgsToJSON(mpgs: Mpgs): string {
  return JSON.stringify(Mpgs$outboundSchema.parse(mpgs));
}

export function mpgsFromJSON(
  jsonString: string,
): SafeParseResult<Mpgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mpgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mpgs' from JSON`,
  );
}

/** @internal */
export const NextActions$inboundSchema: z.ZodType<
  NextActions,
  z.ZodTypeDef,
  unknown
> = z.object({
  CYBERSOURCE: z.lazy(() => PostOrderPaymentsV3CYBERSOURCE$inboundSchema)
    .optional(),
  MPGS: z.lazy(() => Mpgs$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "CYBERSOURCE": "cybersource",
    "MPGS": "mpgs",
  });
});

/** @internal */
export type NextActions$Outbound = {
  CYBERSOURCE?: PostOrderPaymentsV3CYBERSOURCE$Outbound | undefined;
  MPGS?: Mpgs$Outbound | undefined;
};

/** @internal */
export const NextActions$outboundSchema: z.ZodType<
  NextActions$Outbound,
  z.ZodTypeDef,
  NextActions
> = z.object({
  cybersource: z.lazy(() => PostOrderPaymentsV3CYBERSOURCE$outboundSchema)
    .optional(),
  mpgs: z.lazy(() => Mpgs$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cybersource: "CYBERSOURCE",
    mpgs: "MPGS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextActions$ {
  /** @deprecated use `NextActions$inboundSchema` instead. */
  export const inboundSchema = NextActions$inboundSchema;
  /** @deprecated use `NextActions$outboundSchema` instead. */
  export const outboundSchema = NextActions$outboundSchema;
  /** @deprecated use `NextActions$Outbound` instead. */
  export type Outbound = NextActions$Outbound;
}

export function nextActionsToJSON(nextActions: NextActions): string {
  return JSON.stringify(NextActions$outboundSchema.parse(nextActions));
}

export function nextActionsFromJSON(
  jsonString: string,
): SafeParseResult<NextActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NextActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NextActions' from JSON`,
  );
}

/** @internal */
export const BaseAmount$inboundSchema: z.ZodType<
  BaseAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type BaseAmount$Outbound = {
  amount?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const BaseAmount$outboundSchema: z.ZodType<
  BaseAmount$Outbound,
  z.ZodTypeDef,
  BaseAmount
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BaseAmount$ {
  /** @deprecated use `BaseAmount$inboundSchema` instead. */
  export const inboundSchema = BaseAmount$inboundSchema;
  /** @deprecated use `BaseAmount$outboundSchema` instead. */
  export const outboundSchema = BaseAmount$outboundSchema;
  /** @deprecated use `BaseAmount$Outbound` instead. */
  export type Outbound = BaseAmount$Outbound;
}

export function baseAmountToJSON(baseAmount: BaseAmount): string {
  return JSON.stringify(BaseAmount$outboundSchema.parse(baseAmount));
}

export function baseAmountFromJSON(
  jsonString: string,
): SafeParseResult<BaseAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BaseAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BaseAmount' from JSON`,
  );
}

/** @internal */
export const ConversionRate$inboundSchema: z.ZodType<
  ConversionRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_currency: z.string().optional(),
  quote_currency: z.string().optional(),
  rate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "base_currency": "baseCurrency",
    "quote_currency": "quoteCurrency",
  });
});

/** @internal */
export type ConversionRate$Outbound = {
  base_currency?: string | undefined;
  quote_currency?: string | undefined;
  rate?: number | undefined;
};

/** @internal */
export const ConversionRate$outboundSchema: z.ZodType<
  ConversionRate$Outbound,
  z.ZodTypeDef,
  ConversionRate
> = z.object({
  baseCurrency: z.string().optional(),
  quoteCurrency: z.string().optional(),
  rate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    baseCurrency: "base_currency",
    quoteCurrency: "quote_currency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversionRate$ {
  /** @deprecated use `ConversionRate$inboundSchema` instead. */
  export const inboundSchema = ConversionRate$inboundSchema;
  /** @deprecated use `ConversionRate$outboundSchema` instead. */
  export const outboundSchema = ConversionRate$outboundSchema;
  /** @deprecated use `ConversionRate$Outbound` instead. */
  export type Outbound = ConversionRate$Outbound;
}

export function conversionRateToJSON(conversionRate: ConversionRate): string {
  return JSON.stringify(ConversionRate$outboundSchema.parse(conversionRate));
}

export function conversionRateFromJSON(
  jsonString: string,
): SafeParseResult<ConversionRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversionRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversionRate' from JSON`,
  );
}

/** @internal */
export const QuoteAmount$inboundSchema: z.ZodType<
  QuoteAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type QuoteAmount$Outbound = {
  amount?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const QuoteAmount$outboundSchema: z.ZodType<
  QuoteAmount$Outbound,
  z.ZodTypeDef,
  QuoteAmount
> = z.object({
  amount: z.number().int().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuoteAmount$ {
  /** @deprecated use `QuoteAmount$inboundSchema` instead. */
  export const inboundSchema = QuoteAmount$inboundSchema;
  /** @deprecated use `QuoteAmount$outboundSchema` instead. */
  export const outboundSchema = QuoteAmount$outboundSchema;
  /** @deprecated use `QuoteAmount$Outbound` instead. */
  export type Outbound = QuoteAmount$Outbound;
}

export function quoteAmountToJSON(quoteAmount: QuoteAmount): string {
  return JSON.stringify(QuoteAmount$outboundSchema.parse(quoteAmount));
}

export function quoteAmountFromJSON(
  jsonString: string,
): SafeParseResult<QuoteAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuoteAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuoteAmount' from JSON`,
  );
}

/** @internal */
export const PurchaseTotals$inboundSchema: z.ZodType<
  PurchaseTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_amount: z.lazy(() => BaseAmount$inboundSchema).optional(),
  conversion_rate: z.lazy(() => ConversionRate$inboundSchema).optional(),
  quote_amount: z.lazy(() => QuoteAmount$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "base_amount": "baseAmount",
    "conversion_rate": "conversionRate",
    "quote_amount": "quoteAmount",
  });
});

/** @internal */
export type PurchaseTotals$Outbound = {
  base_amount?: BaseAmount$Outbound | undefined;
  conversion_rate?: ConversionRate$Outbound | undefined;
  quote_amount?: QuoteAmount$Outbound | undefined;
};

/** @internal */
export const PurchaseTotals$outboundSchema: z.ZodType<
  PurchaseTotals$Outbound,
  z.ZodTypeDef,
  PurchaseTotals
> = z.object({
  baseAmount: z.lazy(() => BaseAmount$outboundSchema).optional(),
  conversionRate: z.lazy(() => ConversionRate$outboundSchema).optional(),
  quoteAmount: z.lazy(() => QuoteAmount$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    baseAmount: "base_amount",
    conversionRate: "conversion_rate",
    quoteAmount: "quote_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PurchaseTotals$ {
  /** @deprecated use `PurchaseTotals$inboundSchema` instead. */
  export const inboundSchema = PurchaseTotals$inboundSchema;
  /** @deprecated use `PurchaseTotals$outboundSchema` instead. */
  export const outboundSchema = PurchaseTotals$outboundSchema;
  /** @deprecated use `PurchaseTotals$Outbound` instead. */
  export type Outbound = PurchaseTotals$Outbound;
}

export function purchaseTotalsToJSON(purchaseTotals: PurchaseTotals): string {
  return JSON.stringify(PurchaseTotals$outboundSchema.parse(purchaseTotals));
}

export function purchaseTotalsFromJSON(
  jsonString: string,
): SafeParseResult<PurchaseTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PurchaseTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PurchaseTotals' from JSON`,
  );
}

/** @internal */
export const Tracker$inboundSchema: z.ZodType<Tracker, z.ZodTypeDef, unknown> =
  z.object({
    client: z.string().optional(),
    entry_mode: z.string().optional(),
    environment: z.string().optional(),
    intent: z.string().optional(),
    metadata: z.lazy(() => MetadataResponse$inboundSchema).optional(),
    mode: z.string().optional(),
    next_actions: z.lazy(() => NextActions$inboundSchema).optional(),
    purchase_totals: z.lazy(() => PurchaseTotals$inboundSchema).optional(),
    state: z.string().optional(),
    token: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "entry_mode": "entryMode",
      "next_actions": "nextActions",
      "purchase_totals": "purchaseTotals",
    });
  });

/** @internal */
export type Tracker$Outbound = {
  client?: string | undefined;
  entry_mode?: string | undefined;
  environment?: string | undefined;
  intent?: string | undefined;
  metadata?: MetadataResponse$Outbound | undefined;
  mode?: string | undefined;
  next_actions?: NextActions$Outbound | undefined;
  purchase_totals?: PurchaseTotals$Outbound | undefined;
  state?: string | undefined;
  token?: string | undefined;
};

/** @internal */
export const Tracker$outboundSchema: z.ZodType<
  Tracker$Outbound,
  z.ZodTypeDef,
  Tracker
> = z.object({
  client: z.string().optional(),
  entryMode: z.string().optional(),
  environment: z.string().optional(),
  intent: z.string().optional(),
  metadata: z.lazy(() => MetadataResponse$outboundSchema).optional(),
  mode: z.string().optional(),
  nextActions: z.lazy(() => NextActions$outboundSchema).optional(),
  purchaseTotals: z.lazy(() => PurchaseTotals$outboundSchema).optional(),
  state: z.string().optional(),
  token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    entryMode: "entry_mode",
    nextActions: "next_actions",
    purchaseTotals: "purchase_totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tracker$ {
  /** @deprecated use `Tracker$inboundSchema` instead. */
  export const inboundSchema = Tracker$inboundSchema;
  /** @deprecated use `Tracker$outboundSchema` instead. */
  export const outboundSchema = Tracker$outboundSchema;
  /** @deprecated use `Tracker$Outbound` instead. */
  export type Outbound = Tracker$Outbound;
}

export function trackerToJSON(tracker: Tracker): string {
  return JSON.stringify(Tracker$outboundSchema.parse(tracker));
}

export function trackerFromJSON(
  jsonString: string,
): SafeParseResult<Tracker, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tracker$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tracker' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Data$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  capabilities: z.lazy(() => Capabilities$inboundSchema).optional(),
  tracker: z.lazy(() => Tracker$inboundSchema).optional(),
});

/** @internal */
export type PostOrderPaymentsV3Data$Outbound = {
  capabilities?: Capabilities$Outbound | undefined;
  tracker?: Tracker$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Data$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Data$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Data
> = z.object({
  capabilities: z.lazy(() => Capabilities$outboundSchema).optional(),
  tracker: z.lazy(() => Tracker$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Data$ {
  /** @deprecated use `PostOrderPaymentsV3Data$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Data$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Data$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Data$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Data$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Data$Outbound;
}

export function postOrderPaymentsV3DataToJSON(
  postOrderPaymentsV3Data: PostOrderPaymentsV3Data,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Data$outboundSchema.parse(postOrderPaymentsV3Data),
  );
}

export function postOrderPaymentsV3DataFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Data' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3ResponseBody$inboundSchema: z.ZodType<
  PostOrderPaymentsV3ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostOrderPaymentsV3Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostOrderPaymentsV3ResponseBody$Outbound = {
  data?: PostOrderPaymentsV3Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3ResponseBody$outboundSchema: z.ZodType<
  PostOrderPaymentsV3ResponseBody$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3ResponseBody
> = z.object({
  data: z.lazy(() => PostOrderPaymentsV3Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3ResponseBody$ {
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3ResponseBody$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3ResponseBody$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3ResponseBody$Outbound;
}

export function postOrderPaymentsV3ResponseBodyToJSON(
  postOrderPaymentsV3ResponseBody: PostOrderPaymentsV3ResponseBody,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3ResponseBody$outboundSchema.parse(
      postOrderPaymentsV3ResponseBody,
    ),
  );
}

export function postOrderPaymentsV3ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Response$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostOrderPaymentsV3ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostOrderPaymentsV3Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostOrderPaymentsV3ResponseBody$Outbound;
};

/** @internal */
export const PostOrderPaymentsV3Response$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Response$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostOrderPaymentsV3ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Response$ {
  /** @deprecated use `PostOrderPaymentsV3Response$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Response$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Response$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Response$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Response$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Response$Outbound;
}

export function postOrderPaymentsV3ResponseToJSON(
  postOrderPaymentsV3Response: PostOrderPaymentsV3Response,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Response$outboundSchema.parse(
      postOrderPaymentsV3Response,
    ),
  );
}

export function postOrderPaymentsV3ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Response' from JSON`,
  );
}
