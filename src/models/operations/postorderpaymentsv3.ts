/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetadataRequest = {
  source?: string | undefined;
  orderId?: string | undefined;
};

export type PostOrderPaymentsV3Request = {
  merchantApiKey?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  currency?: string | undefined;
  amount?: number | undefined;
  entryMode?: string | undefined;
  metadata?: MetadataRequest | undefined;
};

export type PostOrderPaymentsV3InternalServerErrorStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type PostOrderPaymentsV3NotFoundStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type PostOrderPaymentsV3BadRequestStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type PostOrderPaymentsV3CYBERSOURCE = {
  kind?: string | undefined;
};

export type PostOrderPaymentsV3MPGS = {
  kind?: string | undefined;
};

export type PostOrderPaymentsV3NextActions = {
  cybersource?: PostOrderPaymentsV3CYBERSOURCE | undefined;
  mpgs?: PostOrderPaymentsV3MPGS | undefined;
};

export type PostOrderPaymentsV3QuoteAmount = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type PostOrderPaymentsV3BaseAmount = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type PostOrderPaymentsV3ConversionRate = {
  baseCurrency?: string | undefined;
  quoteCurrency?: string | undefined;
  rate?: number | undefined;
};

export type PostOrderPaymentsV3PurchaseTotals = {
  quoteAmount?: PostOrderPaymentsV3QuoteAmount | undefined;
  baseAmount?: PostOrderPaymentsV3BaseAmount | undefined;
  conversionRate?: PostOrderPaymentsV3ConversionRate | undefined;
};

export type PostOrderPaymentsV3TrackerMetadata = {};

export type PostOrderPaymentsV3Tracker = {
  token?: string | undefined;
  client?: string | undefined;
  environment?: string | undefined;
  state?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  entryMode?: string | undefined;
  nextActions?: PostOrderPaymentsV3NextActions | undefined;
  purchaseTotals?: PostOrderPaymentsV3PurchaseTotals | undefined;
  metadata?: PostOrderPaymentsV3TrackerMetadata | undefined;
};

export type PostOrderPaymentsV3Capabilities = {
  cybersource?: boolean | undefined;
  mpgs?: boolean | undefined;
};

export type PostOrderPaymentsV3Data = {
  tracker?: PostOrderPaymentsV3Tracker | undefined;
  capabilities?: PostOrderPaymentsV3Capabilities | undefined;
};

export type PostOrderPaymentsV3Status = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/**
 * 201 - flex
 */
export type PostOrderPaymentsV3ResponseBody = {
  data?: PostOrderPaymentsV3Data | undefined;
  status?: PostOrderPaymentsV3Status | undefined;
};

export type PostOrderPaymentsV3Response = {
  headers: { [k: string]: Array<string> };
  result: PostOrderPaymentsV3ResponseBody;
};

/** @internal */
export const MetadataRequest$inboundSchema: z.ZodType<
  MetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  order_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
  });
});

/** @internal */
export type MetadataRequest$Outbound = {
  source?: string | undefined;
  order_id?: string | undefined;
};

/** @internal */
export const MetadataRequest$outboundSchema: z.ZodType<
  MetadataRequest$Outbound,
  z.ZodTypeDef,
  MetadataRequest
> = z.object({
  source: z.string().optional(),
  orderId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRequest$ {
  /** @deprecated use `MetadataRequest$inboundSchema` instead. */
  export const inboundSchema = MetadataRequest$inboundSchema;
  /** @deprecated use `MetadataRequest$outboundSchema` instead. */
  export const outboundSchema = MetadataRequest$outboundSchema;
  /** @deprecated use `MetadataRequest$Outbound` instead. */
  export type Outbound = MetadataRequest$Outbound;
}

export function metadataRequestToJSON(
  metadataRequest: MetadataRequest,
): string {
  return JSON.stringify(MetadataRequest$outboundSchema.parse(metadataRequest));
}

export function metadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRequest' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Request$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  merchant_api_key: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  currency: z.string().optional(),
  amount: z.number().int().optional(),
  entry_mode: z.string().optional(),
  metadata: z.lazy(() => MetadataRequest$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_api_key": "merchantApiKey",
    "entry_mode": "entryMode",
  });
});

/** @internal */
export type PostOrderPaymentsV3Request$Outbound = {
  merchant_api_key?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  currency?: string | undefined;
  amount?: number | undefined;
  entry_mode?: string | undefined;
  metadata?: MetadataRequest$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Request$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Request$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Request
> = z.object({
  merchantApiKey: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  currency: z.string().optional(),
  amount: z.number().int().optional(),
  entryMode: z.string().optional(),
  metadata: z.lazy(() => MetadataRequest$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    merchantApiKey: "merchant_api_key",
    entryMode: "entry_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Request$ {
  /** @deprecated use `PostOrderPaymentsV3Request$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Request$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Request$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Request$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Request$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Request$Outbound;
}

export function postOrderPaymentsV3RequestToJSON(
  postOrderPaymentsV3Request: PostOrderPaymentsV3Request,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Request$outboundSchema.parse(postOrderPaymentsV3Request),
  );
}

export function postOrderPaymentsV3RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Request' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3InternalServerErrorStatus$inboundSchema:
  z.ZodType<
    PostOrderPaymentsV3InternalServerErrorStatus,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/** @internal */
export type PostOrderPaymentsV3InternalServerErrorStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3InternalServerErrorStatus$outboundSchema:
  z.ZodType<
    PostOrderPaymentsV3InternalServerErrorStatus$Outbound,
    z.ZodTypeDef,
    PostOrderPaymentsV3InternalServerErrorStatus
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3InternalServerErrorStatus$ {
  /** @deprecated use `PostOrderPaymentsV3InternalServerErrorStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostOrderPaymentsV3InternalServerErrorStatus$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3InternalServerErrorStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3InternalServerErrorStatus$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3InternalServerErrorStatus$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3InternalServerErrorStatus$Outbound;
}

export function postOrderPaymentsV3InternalServerErrorStatusToJSON(
  postOrderPaymentsV3InternalServerErrorStatus:
    PostOrderPaymentsV3InternalServerErrorStatus,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3InternalServerErrorStatus$outboundSchema.parse(
      postOrderPaymentsV3InternalServerErrorStatus,
    ),
  );
}

export function postOrderPaymentsV3InternalServerErrorStatusFromJSON(
  jsonString: string,
): SafeParseResult<
  PostOrderPaymentsV3InternalServerErrorStatus,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostOrderPaymentsV3InternalServerErrorStatus$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostOrderPaymentsV3InternalServerErrorStatus' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3NotFoundStatus$inboundSchema: z.ZodType<
  PostOrderPaymentsV3NotFoundStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3NotFoundStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3NotFoundStatus$outboundSchema: z.ZodType<
  PostOrderPaymentsV3NotFoundStatus$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3NotFoundStatus
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3NotFoundStatus$ {
  /** @deprecated use `PostOrderPaymentsV3NotFoundStatus$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3NotFoundStatus$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NotFoundStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3NotFoundStatus$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NotFoundStatus$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3NotFoundStatus$Outbound;
}

export function postOrderPaymentsV3NotFoundStatusToJSON(
  postOrderPaymentsV3NotFoundStatus: PostOrderPaymentsV3NotFoundStatus,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3NotFoundStatus$outboundSchema.parse(
      postOrderPaymentsV3NotFoundStatus,
    ),
  );
}

export function postOrderPaymentsV3NotFoundStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3NotFoundStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3NotFoundStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3NotFoundStatus' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3BadRequestStatus$inboundSchema: z.ZodType<
  PostOrderPaymentsV3BadRequestStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3BadRequestStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3BadRequestStatus$outboundSchema: z.ZodType<
  PostOrderPaymentsV3BadRequestStatus$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3BadRequestStatus
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3BadRequestStatus$ {
  /** @deprecated use `PostOrderPaymentsV3BadRequestStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostOrderPaymentsV3BadRequestStatus$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BadRequestStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3BadRequestStatus$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BadRequestStatus$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3BadRequestStatus$Outbound;
}

export function postOrderPaymentsV3BadRequestStatusToJSON(
  postOrderPaymentsV3BadRequestStatus: PostOrderPaymentsV3BadRequestStatus,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3BadRequestStatus$outboundSchema.parse(
      postOrderPaymentsV3BadRequestStatus,
    ),
  );
}

export function postOrderPaymentsV3BadRequestStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3BadRequestStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostOrderPaymentsV3BadRequestStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3BadRequestStatus' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3CYBERSOURCE$inboundSchema: z.ZodType<
  PostOrderPaymentsV3CYBERSOURCE,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3CYBERSOURCE$Outbound = {
  kind?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3CYBERSOURCE$outboundSchema: z.ZodType<
  PostOrderPaymentsV3CYBERSOURCE$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3CYBERSOURCE
> = z.object({
  kind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3CYBERSOURCE$ {
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3CYBERSOURCE$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3CYBERSOURCE$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3CYBERSOURCE$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3CYBERSOURCE$Outbound;
}

export function postOrderPaymentsV3CYBERSOURCEToJSON(
  postOrderPaymentsV3CYBERSOURCE: PostOrderPaymentsV3CYBERSOURCE,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3CYBERSOURCE$outboundSchema.parse(
      postOrderPaymentsV3CYBERSOURCE,
    ),
  );
}

export function postOrderPaymentsV3CYBERSOURCEFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3CYBERSOURCE, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3CYBERSOURCE$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3CYBERSOURCE' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3MPGS$inboundSchema: z.ZodType<
  PostOrderPaymentsV3MPGS,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3MPGS$Outbound = {
  kind?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3MPGS$outboundSchema: z.ZodType<
  PostOrderPaymentsV3MPGS$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3MPGS
> = z.object({
  kind: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3MPGS$ {
  /** @deprecated use `PostOrderPaymentsV3MPGS$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3MPGS$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3MPGS$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3MPGS$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3MPGS$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3MPGS$Outbound;
}

export function postOrderPaymentsV3MPGSToJSON(
  postOrderPaymentsV3MPGS: PostOrderPaymentsV3MPGS,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3MPGS$outboundSchema.parse(postOrderPaymentsV3MPGS),
  );
}

export function postOrderPaymentsV3MPGSFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3MPGS, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3MPGS$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3MPGS' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3NextActions$inboundSchema: z.ZodType<
  PostOrderPaymentsV3NextActions,
  z.ZodTypeDef,
  unknown
> = z.object({
  CYBERSOURCE: z.lazy(() => PostOrderPaymentsV3CYBERSOURCE$inboundSchema)
    .optional(),
  MPGS: z.lazy(() => PostOrderPaymentsV3MPGS$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "CYBERSOURCE": "cybersource",
    "MPGS": "mpgs",
  });
});

/** @internal */
export type PostOrderPaymentsV3NextActions$Outbound = {
  CYBERSOURCE?: PostOrderPaymentsV3CYBERSOURCE$Outbound | undefined;
  MPGS?: PostOrderPaymentsV3MPGS$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3NextActions$outboundSchema: z.ZodType<
  PostOrderPaymentsV3NextActions$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3NextActions
> = z.object({
  cybersource: z.lazy(() => PostOrderPaymentsV3CYBERSOURCE$outboundSchema)
    .optional(),
  mpgs: z.lazy(() => PostOrderPaymentsV3MPGS$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cybersource: "CYBERSOURCE",
    mpgs: "MPGS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3NextActions$ {
  /** @deprecated use `PostOrderPaymentsV3NextActions$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3NextActions$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NextActions$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3NextActions$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3NextActions$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3NextActions$Outbound;
}

export function postOrderPaymentsV3NextActionsToJSON(
  postOrderPaymentsV3NextActions: PostOrderPaymentsV3NextActions,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3NextActions$outboundSchema.parse(
      postOrderPaymentsV3NextActions,
    ),
  );
}

export function postOrderPaymentsV3NextActionsFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3NextActions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3NextActions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3NextActions' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3QuoteAmount$inboundSchema: z.ZodType<
  PostOrderPaymentsV3QuoteAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/** @internal */
export type PostOrderPaymentsV3QuoteAmount$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const PostOrderPaymentsV3QuoteAmount$outboundSchema: z.ZodType<
  PostOrderPaymentsV3QuoteAmount$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3QuoteAmount
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3QuoteAmount$ {
  /** @deprecated use `PostOrderPaymentsV3QuoteAmount$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3QuoteAmount$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3QuoteAmount$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3QuoteAmount$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3QuoteAmount$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3QuoteAmount$Outbound;
}

export function postOrderPaymentsV3QuoteAmountToJSON(
  postOrderPaymentsV3QuoteAmount: PostOrderPaymentsV3QuoteAmount,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3QuoteAmount$outboundSchema.parse(
      postOrderPaymentsV3QuoteAmount,
    ),
  );
}

export function postOrderPaymentsV3QuoteAmountFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3QuoteAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3QuoteAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3QuoteAmount' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3BaseAmount$inboundSchema: z.ZodType<
  PostOrderPaymentsV3BaseAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/** @internal */
export type PostOrderPaymentsV3BaseAmount$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const PostOrderPaymentsV3BaseAmount$outboundSchema: z.ZodType<
  PostOrderPaymentsV3BaseAmount$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3BaseAmount
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3BaseAmount$ {
  /** @deprecated use `PostOrderPaymentsV3BaseAmount$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3BaseAmount$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BaseAmount$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3BaseAmount$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3BaseAmount$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3BaseAmount$Outbound;
}

export function postOrderPaymentsV3BaseAmountToJSON(
  postOrderPaymentsV3BaseAmount: PostOrderPaymentsV3BaseAmount,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3BaseAmount$outboundSchema.parse(
      postOrderPaymentsV3BaseAmount,
    ),
  );
}

export function postOrderPaymentsV3BaseAmountFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3BaseAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3BaseAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3BaseAmount' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3ConversionRate$inboundSchema: z.ZodType<
  PostOrderPaymentsV3ConversionRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_currency: z.string().optional(),
  quote_currency: z.string().optional(),
  rate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "base_currency": "baseCurrency",
    "quote_currency": "quoteCurrency",
  });
});

/** @internal */
export type PostOrderPaymentsV3ConversionRate$Outbound = {
  base_currency?: string | undefined;
  quote_currency?: string | undefined;
  rate?: number | undefined;
};

/** @internal */
export const PostOrderPaymentsV3ConversionRate$outboundSchema: z.ZodType<
  PostOrderPaymentsV3ConversionRate$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3ConversionRate
> = z.object({
  baseCurrency: z.string().optional(),
  quoteCurrency: z.string().optional(),
  rate: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    baseCurrency: "base_currency",
    quoteCurrency: "quote_currency",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3ConversionRate$ {
  /** @deprecated use `PostOrderPaymentsV3ConversionRate$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3ConversionRate$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ConversionRate$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3ConversionRate$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ConversionRate$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3ConversionRate$Outbound;
}

export function postOrderPaymentsV3ConversionRateToJSON(
  postOrderPaymentsV3ConversionRate: PostOrderPaymentsV3ConversionRate,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3ConversionRate$outboundSchema.parse(
      postOrderPaymentsV3ConversionRate,
    ),
  );
}

export function postOrderPaymentsV3ConversionRateFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3ConversionRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3ConversionRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3ConversionRate' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3PurchaseTotals$inboundSchema: z.ZodType<
  PostOrderPaymentsV3PurchaseTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  quote_amount: z.lazy(() => PostOrderPaymentsV3QuoteAmount$inboundSchema)
    .optional(),
  base_amount: z.lazy(() => PostOrderPaymentsV3BaseAmount$inboundSchema)
    .optional(),
  conversion_rate: z.lazy(() => PostOrderPaymentsV3ConversionRate$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "quote_amount": "quoteAmount",
    "base_amount": "baseAmount",
    "conversion_rate": "conversionRate",
  });
});

/** @internal */
export type PostOrderPaymentsV3PurchaseTotals$Outbound = {
  quote_amount?: PostOrderPaymentsV3QuoteAmount$Outbound | undefined;
  base_amount?: PostOrderPaymentsV3BaseAmount$Outbound | undefined;
  conversion_rate?: PostOrderPaymentsV3ConversionRate$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3PurchaseTotals$outboundSchema: z.ZodType<
  PostOrderPaymentsV3PurchaseTotals$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3PurchaseTotals
> = z.object({
  quoteAmount: z.lazy(() => PostOrderPaymentsV3QuoteAmount$outboundSchema)
    .optional(),
  baseAmount: z.lazy(() => PostOrderPaymentsV3BaseAmount$outboundSchema)
    .optional(),
  conversionRate: z.lazy(() => PostOrderPaymentsV3ConversionRate$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    quoteAmount: "quote_amount",
    baseAmount: "base_amount",
    conversionRate: "conversion_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3PurchaseTotals$ {
  /** @deprecated use `PostOrderPaymentsV3PurchaseTotals$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3PurchaseTotals$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3PurchaseTotals$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3PurchaseTotals$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3PurchaseTotals$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3PurchaseTotals$Outbound;
}

export function postOrderPaymentsV3PurchaseTotalsToJSON(
  postOrderPaymentsV3PurchaseTotals: PostOrderPaymentsV3PurchaseTotals,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3PurchaseTotals$outboundSchema.parse(
      postOrderPaymentsV3PurchaseTotals,
    ),
  );
}

export function postOrderPaymentsV3PurchaseTotalsFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3PurchaseTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3PurchaseTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3PurchaseTotals' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3TrackerMetadata$inboundSchema: z.ZodType<
  PostOrderPaymentsV3TrackerMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PostOrderPaymentsV3TrackerMetadata$Outbound = {};

/** @internal */
export const PostOrderPaymentsV3TrackerMetadata$outboundSchema: z.ZodType<
  PostOrderPaymentsV3TrackerMetadata$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3TrackerMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3TrackerMetadata$ {
  /** @deprecated use `PostOrderPaymentsV3TrackerMetadata$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3TrackerMetadata$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3TrackerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PostOrderPaymentsV3TrackerMetadata$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3TrackerMetadata$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3TrackerMetadata$Outbound;
}

export function postOrderPaymentsV3TrackerMetadataToJSON(
  postOrderPaymentsV3TrackerMetadata: PostOrderPaymentsV3TrackerMetadata,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3TrackerMetadata$outboundSchema.parse(
      postOrderPaymentsV3TrackerMetadata,
    ),
  );
}

export function postOrderPaymentsV3TrackerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3TrackerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostOrderPaymentsV3TrackerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3TrackerMetadata' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Tracker$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Tracker,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  client: z.string().optional(),
  environment: z.string().optional(),
  state: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  entry_mode: z.string().optional(),
  next_actions: z.lazy(() => PostOrderPaymentsV3NextActions$inboundSchema)
    .optional(),
  purchase_totals: z.lazy(() => PostOrderPaymentsV3PurchaseTotals$inboundSchema)
    .optional(),
  metadata: z.lazy(() => PostOrderPaymentsV3TrackerMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "entry_mode": "entryMode",
    "next_actions": "nextActions",
    "purchase_totals": "purchaseTotals",
  });
});

/** @internal */
export type PostOrderPaymentsV3Tracker$Outbound = {
  token?: string | undefined;
  client?: string | undefined;
  environment?: string | undefined;
  state?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  entry_mode?: string | undefined;
  next_actions?: PostOrderPaymentsV3NextActions$Outbound | undefined;
  purchase_totals?: PostOrderPaymentsV3PurchaseTotals$Outbound | undefined;
  metadata?: PostOrderPaymentsV3TrackerMetadata$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Tracker$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Tracker$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Tracker
> = z.object({
  token: z.string().optional(),
  client: z.string().optional(),
  environment: z.string().optional(),
  state: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  entryMode: z.string().optional(),
  nextActions: z.lazy(() => PostOrderPaymentsV3NextActions$outboundSchema)
    .optional(),
  purchaseTotals: z.lazy(() => PostOrderPaymentsV3PurchaseTotals$outboundSchema)
    .optional(),
  metadata: z.lazy(() => PostOrderPaymentsV3TrackerMetadata$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    entryMode: "entry_mode",
    nextActions: "next_actions",
    purchaseTotals: "purchase_totals",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Tracker$ {
  /** @deprecated use `PostOrderPaymentsV3Tracker$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Tracker$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Tracker$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Tracker$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Tracker$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Tracker$Outbound;
}

export function postOrderPaymentsV3TrackerToJSON(
  postOrderPaymentsV3Tracker: PostOrderPaymentsV3Tracker,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Tracker$outboundSchema.parse(postOrderPaymentsV3Tracker),
  );
}

export function postOrderPaymentsV3TrackerFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Tracker, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Tracker$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Tracker' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Capabilities$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Capabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  CYBERSOURCE: z.boolean().optional(),
  MPGS: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "CYBERSOURCE": "cybersource",
    "MPGS": "mpgs",
  });
});

/** @internal */
export type PostOrderPaymentsV3Capabilities$Outbound = {
  CYBERSOURCE?: boolean | undefined;
  MPGS?: boolean | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Capabilities$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Capabilities$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Capabilities
> = z.object({
  cybersource: z.boolean().optional(),
  mpgs: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    cybersource: "CYBERSOURCE",
    mpgs: "MPGS",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Capabilities$ {
  /** @deprecated use `PostOrderPaymentsV3Capabilities$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Capabilities$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Capabilities$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Capabilities$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Capabilities$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Capabilities$Outbound;
}

export function postOrderPaymentsV3CapabilitiesToJSON(
  postOrderPaymentsV3Capabilities: PostOrderPaymentsV3Capabilities,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Capabilities$outboundSchema.parse(
      postOrderPaymentsV3Capabilities,
    ),
  );
}

export function postOrderPaymentsV3CapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Capabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Capabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Capabilities' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Data$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  tracker: z.lazy(() => PostOrderPaymentsV3Tracker$inboundSchema).optional(),
  capabilities: z.lazy(() => PostOrderPaymentsV3Capabilities$inboundSchema)
    .optional(),
});

/** @internal */
export type PostOrderPaymentsV3Data$Outbound = {
  tracker?: PostOrderPaymentsV3Tracker$Outbound | undefined;
  capabilities?: PostOrderPaymentsV3Capabilities$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Data$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Data$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Data
> = z.object({
  tracker: z.lazy(() => PostOrderPaymentsV3Tracker$outboundSchema).optional(),
  capabilities: z.lazy(() => PostOrderPaymentsV3Capabilities$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Data$ {
  /** @deprecated use `PostOrderPaymentsV3Data$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Data$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Data$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Data$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Data$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Data$Outbound;
}

export function postOrderPaymentsV3DataToJSON(
  postOrderPaymentsV3Data: PostOrderPaymentsV3Data,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Data$outboundSchema.parse(postOrderPaymentsV3Data),
  );
}

export function postOrderPaymentsV3DataFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Data' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Status$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Status,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostOrderPaymentsV3Status$Outbound = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostOrderPaymentsV3Status$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Status$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Status
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Status$ {
  /** @deprecated use `PostOrderPaymentsV3Status$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Status$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Status$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Status$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Status$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Status$Outbound;
}

export function postOrderPaymentsV3StatusToJSON(
  postOrderPaymentsV3Status: PostOrderPaymentsV3Status,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Status$outboundSchema.parse(postOrderPaymentsV3Status),
  );
}

export function postOrderPaymentsV3StatusFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Status' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3ResponseBody$inboundSchema: z.ZodType<
  PostOrderPaymentsV3ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostOrderPaymentsV3Data$inboundSchema).optional(),
  status: z.lazy(() => PostOrderPaymentsV3Status$inboundSchema).optional(),
});

/** @internal */
export type PostOrderPaymentsV3ResponseBody$Outbound = {
  data?: PostOrderPaymentsV3Data$Outbound | undefined;
  status?: PostOrderPaymentsV3Status$Outbound | undefined;
};

/** @internal */
export const PostOrderPaymentsV3ResponseBody$outboundSchema: z.ZodType<
  PostOrderPaymentsV3ResponseBody$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3ResponseBody
> = z.object({
  data: z.lazy(() => PostOrderPaymentsV3Data$outboundSchema).optional(),
  status: z.lazy(() => PostOrderPaymentsV3Status$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3ResponseBody$ {
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3ResponseBody$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3ResponseBody$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3ResponseBody$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3ResponseBody$Outbound;
}

export function postOrderPaymentsV3ResponseBodyToJSON(
  postOrderPaymentsV3ResponseBody: PostOrderPaymentsV3ResponseBody,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3ResponseBody$outboundSchema.parse(
      postOrderPaymentsV3ResponseBody,
    ),
  );
}

export function postOrderPaymentsV3ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostOrderPaymentsV3Response$inboundSchema: z.ZodType<
  PostOrderPaymentsV3Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostOrderPaymentsV3ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostOrderPaymentsV3Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostOrderPaymentsV3ResponseBody$Outbound;
};

/** @internal */
export const PostOrderPaymentsV3Response$outboundSchema: z.ZodType<
  PostOrderPaymentsV3Response$Outbound,
  z.ZodTypeDef,
  PostOrderPaymentsV3Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostOrderPaymentsV3ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOrderPaymentsV3Response$ {
  /** @deprecated use `PostOrderPaymentsV3Response$inboundSchema` instead. */
  export const inboundSchema = PostOrderPaymentsV3Response$inboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Response$outboundSchema` instead. */
  export const outboundSchema = PostOrderPaymentsV3Response$outboundSchema;
  /** @deprecated use `PostOrderPaymentsV3Response$Outbound` instead. */
  export type Outbound = PostOrderPaymentsV3Response$Outbound;
}

export function postOrderPaymentsV3ResponseToJSON(
  postOrderPaymentsV3Response: PostOrderPaymentsV3Response,
): string {
  return JSON.stringify(
    PostOrderPaymentsV3Response$outboundSchema.parse(
      postOrderPaymentsV3Response,
    ),
  );
}

export function postOrderPaymentsV3ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostOrderPaymentsV3Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOrderPaymentsV3Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOrderPaymentsV3Response' from JSON`,
  );
}
