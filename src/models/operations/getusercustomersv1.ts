/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetUserCustomersV1Request = {
  limit?: number | undefined;
  page?: number | undefined;
};

export type GetUserCustomersV1CreatedAt = {
  seconds?: number | undefined;
};

export type GetUserCustomersV1UpdatedAt = {
  seconds?: number | undefined;
};

export type GetUserCustomersV1Customer = {
  country?: string | undefined;
  createdAt?: GetUserCustomersV1CreatedAt | undefined;
  email?: string | undefined;
  firstName?: string | undefined;
  isDeleted?: boolean | undefined;
  isGuest?: boolean | undefined;
  lastName?: string | undefined;
  merchantApiKey?: string | undefined;
  phoneNumber?: string | undefined;
  token?: string | undefined;
  updatedAt?: GetUserCustomersV1UpdatedAt | undefined;
};

export type GetUserCustomersV1Data = {
  count?: number | undefined;
  customers?: Array<GetUserCustomersV1Customer> | undefined;
};

/**
 * 200
 */
export type GetUserCustomersV1ResponseBody = {
  data?: GetUserCustomersV1Data | undefined;
  status?: models.Status | undefined;
};

export type GetUserCustomersV1Response = {
  headers: { [k: string]: Array<string> };
  result: GetUserCustomersV1ResponseBody;
};

/** @internal */
export const GetUserCustomersV1Request$inboundSchema: z.ZodType<
  GetUserCustomersV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  page: z.number().int().optional(),
});

/** @internal */
export type GetUserCustomersV1Request$Outbound = {
  limit?: number | undefined;
  page?: number | undefined;
};

/** @internal */
export const GetUserCustomersV1Request$outboundSchema: z.ZodType<
  GetUserCustomersV1Request$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1Request
> = z.object({
  limit: z.number().int().optional(),
  page: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1Request$ {
  /** @deprecated use `GetUserCustomersV1Request$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1Request$inboundSchema;
  /** @deprecated use `GetUserCustomersV1Request$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1Request$outboundSchema;
  /** @deprecated use `GetUserCustomersV1Request$Outbound` instead. */
  export type Outbound = GetUserCustomersV1Request$Outbound;
}

export function getUserCustomersV1RequestToJSON(
  getUserCustomersV1Request: GetUserCustomersV1Request,
): string {
  return JSON.stringify(
    GetUserCustomersV1Request$outboundSchema.parse(getUserCustomersV1Request),
  );
}

export function getUserCustomersV1RequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1Request' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1CreatedAt$inboundSchema: z.ZodType<
  GetUserCustomersV1CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserCustomersV1CreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserCustomersV1CreatedAt$outboundSchema: z.ZodType<
  GetUserCustomersV1CreatedAt$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1CreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1CreatedAt$ {
  /** @deprecated use `GetUserCustomersV1CreatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1CreatedAt$inboundSchema;
  /** @deprecated use `GetUserCustomersV1CreatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1CreatedAt$outboundSchema;
  /** @deprecated use `GetUserCustomersV1CreatedAt$Outbound` instead. */
  export type Outbound = GetUserCustomersV1CreatedAt$Outbound;
}

export function getUserCustomersV1CreatedAtToJSON(
  getUserCustomersV1CreatedAt: GetUserCustomersV1CreatedAt,
): string {
  return JSON.stringify(
    GetUserCustomersV1CreatedAt$outboundSchema.parse(
      getUserCustomersV1CreatedAt,
    ),
  );
}

export function getUserCustomersV1CreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1CreatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1UpdatedAt$inboundSchema: z.ZodType<
  GetUserCustomersV1UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserCustomersV1UpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserCustomersV1UpdatedAt$outboundSchema: z.ZodType<
  GetUserCustomersV1UpdatedAt$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1UpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1UpdatedAt$ {
  /** @deprecated use `GetUserCustomersV1UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1UpdatedAt$inboundSchema;
  /** @deprecated use `GetUserCustomersV1UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1UpdatedAt$outboundSchema;
  /** @deprecated use `GetUserCustomersV1UpdatedAt$Outbound` instead. */
  export type Outbound = GetUserCustomersV1UpdatedAt$Outbound;
}

export function getUserCustomersV1UpdatedAtToJSON(
  getUserCustomersV1UpdatedAt: GetUserCustomersV1UpdatedAt,
): string {
  return JSON.stringify(
    GetUserCustomersV1UpdatedAt$outboundSchema.parse(
      getUserCustomersV1UpdatedAt,
    ),
  );
}

export function getUserCustomersV1UpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1UpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1Customer$inboundSchema: z.ZodType<
  GetUserCustomersV1Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string().optional(),
  created_at: z.lazy(() => GetUserCustomersV1CreatedAt$inboundSchema)
    .optional(),
  email: z.string().optional(),
  first_name: z.string().optional(),
  is_deleted: z.boolean().optional(),
  is_guest: z.boolean().optional(),
  last_name: z.string().optional(),
  merchant_api_key: z.string().optional(),
  phone_number: z.string().optional(),
  token: z.string().optional(),
  updated_at: z.lazy(() => GetUserCustomersV1UpdatedAt$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "first_name": "firstName",
    "is_deleted": "isDeleted",
    "is_guest": "isGuest",
    "last_name": "lastName",
    "merchant_api_key": "merchantApiKey",
    "phone_number": "phoneNumber",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserCustomersV1Customer$Outbound = {
  country?: string | undefined;
  created_at?: GetUserCustomersV1CreatedAt$Outbound | undefined;
  email?: string | undefined;
  first_name?: string | undefined;
  is_deleted?: boolean | undefined;
  is_guest?: boolean | undefined;
  last_name?: string | undefined;
  merchant_api_key?: string | undefined;
  phone_number?: string | undefined;
  token?: string | undefined;
  updated_at?: GetUserCustomersV1UpdatedAt$Outbound | undefined;
};

/** @internal */
export const GetUserCustomersV1Customer$outboundSchema: z.ZodType<
  GetUserCustomersV1Customer$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1Customer
> = z.object({
  country: z.string().optional(),
  createdAt: z.lazy(() => GetUserCustomersV1CreatedAt$outboundSchema)
    .optional(),
  email: z.string().optional(),
  firstName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  isGuest: z.boolean().optional(),
  lastName: z.string().optional(),
  merchantApiKey: z.string().optional(),
  phoneNumber: z.string().optional(),
  token: z.string().optional(),
  updatedAt: z.lazy(() => GetUserCustomersV1UpdatedAt$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    firstName: "first_name",
    isDeleted: "is_deleted",
    isGuest: "is_guest",
    lastName: "last_name",
    merchantApiKey: "merchant_api_key",
    phoneNumber: "phone_number",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1Customer$ {
  /** @deprecated use `GetUserCustomersV1Customer$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1Customer$inboundSchema;
  /** @deprecated use `GetUserCustomersV1Customer$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1Customer$outboundSchema;
  /** @deprecated use `GetUserCustomersV1Customer$Outbound` instead. */
  export type Outbound = GetUserCustomersV1Customer$Outbound;
}

export function getUserCustomersV1CustomerToJSON(
  getUserCustomersV1Customer: GetUserCustomersV1Customer,
): string {
  return JSON.stringify(
    GetUserCustomersV1Customer$outboundSchema.parse(getUserCustomersV1Customer),
  );
}

export function getUserCustomersV1CustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1Customer' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1Data$inboundSchema: z.ZodType<
  GetUserCustomersV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  customers: z.array(z.lazy(() => GetUserCustomersV1Customer$inboundSchema))
    .optional(),
});

/** @internal */
export type GetUserCustomersV1Data$Outbound = {
  count?: number | undefined;
  customers?: Array<GetUserCustomersV1Customer$Outbound> | undefined;
};

/** @internal */
export const GetUserCustomersV1Data$outboundSchema: z.ZodType<
  GetUserCustomersV1Data$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1Data
> = z.object({
  count: z.number().int().optional(),
  customers: z.array(z.lazy(() => GetUserCustomersV1Customer$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1Data$ {
  /** @deprecated use `GetUserCustomersV1Data$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1Data$inboundSchema;
  /** @deprecated use `GetUserCustomersV1Data$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1Data$outboundSchema;
  /** @deprecated use `GetUserCustomersV1Data$Outbound` instead. */
  export type Outbound = GetUserCustomersV1Data$Outbound;
}

export function getUserCustomersV1DataToJSON(
  getUserCustomersV1Data: GetUserCustomersV1Data,
): string {
  return JSON.stringify(
    GetUserCustomersV1Data$outboundSchema.parse(getUserCustomersV1Data),
  );
}

export function getUserCustomersV1DataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1Data' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1ResponseBody$inboundSchema: z.ZodType<
  GetUserCustomersV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetUserCustomersV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetUserCustomersV1ResponseBody$Outbound = {
  data?: GetUserCustomersV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetUserCustomersV1ResponseBody$outboundSchema: z.ZodType<
  GetUserCustomersV1ResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1ResponseBody
> = z.object({
  data: z.lazy(() => GetUserCustomersV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1ResponseBody$ {
  /** @deprecated use `GetUserCustomersV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1ResponseBody$inboundSchema;
  /** @deprecated use `GetUserCustomersV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1ResponseBody$outboundSchema;
  /** @deprecated use `GetUserCustomersV1ResponseBody$Outbound` instead. */
  export type Outbound = GetUserCustomersV1ResponseBody$Outbound;
}

export function getUserCustomersV1ResponseBodyToJSON(
  getUserCustomersV1ResponseBody: GetUserCustomersV1ResponseBody,
): string {
  return JSON.stringify(
    GetUserCustomersV1ResponseBody$outboundSchema.parse(
      getUserCustomersV1ResponseBody,
    ),
  );
}

export function getUserCustomersV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserCustomersV1Response$inboundSchema: z.ZodType<
  GetUserCustomersV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserCustomersV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserCustomersV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserCustomersV1ResponseBody$Outbound;
};

/** @internal */
export const GetUserCustomersV1Response$outboundSchema: z.ZodType<
  GetUserCustomersV1Response$Outbound,
  z.ZodTypeDef,
  GetUserCustomersV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserCustomersV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserCustomersV1Response$ {
  /** @deprecated use `GetUserCustomersV1Response$inboundSchema` instead. */
  export const inboundSchema = GetUserCustomersV1Response$inboundSchema;
  /** @deprecated use `GetUserCustomersV1Response$outboundSchema` instead. */
  export const outboundSchema = GetUserCustomersV1Response$outboundSchema;
  /** @deprecated use `GetUserCustomersV1Response$Outbound` instead. */
  export type Outbound = GetUserCustomersV1Response$Outbound;
}

export function getUserCustomersV1ResponseToJSON(
  getUserCustomersV1Response: GetUserCustomersV1Response,
): string {
  return JSON.stringify(
    GetUserCustomersV1Response$outboundSchema.parse(getUserCustomersV1Response),
  );
}

export function getUserCustomersV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserCustomersV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserCustomersV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserCustomersV1Response' from JSON`,
  );
}
