/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostUserV1GuestRequest = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  country?: string | undefined;
  phone?: string | undefined;
};

export type PostUserV1GuestData = {
  session?: string | undefined;
  token?: string | undefined;
};

/**
 * 200
 */
export type PostUserV1GuestResponseBody = {
  data?: PostUserV1GuestData | undefined;
  status?: models.Status | undefined;
};

export type PostUserV1GuestResponse = {
  headers: { [k: string]: Array<string> };
  result: PostUserV1GuestResponseBody;
};

/** @internal */
export const PostUserV1GuestRequest$inboundSchema: z.ZodType<
  PostUserV1GuestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  country: z.string().optional(),
  phone: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type PostUserV1GuestRequest$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  country?: string | undefined;
  phone?: string | undefined;
};

/** @internal */
export const PostUserV1GuestRequest$outboundSchema: z.ZodType<
  PostUserV1GuestRequest$Outbound,
  z.ZodTypeDef,
  PostUserV1GuestRequest
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  country: z.string().optional(),
  phone: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV1GuestRequest$ {
  /** @deprecated use `PostUserV1GuestRequest$inboundSchema` instead. */
  export const inboundSchema = PostUserV1GuestRequest$inboundSchema;
  /** @deprecated use `PostUserV1GuestRequest$outboundSchema` instead. */
  export const outboundSchema = PostUserV1GuestRequest$outboundSchema;
  /** @deprecated use `PostUserV1GuestRequest$Outbound` instead. */
  export type Outbound = PostUserV1GuestRequest$Outbound;
}

export function postUserV1GuestRequestToJSON(
  postUserV1GuestRequest: PostUserV1GuestRequest,
): string {
  return JSON.stringify(
    PostUserV1GuestRequest$outboundSchema.parse(postUserV1GuestRequest),
  );
}

export function postUserV1GuestRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV1GuestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV1GuestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV1GuestRequest' from JSON`,
  );
}

/** @internal */
export const PostUserV1GuestData$inboundSchema: z.ZodType<
  PostUserV1GuestData,
  z.ZodTypeDef,
  unknown
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
});

/** @internal */
export type PostUserV1GuestData$Outbound = {
  session?: string | undefined;
  token?: string | undefined;
};

/** @internal */
export const PostUserV1GuestData$outboundSchema: z.ZodType<
  PostUserV1GuestData$Outbound,
  z.ZodTypeDef,
  PostUserV1GuestData
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV1GuestData$ {
  /** @deprecated use `PostUserV1GuestData$inboundSchema` instead. */
  export const inboundSchema = PostUserV1GuestData$inboundSchema;
  /** @deprecated use `PostUserV1GuestData$outboundSchema` instead. */
  export const outboundSchema = PostUserV1GuestData$outboundSchema;
  /** @deprecated use `PostUserV1GuestData$Outbound` instead. */
  export type Outbound = PostUserV1GuestData$Outbound;
}

export function postUserV1GuestDataToJSON(
  postUserV1GuestData: PostUserV1GuestData,
): string {
  return JSON.stringify(
    PostUserV1GuestData$outboundSchema.parse(postUserV1GuestData),
  );
}

export function postUserV1GuestDataFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV1GuestData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV1GuestData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV1GuestData' from JSON`,
  );
}

/** @internal */
export const PostUserV1GuestResponseBody$inboundSchema: z.ZodType<
  PostUserV1GuestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostUserV1GuestData$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostUserV1GuestResponseBody$Outbound = {
  data?: PostUserV1GuestData$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostUserV1GuestResponseBody$outboundSchema: z.ZodType<
  PostUserV1GuestResponseBody$Outbound,
  z.ZodTypeDef,
  PostUserV1GuestResponseBody
> = z.object({
  data: z.lazy(() => PostUserV1GuestData$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV1GuestResponseBody$ {
  /** @deprecated use `PostUserV1GuestResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostUserV1GuestResponseBody$inboundSchema;
  /** @deprecated use `PostUserV1GuestResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostUserV1GuestResponseBody$outboundSchema;
  /** @deprecated use `PostUserV1GuestResponseBody$Outbound` instead. */
  export type Outbound = PostUserV1GuestResponseBody$Outbound;
}

export function postUserV1GuestResponseBodyToJSON(
  postUserV1GuestResponseBody: PostUserV1GuestResponseBody,
): string {
  return JSON.stringify(
    PostUserV1GuestResponseBody$outboundSchema.parse(
      postUserV1GuestResponseBody,
    ),
  );
}

export function postUserV1GuestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV1GuestResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV1GuestResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV1GuestResponseBody' from JSON`,
  );
}

/** @internal */
export const PostUserV1GuestResponse$inboundSchema: z.ZodType<
  PostUserV1GuestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostUserV1GuestResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostUserV1GuestResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostUserV1GuestResponseBody$Outbound;
};

/** @internal */
export const PostUserV1GuestResponse$outboundSchema: z.ZodType<
  PostUserV1GuestResponse$Outbound,
  z.ZodTypeDef,
  PostUserV1GuestResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostUserV1GuestResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV1GuestResponse$ {
  /** @deprecated use `PostUserV1GuestResponse$inboundSchema` instead. */
  export const inboundSchema = PostUserV1GuestResponse$inboundSchema;
  /** @deprecated use `PostUserV1GuestResponse$outboundSchema` instead. */
  export const outboundSchema = PostUserV1GuestResponse$outboundSchema;
  /** @deprecated use `PostUserV1GuestResponse$Outbound` instead. */
  export type Outbound = PostUserV1GuestResponse$Outbound;
}

export function postUserV1GuestResponseToJSON(
  postUserV1GuestResponse: PostUserV1GuestResponse,
): string {
  return JSON.stringify(
    PostUserV1GuestResponse$outboundSchema.parse(postUserV1GuestResponse),
  );
}

export function postUserV1GuestResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV1GuestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV1GuestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV1GuestResponse' from JSON`,
  );
}
