/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetReporterApiV1PaymentsRequest = {
  /**
   * Limit search results to a value
   */
  limit?: number | undefined;
  /**
   * Paginate search results
   */
  page?: number | undefined;
  /**
   * Sort by specifies the field use to sort data e.g. `created_at`
   */
  sortBy?: string | undefined;
  /**
   * Direction specifies the data sort order either ASC or DESC
   */
  direction?: string | undefined;
};

export type Client = {
  apiKey?: string | undefined;
};

export type GetReporterApiV1PaymentsCustomer = {
  token?: string | undefined;
};

export type GetReporterApiV1PaymentsCreatedAt = {
  seconds?: number | undefined;
};

export type GetReporterApiV1PaymentsList = {
  token?: string | undefined;
  environment?: string | undefined;
  client?: Client | undefined;
  customer?: GetReporterApiV1PaymentsCustomer | undefined;
  state?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  currency?: string | undefined;
  displayAmount?: string | undefined;
  createdAt?: GetReporterApiV1PaymentsCreatedAt | undefined;
};

export type Meta = {
  limit?: number | undefined;
  page?: number | undefined;
  offset?: number | undefined;
  sortBy?: string | undefined;
  direction?: string | undefined;
};

export type GetReporterApiV1PaymentsData = {
  count?: number | undefined;
  list?: Array<GetReporterApiV1PaymentsList> | undefined;
  meta?: Meta | undefined;
};

/**
 * 200
 */
export type GetReporterApiV1PaymentsResponseBody = {
  ok?: boolean | undefined;
  data?: GetReporterApiV1PaymentsData | undefined;
  status?: models.Status | undefined;
};

export type GetReporterApiV1PaymentsResponse = {
  headers: { [k: string]: Array<string> };
  result: GetReporterApiV1PaymentsResponseBody;
};

/** @internal */
export const GetReporterApiV1PaymentsRequest$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  page: z.number().int().optional(),
  sort_by: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
  });
});

/** @internal */
export type GetReporterApiV1PaymentsRequest$Outbound = {
  limit?: number | undefined;
  page?: number | undefined;
  sort_by?: string | undefined;
  direction?: string | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsRequest$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsRequest$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsRequest
> = z.object({
  limit: z.number().int().optional(),
  page: z.number().int().optional(),
  sortBy: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsRequest$ {
  /** @deprecated use `GetReporterApiV1PaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsRequest$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetReporterApiV1PaymentsRequest$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsRequest$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsRequest$Outbound;
}

export function getReporterApiV1PaymentsRequestToJSON(
  getReporterApiV1PaymentsRequest: GetReporterApiV1PaymentsRequest,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsRequest$outboundSchema.parse(
      getReporterApiV1PaymentsRequest,
    ),
  );
}

export function getReporterApiV1PaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsRequest' from JSON`,
  );
}

/** @internal */
export const Client$inboundSchema: z.ZodType<Client, z.ZodTypeDef, unknown> = z
  .object({
    api_key: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "api_key": "apiKey",
    });
  });

/** @internal */
export type Client$Outbound = {
  api_key?: string | undefined;
};

/** @internal */
export const Client$outboundSchema: z.ZodType<
  Client$Outbound,
  z.ZodTypeDef,
  Client
> = z.object({
  apiKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Client$ {
  /** @deprecated use `Client$inboundSchema` instead. */
  export const inboundSchema = Client$inboundSchema;
  /** @deprecated use `Client$outboundSchema` instead. */
  export const outboundSchema = Client$outboundSchema;
  /** @deprecated use `Client$Outbound` instead. */
  export type Outbound = Client$Outbound;
}

export function clientToJSON(client: Client): string {
  return JSON.stringify(Client$outboundSchema.parse(client));
}

export function clientFromJSON(
  jsonString: string,
): SafeParseResult<Client, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Client$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Client' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsCustomer$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
});

/** @internal */
export type GetReporterApiV1PaymentsCustomer$Outbound = {
  token?: string | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsCustomer$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsCustomer$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsCustomer
> = z.object({
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsCustomer$ {
  /** @deprecated use `GetReporterApiV1PaymentsCustomer$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsCustomer$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsCustomer$outboundSchema` instead. */
  export const outboundSchema = GetReporterApiV1PaymentsCustomer$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsCustomer$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsCustomer$Outbound;
}

export function getReporterApiV1PaymentsCustomerToJSON(
  getReporterApiV1PaymentsCustomer: GetReporterApiV1PaymentsCustomer,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsCustomer$outboundSchema.parse(
      getReporterApiV1PaymentsCustomer,
    ),
  );
}

export function getReporterApiV1PaymentsCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsCustomer' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsCreatedAt$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetReporterApiV1PaymentsCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsCreatedAt$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsCreatedAt$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsCreatedAt$ {
  /** @deprecated use `GetReporterApiV1PaymentsCreatedAt$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsCreatedAt$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsCreatedAt$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsCreatedAt$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsCreatedAt$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsCreatedAt$Outbound;
}

export function getReporterApiV1PaymentsCreatedAtToJSON(
  getReporterApiV1PaymentsCreatedAt: GetReporterApiV1PaymentsCreatedAt,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsCreatedAt$outboundSchema.parse(
      getReporterApiV1PaymentsCreatedAt,
    ),
  );
}

export function getReporterApiV1PaymentsCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsCreatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsList$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  environment: z.string().optional(),
  client: z.lazy(() => Client$inboundSchema).optional(),
  customer: z.lazy(() => GetReporterApiV1PaymentsCustomer$inboundSchema)
    .optional(),
  state: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  currency: z.string().optional(),
  display_amount: z.string().optional(),
  created_at: z.lazy(() => GetReporterApiV1PaymentsCreatedAt$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "display_amount": "displayAmount",
    "created_at": "createdAt",
  });
});

/** @internal */
export type GetReporterApiV1PaymentsList$Outbound = {
  token?: string | undefined;
  environment?: string | undefined;
  client?: Client$Outbound | undefined;
  customer?: GetReporterApiV1PaymentsCustomer$Outbound | undefined;
  state?: string | undefined;
  intent?: string | undefined;
  mode?: string | undefined;
  currency?: string | undefined;
  display_amount?: string | undefined;
  created_at?: GetReporterApiV1PaymentsCreatedAt$Outbound | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsList$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsList$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsList
> = z.object({
  token: z.string().optional(),
  environment: z.string().optional(),
  client: z.lazy(() => Client$outboundSchema).optional(),
  customer: z.lazy(() => GetReporterApiV1PaymentsCustomer$outboundSchema)
    .optional(),
  state: z.string().optional(),
  intent: z.string().optional(),
  mode: z.string().optional(),
  currency: z.string().optional(),
  displayAmount: z.string().optional(),
  createdAt: z.lazy(() => GetReporterApiV1PaymentsCreatedAt$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    displayAmount: "display_amount",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsList$ {
  /** @deprecated use `GetReporterApiV1PaymentsList$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsList$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsList$outboundSchema` instead. */
  export const outboundSchema = GetReporterApiV1PaymentsList$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsList$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsList$Outbound;
}

export function getReporterApiV1PaymentsListToJSON(
  getReporterApiV1PaymentsList: GetReporterApiV1PaymentsList,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsList$outboundSchema.parse(
      getReporterApiV1PaymentsList,
    ),
  );
}

export function getReporterApiV1PaymentsListFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsList' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    limit: z.number().int().optional(),
    page: z.number().int().optional(),
    offset: z.number().int().optional(),
    sort_by: z.string().optional(),
    direction: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "sort_by": "sortBy",
    });
  });

/** @internal */
export type Meta$Outbound = {
  limit?: number | undefined;
  page?: number | undefined;
  offset?: number | undefined;
  sort_by?: string | undefined;
  direction?: string | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    limit: z.number().int().optional(),
    page: z.number().int().optional(),
    offset: z.number().int().optional(),
    sortBy: z.string().optional(),
    direction: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      sortBy: "sort_by",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsData$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => GetReporterApiV1PaymentsList$inboundSchema))
    .optional(),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
});

/** @internal */
export type GetReporterApiV1PaymentsData$Outbound = {
  count?: number | undefined;
  list?: Array<GetReporterApiV1PaymentsList$Outbound> | undefined;
  meta?: Meta$Outbound | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsData$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsData$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsData
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => GetReporterApiV1PaymentsList$outboundSchema))
    .optional(),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsData$ {
  /** @deprecated use `GetReporterApiV1PaymentsData$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsData$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsData$outboundSchema` instead. */
  export const outboundSchema = GetReporterApiV1PaymentsData$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsData$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsData$Outbound;
}

export function getReporterApiV1PaymentsDataToJSON(
  getReporterApiV1PaymentsData: GetReporterApiV1PaymentsData,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsData$outboundSchema.parse(
      getReporterApiV1PaymentsData,
    ),
  );
}

export function getReporterApiV1PaymentsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsData' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsResponseBody$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ok: z.boolean().optional(),
  data: z.lazy(() => GetReporterApiV1PaymentsData$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetReporterApiV1PaymentsResponseBody$Outbound = {
  ok?: boolean | undefined;
  data?: GetReporterApiV1PaymentsData$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetReporterApiV1PaymentsResponseBody$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsResponseBody
> = z.object({
  ok: z.boolean().optional(),
  data: z.lazy(() => GetReporterApiV1PaymentsData$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsResponseBody$ {
  /** @deprecated use `GetReporterApiV1PaymentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsResponseBody$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsResponseBody$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsResponseBody$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsResponseBody$Outbound;
}

export function getReporterApiV1PaymentsResponseBodyToJSON(
  getReporterApiV1PaymentsResponseBody: GetReporterApiV1PaymentsResponseBody,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsResponseBody$outboundSchema.parse(
      getReporterApiV1PaymentsResponseBody,
    ),
  );
}

export function getReporterApiV1PaymentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsResponse$inboundSchema: z.ZodType<
  GetReporterApiV1PaymentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetReporterApiV1PaymentsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetReporterApiV1PaymentsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetReporterApiV1PaymentsResponseBody$Outbound;
};

/** @internal */
export const GetReporterApiV1PaymentsResponse$outboundSchema: z.ZodType<
  GetReporterApiV1PaymentsResponse$Outbound,
  z.ZodTypeDef,
  GetReporterApiV1PaymentsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetReporterApiV1PaymentsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsResponse$ {
  /** @deprecated use `GetReporterApiV1PaymentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetReporterApiV1PaymentsResponse$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetReporterApiV1PaymentsResponse$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsResponse$Outbound` instead. */
  export type Outbound = GetReporterApiV1PaymentsResponse$Outbound;
}

export function getReporterApiV1PaymentsResponseToJSON(
  getReporterApiV1PaymentsResponse: GetReporterApiV1PaymentsResponse,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsResponse$outboundSchema.parse(
      getReporterApiV1PaymentsResponse,
    ),
  );
}

export function getReporterApiV1PaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetReporterApiV1PaymentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetReporterApiV1PaymentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsResponse' from JSON`,
  );
}
