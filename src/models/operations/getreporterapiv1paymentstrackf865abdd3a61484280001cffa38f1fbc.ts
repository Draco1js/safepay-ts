/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderIdCreatedAt = {
  seconds?: number | undefined;
};

export type OrderIdUpdatedAt = {
  seconds?: number | undefined;
};

export type OrderId = {
  token?: string | undefined;
  tracker?: string | undefined;
  key?: string | undefined;
  value?: string | undefined;
  createdAt?: OrderIdCreatedAt | undefined;
  updatedAt?: OrderIdUpdatedAt | undefined;
};

export type SourceCreatedAt = {
  seconds?: number | undefined;
};

export type SourceUpdatedAt = {
  seconds?: number | undefined;
};

export type Source = {
  token?: string | undefined;
  tracker?: string | undefined;
  key?: string | undefined;
  value?: string | undefined;
  createdAt?: SourceCreatedAt | undefined;
  updatedAt?: SourceUpdatedAt | undefined;
};

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata =
  {
    orderId?: OrderId | undefined;
    source?: Source | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient =
  {
    token?: string | undefined;
    apiKey?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    avatar?: string | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer =
  {
    token?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE =
  {
    kind?: string | undefined;
    requestId?: string | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS =
  {
    kind?: string | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions =
  {
    cybersource?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE
      | undefined;
    mpgs?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS
      | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount =
  {
    currency?: string | undefined;
    amount?: number | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount =
  {
    currency?: string | undefined;
    amount?: number | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate =
  {
    baseCurrency?: string | undefined;
    quoteCurrency?: string | undefined;
    rate?: number | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals =
  {
    quoteAmount?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount
      | undefined;
    baseAmount?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount
      | undefined;
    conversionRate?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate
      | undefined;
  };

export type Amount = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type Fees = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type Tax = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type Net = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type ChargeTotals = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type ChargeCaptureCreatedAt = {
  seconds?: number | undefined;
};

export type ChargeCaptureUpdatedAt = {
  seconds?: number | undefined;
};

export type ChargeCapture = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  intent?: string | undefined;
  cybersourceRid?: string | undefined;
  isVoidable?: boolean | undefined;
  kind?: string | undefined;
  totals?: ChargeTotals | undefined;
  createdAt?: ChargeCaptureCreatedAt | undefined;
  updatedAt?: ChargeCaptureUpdatedAt | undefined;
};

export type Balance = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type ChargeCreatedAt = {
  seconds?: number | undefined;
};

export type ChargeUpdatedAt = {
  seconds?: number | undefined;
};

export type Charge = {
  token?: string | undefined;
  tracker?: string | undefined;
  client?: string | undefined;
  user?: string | undefined;
  amount?: Amount | undefined;
  fees?: Fees | undefined;
  tax?: Tax | undefined;
  net?: Net | undefined;
  signature?: string | undefined;
  capture?: ChargeCapture | undefined;
  balance?: Balance | undefined;
  createdAt?: ChargeCreatedAt | undefined;
  updatedAt?: ChargeUpdatedAt | undefined;
};

export type EventCreatedAt = {
  seconds?: number | undefined;
};

export type Event = {
  intent?: string | undefined;
  type?: string | undefined;
  intentRequestId?: string | undefined;
  reason?: string | undefined;
  createdAt?: EventCreatedAt | undefined;
};

export type ActionsPerformedCreatedAt = {
  seconds?: number | undefined;
};

export type ActionsPerformedUpdatedAt = {
  seconds?: number | undefined;
};

export type ActionsPerformed = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  kind?: string | undefined;
  createdAt?: ActionsPerformedCreatedAt | undefined;
  updatedAt?: ActionsPerformedUpdatedAt | undefined;
};

export type PaymentMethodCreatedAt = {
  seconds?: number | undefined;
};

export type PaymentMethodUpdatedAt = {
  seconds?: number | undefined;
};

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod =
  {
    token?: string | undefined;
    tracker?: string | undefined;
    attempt?: string | undefined;
    lastFour?: string | undefined;
    kind?: string | undefined;
    scheme?: string | undefined;
    bin?: string | undefined;
    expirationMonth?: string | undefined;
    expirationYear?: string | undefined;
    createdAt?: PaymentMethodCreatedAt | undefined;
    updatedAt?: PaymentMethodUpdatedAt | undefined;
  };

export type BillingCreatedAt = {
  seconds?: number | undefined;
};

export type BillingUpdatedAt = {
  seconds?: number | undefined;
};

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling =
  {
    token?: string | undefined;
    attempt?: string | undefined;
    street1?: string | undefined;
    city?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    createdAt?: BillingCreatedAt | undefined;
    updatedAt?: BillingUpdatedAt | undefined;
  };

export type EnrollmentCreatedAt = {
  seconds?: number | undefined;
};

export type EnrollmentUpdatedAt = {
  seconds?: number | undefined;
};

export type Enrollment = {
  token?: string | undefined;
  attempt?: string | undefined;
  cybersourceRid?: string | undefined;
  specificationVersion?: string | undefined;
  veresEnrolled?: string | undefined;
  eci?: string | undefined;
  createdAt?: EnrollmentCreatedAt | undefined;
  updatedAt?: EnrollmentUpdatedAt | undefined;
};

export type RiskCreatedAt = {
  seconds?: number | undefined;
};

export type RiskUpdatedAt = {
  seconds?: number | undefined;
};

export type Risk = {
  token?: string | undefined;
  attempt?: string | undefined;
  score?: string | undefined;
  factorCodes?: Array<string> | undefined;
  infoCodes?: Array<string> | undefined;
  createdAt?: RiskCreatedAt | undefined;
  updatedAt?: RiskUpdatedAt | undefined;
};

export type AuthorizationTotals = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type AuthorizationCreatedAt = {
  seconds?: number | undefined;
};

export type AuthorizationUpdatedAt = {
  seconds?: number | undefined;
};

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization =
  {
    token?: string | undefined;
    tracker?: string | undefined;
    attempt?: string | undefined;
    intent?: string | undefined;
    cybersourceRid?: string | undefined;
    totals?: AuthorizationTotals | undefined;
    createdAt?: AuthorizationCreatedAt | undefined;
    updatedAt?: AuthorizationUpdatedAt | undefined;
  };

export type AttemptCaptureTotals = {
  currency?: string | undefined;
  amount?: number | undefined;
};

export type AttemptCaptureCreatedAt = {
  seconds?: number | undefined;
};

export type AttemptCaptureUpdatedAt = {
  seconds?: number | undefined;
};

export type AttemptCapture = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  intent?: string | undefined;
  cybersourceRid?: string | undefined;
  isVoidable?: boolean | undefined;
  kind?: string | undefined;
  totals?: AttemptCaptureTotals | undefined;
  createdAt?: AttemptCaptureCreatedAt | undefined;
  updatedAt?: AttemptCaptureUpdatedAt | undefined;
};

export type AttemptCreatedAt = {
  seconds?: number | undefined;
};

export type AttemptUpdatedAt = {
  seconds?: number | undefined;
};

export type AttemptCustomer = {
  token?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
};

export type Attempt = {
  token?: string | undefined;
  tracker?: string | undefined;
  intent?: string | undefined;
  idempotencyKey?: string | undefined;
  kind?: number | undefined;
  actionsPerformed?: Array<ActionsPerformed> | undefined;
  paymentMethod?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod
    | undefined;
  billing?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling
    | undefined;
  enrollment?: Enrollment | undefined;
  risk?: Risk | undefined;
  authorization?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization
    | undefined;
  capture?: AttemptCapture | undefined;
  isSuccess?: boolean | undefined;
  createdAt?: AttemptCreatedAt | undefined;
  updatedAt?: AttemptUpdatedAt | undefined;
  mode?: string | undefined;
  entryMode?: string | undefined;
  customer?: AttemptCustomer | undefined;
};

export type LocationCreatedAt = {
  seconds?: number | undefined;
};

export type LocationUpdatedAt = {
  seconds?: number | undefined;
};

export type Location = {
  tracker?: string | undefined;
  token?: string | undefined;
  ipAddress?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  region?: string | undefined;
  createdAt?: LocationCreatedAt | undefined;
  updatedAt?: LocationUpdatedAt | undefined;
};

export type DeviceCreatedAt = {
  seconds?: number | undefined;
};

export type DeviceUpdatedAt = {
  seconds?: number | undefined;
};

export type Device = {
  tracker?: string | undefined;
  token?: string | undefined;
  userAgent?: string | undefined;
  entity?: string | undefined;
  browser?: string | undefined;
  browserVersion?: string | undefined;
  device?: string | undefined;
  deviceType?: string | undefined;
  platform?: string | undefined;
  platformIcon?: string | undefined;
  createdAt?: DeviceCreatedAt | undefined;
  updatedAt?: DeviceUpdatedAt | undefined;
};

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt =
  {
    seconds?: number | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt =
  {
    seconds?: number | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData =
  {
    token?: string | undefined;
    environment?: string | undefined;
    state?: string | undefined;
    intent?: string | undefined;
    mode?: string | undefined;
    entryMode?: string | undefined;
    metadata?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata
      | undefined;
    client?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient
      | undefined;
    customer?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer
      | undefined;
    nextActions?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions
      | undefined;
    purchaseTotals?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals
      | undefined;
    charge?: Charge | undefined;
    events?: Array<Event> | undefined;
    attempts?: Array<Attempt> | undefined;
    location?: Location | undefined;
    device?: Device | undefined;
    createdAt?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt
      | undefined;
    updatedAt?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt
      | undefined;
  };

/**
 * 200
 */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody =
  {
    ok?: boolean | undefined;
    data?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData
      | undefined;
  };

export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse =
  {
    headers: { [k: string]: Array<string> };
    result:
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody;
  };

/** @internal */
export const OrderIdCreatedAt$inboundSchema: z.ZodType<
  OrderIdCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type OrderIdCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const OrderIdCreatedAt$outboundSchema: z.ZodType<
  OrderIdCreatedAt$Outbound,
  z.ZodTypeDef,
  OrderIdCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderIdCreatedAt$ {
  /** @deprecated use `OrderIdCreatedAt$inboundSchema` instead. */
  export const inboundSchema = OrderIdCreatedAt$inboundSchema;
  /** @deprecated use `OrderIdCreatedAt$outboundSchema` instead. */
  export const outboundSchema = OrderIdCreatedAt$outboundSchema;
  /** @deprecated use `OrderIdCreatedAt$Outbound` instead. */
  export type Outbound = OrderIdCreatedAt$Outbound;
}

export function orderIdCreatedAtToJSON(
  orderIdCreatedAt: OrderIdCreatedAt,
): string {
  return JSON.stringify(
    OrderIdCreatedAt$outboundSchema.parse(orderIdCreatedAt),
  );
}

export function orderIdCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<OrderIdCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderIdCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderIdCreatedAt' from JSON`,
  );
}

/** @internal */
export const OrderIdUpdatedAt$inboundSchema: z.ZodType<
  OrderIdUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type OrderIdUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const OrderIdUpdatedAt$outboundSchema: z.ZodType<
  OrderIdUpdatedAt$Outbound,
  z.ZodTypeDef,
  OrderIdUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderIdUpdatedAt$ {
  /** @deprecated use `OrderIdUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = OrderIdUpdatedAt$inboundSchema;
  /** @deprecated use `OrderIdUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = OrderIdUpdatedAt$outboundSchema;
  /** @deprecated use `OrderIdUpdatedAt$Outbound` instead. */
  export type Outbound = OrderIdUpdatedAt$Outbound;
}

export function orderIdUpdatedAtToJSON(
  orderIdUpdatedAt: OrderIdUpdatedAt,
): string {
  return JSON.stringify(
    OrderIdUpdatedAt$outboundSchema.parse(orderIdUpdatedAt),
  );
}

export function orderIdUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<OrderIdUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderIdUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderIdUpdatedAt' from JSON`,
  );
}

/** @internal */
export const OrderId$inboundSchema: z.ZodType<OrderId, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    created_at: z.lazy(() => OrderIdCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => OrderIdUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type OrderId$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  key?: string | undefined;
  value?: string | undefined;
  created_at?: OrderIdCreatedAt$Outbound | undefined;
  updated_at?: OrderIdUpdatedAt$Outbound | undefined;
};

/** @internal */
export const OrderId$outboundSchema: z.ZodType<
  OrderId$Outbound,
  z.ZodTypeDef,
  OrderId
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.lazy(() => OrderIdCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => OrderIdUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderId$ {
  /** @deprecated use `OrderId$inboundSchema` instead. */
  export const inboundSchema = OrderId$inboundSchema;
  /** @deprecated use `OrderId$outboundSchema` instead. */
  export const outboundSchema = OrderId$outboundSchema;
  /** @deprecated use `OrderId$Outbound` instead. */
  export type Outbound = OrderId$Outbound;
}

export function orderIdToJSON(orderId: OrderId): string {
  return JSON.stringify(OrderId$outboundSchema.parse(orderId));
}

export function orderIdFromJSON(
  jsonString: string,
): SafeParseResult<OrderId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderId' from JSON`,
  );
}

/** @internal */
export const SourceCreatedAt$inboundSchema: z.ZodType<
  SourceCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type SourceCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const SourceCreatedAt$outboundSchema: z.ZodType<
  SourceCreatedAt$Outbound,
  z.ZodTypeDef,
  SourceCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceCreatedAt$ {
  /** @deprecated use `SourceCreatedAt$inboundSchema` instead. */
  export const inboundSchema = SourceCreatedAt$inboundSchema;
  /** @deprecated use `SourceCreatedAt$outboundSchema` instead. */
  export const outboundSchema = SourceCreatedAt$outboundSchema;
  /** @deprecated use `SourceCreatedAt$Outbound` instead. */
  export type Outbound = SourceCreatedAt$Outbound;
}

export function sourceCreatedAtToJSON(
  sourceCreatedAt: SourceCreatedAt,
): string {
  return JSON.stringify(SourceCreatedAt$outboundSchema.parse(sourceCreatedAt));
}

export function sourceCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<SourceCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceCreatedAt' from JSON`,
  );
}

/** @internal */
export const SourceUpdatedAt$inboundSchema: z.ZodType<
  SourceUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type SourceUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const SourceUpdatedAt$outboundSchema: z.ZodType<
  SourceUpdatedAt$Outbound,
  z.ZodTypeDef,
  SourceUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceUpdatedAt$ {
  /** @deprecated use `SourceUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = SourceUpdatedAt$inboundSchema;
  /** @deprecated use `SourceUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = SourceUpdatedAt$outboundSchema;
  /** @deprecated use `SourceUpdatedAt$Outbound` instead. */
  export type Outbound = SourceUpdatedAt$Outbound;
}

export function sourceUpdatedAtToJSON(
  sourceUpdatedAt: SourceUpdatedAt,
): string {
  return JSON.stringify(SourceUpdatedAt$outboundSchema.parse(sourceUpdatedAt));
}

export function sourceUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<SourceUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Source$inboundSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z
  .object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    created_at: z.lazy(() => SourceCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => SourceUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Source$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  key?: string | undefined;
  value?: string | undefined;
  created_at?: SourceCreatedAt$Outbound | undefined;
  updated_at?: SourceUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Source$outboundSchema: z.ZodType<
  Source$Outbound,
  z.ZodTypeDef,
  Source
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  key: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.lazy(() => SourceCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => SourceUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
  /** @deprecated use `Source$Outbound` instead. */
  export type Outbound = Source$Outbound;
}

export function sourceToJSON(source: Source): string {
  return JSON.stringify(Source$outboundSchema.parse(source));
}

export function sourceFromJSON(
  jsonString: string,
): SafeParseResult<Source, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    order_id: z.lazy(() => OrderId$inboundSchema).optional(),
    source: z.lazy(() => Source$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "order_id": "orderId",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$Outbound =
  {
    order_id?: OrderId$Outbound | undefined;
    source?: Source$Outbound | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata
  > = z.object({
    orderId: z.lazy(() => OrderId$outboundSchema).optional(),
    source: z.lazy(() => Source$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      orderId: "order_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadataToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    api_key: z.string().optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    avatar: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "api_key": "apiKey",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$Outbound =
  {
    token?: string | undefined;
    api_key?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    avatar?: string | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient
  > = z.object({
    token: z.string().optional(),
    apiKey: z.string().optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    avatar: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      apiKey: "api_key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClientToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClientFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    first_name: z.string().optional(),
    last_name: z.string().optional(),
    email: z.string().optional(),
    phone: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$Outbound =
  {
    token?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer
  > = z.object({
    token: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    phone: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      firstName: "first_name",
      lastName: "last_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomerToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomerFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE,
    z.ZodTypeDef,
    unknown
  > = z.object({
    kind: z.string().optional(),
    request_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "request_id": "requestId",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$Outbound =
  {
    kind?: string | undefined;
    request_id?: string | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE
  > = z.object({
    kind: z.string().optional(),
    requestId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      requestId: "request_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCEToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCEFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS,
    z.ZodTypeDef,
    unknown
  > = z.object({
    kind: z.string().optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$Outbound =
  {
    kind?: string | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS
  > = z.object({
    kind: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGSToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$outboundSchema
      .parse(getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGSFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    CYBERSOURCE: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$inboundSchema
    ).optional(),
    MPGS: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "CYBERSOURCE": "cybersource",
      "MPGS": "mpgs",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$Outbound =
  {
    CYBERSOURCE?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$Outbound
      | undefined;
    MPGS?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$Outbound
      | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions
  > = z.object({
    cybersource: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCYBERSOURCE$outboundSchema
    ).optional(),
    mpgs: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMPGS$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      cybersource: "CYBERSOURCE",
      mpgs: "MPGS",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActionsToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$Outbound =
  {
    currency?: string | undefined;
    amount?: number | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount
  > = z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmountToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$Outbound =
  {
    currency?: string | undefined;
    amount?: number | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount
  > = z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmountToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    base_currency: z.string().optional(),
    quote_currency: z.string().optional(),
    rate: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "base_currency": "baseCurrency",
      "quote_currency": "quoteCurrency",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$Outbound =
  {
    base_currency?: string | undefined;
    quote_currency?: string | undefined;
    rate?: number | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate
  > = z.object({
    baseCurrency: z.string().optional(),
    quoteCurrency: z.string().optional(),
    rate: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      baseCurrency: "base_currency",
      quoteCurrency: "quote_currency",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRateToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRateFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    quote_amount: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$inboundSchema
    ).optional(),
    base_amount: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$inboundSchema
    ).optional(),
    conversion_rate: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "quote_amount": "quoteAmount",
      "base_amount": "baseAmount",
      "conversion_rate": "conversionRate",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$Outbound =
  {
    quote_amount?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$Outbound
      | undefined;
    base_amount?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$Outbound
      | undefined;
    conversion_rate?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$Outbound
      | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals
  > = z.object({
    quoteAmount: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcQuoteAmount$outboundSchema
    ).optional(),
    baseAmount: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBaseAmount$outboundSchema
    ).optional(),
    conversionRate: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcConversionRate$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      quoteAmount: "quote_amount",
      baseAmount: "base_amount",
      conversionRate: "conversion_rate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotalsToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotalsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals' from JSON`,
  );
}

/** @internal */
export const Amount$inboundSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type Amount$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Amount$outboundSchema: z.ZodType<
  Amount$Outbound,
  z.ZodTypeDef,
  Amount
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount$ {
  /** @deprecated use `Amount$inboundSchema` instead. */
  export const inboundSchema = Amount$inboundSchema;
  /** @deprecated use `Amount$outboundSchema` instead. */
  export const outboundSchema = Amount$outboundSchema;
  /** @deprecated use `Amount$Outbound` instead. */
  export type Outbound = Amount$Outbound;
}

export function amountToJSON(amount: Amount): string {
  return JSON.stringify(Amount$outboundSchema.parse(amount));
}

export function amountFromJSON(
  jsonString: string,
): SafeParseResult<Amount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount' from JSON`,
  );
}

/** @internal */
export const Fees$inboundSchema: z.ZodType<Fees, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type Fees$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Fees$outboundSchema: z.ZodType<Fees$Outbound, z.ZodTypeDef, Fees> =
  z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fees$ {
  /** @deprecated use `Fees$inboundSchema` instead. */
  export const inboundSchema = Fees$inboundSchema;
  /** @deprecated use `Fees$outboundSchema` instead. */
  export const outboundSchema = Fees$outboundSchema;
  /** @deprecated use `Fees$Outbound` instead. */
  export type Outbound = Fees$Outbound;
}

export function feesToJSON(fees: Fees): string {
  return JSON.stringify(Fees$outboundSchema.parse(fees));
}

export function feesFromJSON(
  jsonString: string,
): SafeParseResult<Fees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fees' from JSON`,
  );
}

/** @internal */
export const Tax$inboundSchema: z.ZodType<Tax, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type Tax$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Tax$outboundSchema: z.ZodType<Tax$Outbound, z.ZodTypeDef, Tax> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tax$ {
  /** @deprecated use `Tax$inboundSchema` instead. */
  export const inboundSchema = Tax$inboundSchema;
  /** @deprecated use `Tax$outboundSchema` instead. */
  export const outboundSchema = Tax$outboundSchema;
  /** @deprecated use `Tax$Outbound` instead. */
  export type Outbound = Tax$Outbound;
}

export function taxToJSON(tax: Tax): string {
  return JSON.stringify(Tax$outboundSchema.parse(tax));
}

export function taxFromJSON(
  jsonString: string,
): SafeParseResult<Tax, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tax$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tax' from JSON`,
  );
}

/** @internal */
export const Net$inboundSchema: z.ZodType<Net, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type Net$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Net$outboundSchema: z.ZodType<Net$Outbound, z.ZodTypeDef, Net> = z
  .object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Net$ {
  /** @deprecated use `Net$inboundSchema` instead. */
  export const inboundSchema = Net$inboundSchema;
  /** @deprecated use `Net$outboundSchema` instead. */
  export const outboundSchema = Net$outboundSchema;
  /** @deprecated use `Net$Outbound` instead. */
  export type Outbound = Net$Outbound;
}

export function netToJSON(net: Net): string {
  return JSON.stringify(Net$outboundSchema.parse(net));
}

export function netFromJSON(
  jsonString: string,
): SafeParseResult<Net, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Net$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Net' from JSON`,
  );
}

/** @internal */
export const ChargeTotals$inboundSchema: z.ZodType<
  ChargeTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/** @internal */
export type ChargeTotals$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const ChargeTotals$outboundSchema: z.ZodType<
  ChargeTotals$Outbound,
  z.ZodTypeDef,
  ChargeTotals
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeTotals$ {
  /** @deprecated use `ChargeTotals$inboundSchema` instead. */
  export const inboundSchema = ChargeTotals$inboundSchema;
  /** @deprecated use `ChargeTotals$outboundSchema` instead. */
  export const outboundSchema = ChargeTotals$outboundSchema;
  /** @deprecated use `ChargeTotals$Outbound` instead. */
  export type Outbound = ChargeTotals$Outbound;
}

export function chargeTotalsToJSON(chargeTotals: ChargeTotals): string {
  return JSON.stringify(ChargeTotals$outboundSchema.parse(chargeTotals));
}

export function chargeTotalsFromJSON(
  jsonString: string,
): SafeParseResult<ChargeTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeTotals' from JSON`,
  );
}

/** @internal */
export const ChargeCaptureCreatedAt$inboundSchema: z.ZodType<
  ChargeCaptureCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ChargeCaptureCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ChargeCaptureCreatedAt$outboundSchema: z.ZodType<
  ChargeCaptureCreatedAt$Outbound,
  z.ZodTypeDef,
  ChargeCaptureCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeCaptureCreatedAt$ {
  /** @deprecated use `ChargeCaptureCreatedAt$inboundSchema` instead. */
  export const inboundSchema = ChargeCaptureCreatedAt$inboundSchema;
  /** @deprecated use `ChargeCaptureCreatedAt$outboundSchema` instead. */
  export const outboundSchema = ChargeCaptureCreatedAt$outboundSchema;
  /** @deprecated use `ChargeCaptureCreatedAt$Outbound` instead. */
  export type Outbound = ChargeCaptureCreatedAt$Outbound;
}

export function chargeCaptureCreatedAtToJSON(
  chargeCaptureCreatedAt: ChargeCaptureCreatedAt,
): string {
  return JSON.stringify(
    ChargeCaptureCreatedAt$outboundSchema.parse(chargeCaptureCreatedAt),
  );
}

export function chargeCaptureCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ChargeCaptureCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeCaptureCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeCaptureCreatedAt' from JSON`,
  );
}

/** @internal */
export const ChargeCaptureUpdatedAt$inboundSchema: z.ZodType<
  ChargeCaptureUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ChargeCaptureUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ChargeCaptureUpdatedAt$outboundSchema: z.ZodType<
  ChargeCaptureUpdatedAt$Outbound,
  z.ZodTypeDef,
  ChargeCaptureUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeCaptureUpdatedAt$ {
  /** @deprecated use `ChargeCaptureUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = ChargeCaptureUpdatedAt$inboundSchema;
  /** @deprecated use `ChargeCaptureUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = ChargeCaptureUpdatedAt$outboundSchema;
  /** @deprecated use `ChargeCaptureUpdatedAt$Outbound` instead. */
  export type Outbound = ChargeCaptureUpdatedAt$Outbound;
}

export function chargeCaptureUpdatedAtToJSON(
  chargeCaptureUpdatedAt: ChargeCaptureUpdatedAt,
): string {
  return JSON.stringify(
    ChargeCaptureUpdatedAt$outboundSchema.parse(chargeCaptureUpdatedAt),
  );
}

export function chargeCaptureUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ChargeCaptureUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeCaptureUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeCaptureUpdatedAt' from JSON`,
  );
}

/** @internal */
export const ChargeCapture$inboundSchema: z.ZodType<
  ChargeCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  intent: z.string().optional(),
  cybersource_rid: z.string().optional(),
  is_voidable: z.boolean().optional(),
  kind: z.string().optional(),
  totals: z.lazy(() => ChargeTotals$inboundSchema).optional(),
  created_at: z.lazy(() => ChargeCaptureCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => ChargeCaptureUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "cybersource_rid": "cybersourceRid",
    "is_voidable": "isVoidable",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ChargeCapture$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  intent?: string | undefined;
  cybersource_rid?: string | undefined;
  is_voidable?: boolean | undefined;
  kind?: string | undefined;
  totals?: ChargeTotals$Outbound | undefined;
  created_at?: ChargeCaptureCreatedAt$Outbound | undefined;
  updated_at?: ChargeCaptureUpdatedAt$Outbound | undefined;
};

/** @internal */
export const ChargeCapture$outboundSchema: z.ZodType<
  ChargeCapture$Outbound,
  z.ZodTypeDef,
  ChargeCapture
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  intent: z.string().optional(),
  cybersourceRid: z.string().optional(),
  isVoidable: z.boolean().optional(),
  kind: z.string().optional(),
  totals: z.lazy(() => ChargeTotals$outboundSchema).optional(),
  createdAt: z.lazy(() => ChargeCaptureCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => ChargeCaptureUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cybersourceRid: "cybersource_rid",
    isVoidable: "is_voidable",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeCapture$ {
  /** @deprecated use `ChargeCapture$inboundSchema` instead. */
  export const inboundSchema = ChargeCapture$inboundSchema;
  /** @deprecated use `ChargeCapture$outboundSchema` instead. */
  export const outboundSchema = ChargeCapture$outboundSchema;
  /** @deprecated use `ChargeCapture$Outbound` instead. */
  export type Outbound = ChargeCapture$Outbound;
}

export function chargeCaptureToJSON(chargeCapture: ChargeCapture): string {
  return JSON.stringify(ChargeCapture$outboundSchema.parse(chargeCapture));
}

export function chargeCaptureFromJSON(
  jsonString: string,
): SafeParseResult<ChargeCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeCapture' from JSON`,
  );
}

/** @internal */
export const Balance$inboundSchema: z.ZodType<Balance, z.ZodTypeDef, unknown> =
  z.object({
    currency: z.string().optional(),
    amount: z.number().int().optional(),
  });

/** @internal */
export type Balance$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Balance$outboundSchema: z.ZodType<
  Balance$Outbound,
  z.ZodTypeDef,
  Balance
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Balance$ {
  /** @deprecated use `Balance$inboundSchema` instead. */
  export const inboundSchema = Balance$inboundSchema;
  /** @deprecated use `Balance$outboundSchema` instead. */
  export const outboundSchema = Balance$outboundSchema;
  /** @deprecated use `Balance$Outbound` instead. */
  export type Outbound = Balance$Outbound;
}

export function balanceToJSON(balance: Balance): string {
  return JSON.stringify(Balance$outboundSchema.parse(balance));
}

export function balanceFromJSON(
  jsonString: string,
): SafeParseResult<Balance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Balance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Balance' from JSON`,
  );
}

/** @internal */
export const ChargeCreatedAt$inboundSchema: z.ZodType<
  ChargeCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ChargeCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ChargeCreatedAt$outboundSchema: z.ZodType<
  ChargeCreatedAt$Outbound,
  z.ZodTypeDef,
  ChargeCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeCreatedAt$ {
  /** @deprecated use `ChargeCreatedAt$inboundSchema` instead. */
  export const inboundSchema = ChargeCreatedAt$inboundSchema;
  /** @deprecated use `ChargeCreatedAt$outboundSchema` instead. */
  export const outboundSchema = ChargeCreatedAt$outboundSchema;
  /** @deprecated use `ChargeCreatedAt$Outbound` instead. */
  export type Outbound = ChargeCreatedAt$Outbound;
}

export function chargeCreatedAtToJSON(
  chargeCreatedAt: ChargeCreatedAt,
): string {
  return JSON.stringify(ChargeCreatedAt$outboundSchema.parse(chargeCreatedAt));
}

export function chargeCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ChargeCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeCreatedAt' from JSON`,
  );
}

/** @internal */
export const ChargeUpdatedAt$inboundSchema: z.ZodType<
  ChargeUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ChargeUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ChargeUpdatedAt$outboundSchema: z.ZodType<
  ChargeUpdatedAt$Outbound,
  z.ZodTypeDef,
  ChargeUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeUpdatedAt$ {
  /** @deprecated use `ChargeUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = ChargeUpdatedAt$inboundSchema;
  /** @deprecated use `ChargeUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = ChargeUpdatedAt$outboundSchema;
  /** @deprecated use `ChargeUpdatedAt$Outbound` instead. */
  export type Outbound = ChargeUpdatedAt$Outbound;
}

export function chargeUpdatedAtToJSON(
  chargeUpdatedAt: ChargeUpdatedAt,
): string {
  return JSON.stringify(ChargeUpdatedAt$outboundSchema.parse(chargeUpdatedAt));
}

export function chargeUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ChargeUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Charge$inboundSchema: z.ZodType<Charge, z.ZodTypeDef, unknown> = z
  .object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    client: z.string().optional(),
    user: z.string().optional(),
    amount: z.lazy(() => Amount$inboundSchema).optional(),
    fees: z.lazy(() => Fees$inboundSchema).optional(),
    tax: z.lazy(() => Tax$inboundSchema).optional(),
    net: z.lazy(() => Net$inboundSchema).optional(),
    signature: z.string().optional(),
    capture: z.lazy(() => ChargeCapture$inboundSchema).optional(),
    balance: z.lazy(() => Balance$inboundSchema).optional(),
    created_at: z.lazy(() => ChargeCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => ChargeUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Charge$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  client?: string | undefined;
  user?: string | undefined;
  amount?: Amount$Outbound | undefined;
  fees?: Fees$Outbound | undefined;
  tax?: Tax$Outbound | undefined;
  net?: Net$Outbound | undefined;
  signature?: string | undefined;
  capture?: ChargeCapture$Outbound | undefined;
  balance?: Balance$Outbound | undefined;
  created_at?: ChargeCreatedAt$Outbound | undefined;
  updated_at?: ChargeUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Charge$outboundSchema: z.ZodType<
  Charge$Outbound,
  z.ZodTypeDef,
  Charge
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  client: z.string().optional(),
  user: z.string().optional(),
  amount: z.lazy(() => Amount$outboundSchema).optional(),
  fees: z.lazy(() => Fees$outboundSchema).optional(),
  tax: z.lazy(() => Tax$outboundSchema).optional(),
  net: z.lazy(() => Net$outboundSchema).optional(),
  signature: z.string().optional(),
  capture: z.lazy(() => ChargeCapture$outboundSchema).optional(),
  balance: z.lazy(() => Balance$outboundSchema).optional(),
  createdAt: z.lazy(() => ChargeCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => ChargeUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Charge$ {
  /** @deprecated use `Charge$inboundSchema` instead. */
  export const inboundSchema = Charge$inboundSchema;
  /** @deprecated use `Charge$outboundSchema` instead. */
  export const outboundSchema = Charge$outboundSchema;
  /** @deprecated use `Charge$Outbound` instead. */
  export type Outbound = Charge$Outbound;
}

export function chargeToJSON(charge: Charge): string {
  return JSON.stringify(Charge$outboundSchema.parse(charge));
}

export function chargeFromJSON(
  jsonString: string,
): SafeParseResult<Charge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Charge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Charge' from JSON`,
  );
}

/** @internal */
export const EventCreatedAt$inboundSchema: z.ZodType<
  EventCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type EventCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const EventCreatedAt$outboundSchema: z.ZodType<
  EventCreatedAt$Outbound,
  z.ZodTypeDef,
  EventCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventCreatedAt$ {
  /** @deprecated use `EventCreatedAt$inboundSchema` instead. */
  export const inboundSchema = EventCreatedAt$inboundSchema;
  /** @deprecated use `EventCreatedAt$outboundSchema` instead. */
  export const outboundSchema = EventCreatedAt$outboundSchema;
  /** @deprecated use `EventCreatedAt$Outbound` instead. */
  export type Outbound = EventCreatedAt$Outbound;
}

export function eventCreatedAtToJSON(eventCreatedAt: EventCreatedAt): string {
  return JSON.stringify(EventCreatedAt$outboundSchema.parse(eventCreatedAt));
}

export function eventCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<EventCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventCreatedAt' from JSON`,
  );
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    intent: z.string().optional(),
    type: z.string().optional(),
    intent_request_id: z.string().optional(),
    reason: z.string().optional(),
    created_at: z.lazy(() => EventCreatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "intent_request_id": "intentRequestId",
      "created_at": "createdAt",
    });
  });

/** @internal */
export type Event$Outbound = {
  intent?: string | undefined;
  type?: string | undefined;
  intent_request_id?: string | undefined;
  reason?: string | undefined;
  created_at?: EventCreatedAt$Outbound | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  intent: z.string().optional(),
  type: z.string().optional(),
  intentRequestId: z.string().optional(),
  reason: z.string().optional(),
  createdAt: z.lazy(() => EventCreatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    intentRequestId: "intent_request_id",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}

/** @internal */
export const ActionsPerformedCreatedAt$inboundSchema: z.ZodType<
  ActionsPerformedCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ActionsPerformedCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ActionsPerformedCreatedAt$outboundSchema: z.ZodType<
  ActionsPerformedCreatedAt$Outbound,
  z.ZodTypeDef,
  ActionsPerformedCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsPerformedCreatedAt$ {
  /** @deprecated use `ActionsPerformedCreatedAt$inboundSchema` instead. */
  export const inboundSchema = ActionsPerformedCreatedAt$inboundSchema;
  /** @deprecated use `ActionsPerformedCreatedAt$outboundSchema` instead. */
  export const outboundSchema = ActionsPerformedCreatedAt$outboundSchema;
  /** @deprecated use `ActionsPerformedCreatedAt$Outbound` instead. */
  export type Outbound = ActionsPerformedCreatedAt$Outbound;
}

export function actionsPerformedCreatedAtToJSON(
  actionsPerformedCreatedAt: ActionsPerformedCreatedAt,
): string {
  return JSON.stringify(
    ActionsPerformedCreatedAt$outboundSchema.parse(actionsPerformedCreatedAt),
  );
}

export function actionsPerformedCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ActionsPerformedCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsPerformedCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsPerformedCreatedAt' from JSON`,
  );
}

/** @internal */
export const ActionsPerformedUpdatedAt$inboundSchema: z.ZodType<
  ActionsPerformedUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type ActionsPerformedUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const ActionsPerformedUpdatedAt$outboundSchema: z.ZodType<
  ActionsPerformedUpdatedAt$Outbound,
  z.ZodTypeDef,
  ActionsPerformedUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsPerformedUpdatedAt$ {
  /** @deprecated use `ActionsPerformedUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = ActionsPerformedUpdatedAt$inboundSchema;
  /** @deprecated use `ActionsPerformedUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = ActionsPerformedUpdatedAt$outboundSchema;
  /** @deprecated use `ActionsPerformedUpdatedAt$Outbound` instead. */
  export type Outbound = ActionsPerformedUpdatedAt$Outbound;
}

export function actionsPerformedUpdatedAtToJSON(
  actionsPerformedUpdatedAt: ActionsPerformedUpdatedAt,
): string {
  return JSON.stringify(
    ActionsPerformedUpdatedAt$outboundSchema.parse(actionsPerformedUpdatedAt),
  );
}

export function actionsPerformedUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<ActionsPerformedUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsPerformedUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsPerformedUpdatedAt' from JSON`,
  );
}

/** @internal */
export const ActionsPerformed$inboundSchema: z.ZodType<
  ActionsPerformed,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  kind: z.string().optional(),
  created_at: z.lazy(() => ActionsPerformedCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => ActionsPerformedUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ActionsPerformed$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  kind?: string | undefined;
  created_at?: ActionsPerformedCreatedAt$Outbound | undefined;
  updated_at?: ActionsPerformedUpdatedAt$Outbound | undefined;
};

/** @internal */
export const ActionsPerformed$outboundSchema: z.ZodType<
  ActionsPerformed$Outbound,
  z.ZodTypeDef,
  ActionsPerformed
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  kind: z.string().optional(),
  createdAt: z.lazy(() => ActionsPerformedCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => ActionsPerformedUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionsPerformed$ {
  /** @deprecated use `ActionsPerformed$inboundSchema` instead. */
  export const inboundSchema = ActionsPerformed$inboundSchema;
  /** @deprecated use `ActionsPerformed$outboundSchema` instead. */
  export const outboundSchema = ActionsPerformed$outboundSchema;
  /** @deprecated use `ActionsPerformed$Outbound` instead. */
  export type Outbound = ActionsPerformed$Outbound;
}

export function actionsPerformedToJSON(
  actionsPerformed: ActionsPerformed,
): string {
  return JSON.stringify(
    ActionsPerformed$outboundSchema.parse(actionsPerformed),
  );
}

export function actionsPerformedFromJSON(
  jsonString: string,
): SafeParseResult<ActionsPerformed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionsPerformed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionsPerformed' from JSON`,
  );
}

/** @internal */
export const PaymentMethodCreatedAt$inboundSchema: z.ZodType<
  PaymentMethodCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type PaymentMethodCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const PaymentMethodCreatedAt$outboundSchema: z.ZodType<
  PaymentMethodCreatedAt$Outbound,
  z.ZodTypeDef,
  PaymentMethodCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCreatedAt$ {
  /** @deprecated use `PaymentMethodCreatedAt$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCreatedAt$inboundSchema;
  /** @deprecated use `PaymentMethodCreatedAt$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCreatedAt$outboundSchema;
  /** @deprecated use `PaymentMethodCreatedAt$Outbound` instead. */
  export type Outbound = PaymentMethodCreatedAt$Outbound;
}

export function paymentMethodCreatedAtToJSON(
  paymentMethodCreatedAt: PaymentMethodCreatedAt,
): string {
  return JSON.stringify(
    PaymentMethodCreatedAt$outboundSchema.parse(paymentMethodCreatedAt),
  );
}

export function paymentMethodCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodCreatedAt' from JSON`,
  );
}

/** @internal */
export const PaymentMethodUpdatedAt$inboundSchema: z.ZodType<
  PaymentMethodUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type PaymentMethodUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const PaymentMethodUpdatedAt$outboundSchema: z.ZodType<
  PaymentMethodUpdatedAt$Outbound,
  z.ZodTypeDef,
  PaymentMethodUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodUpdatedAt$ {
  /** @deprecated use `PaymentMethodUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodUpdatedAt$inboundSchema;
  /** @deprecated use `PaymentMethodUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodUpdatedAt$outboundSchema;
  /** @deprecated use `PaymentMethodUpdatedAt$Outbound` instead. */
  export type Outbound = PaymentMethodUpdatedAt$Outbound;
}

export function paymentMethodUpdatedAtToJSON(
  paymentMethodUpdatedAt: PaymentMethodUpdatedAt,
): string {
  return JSON.stringify(
    PaymentMethodUpdatedAt$outboundSchema.parse(paymentMethodUpdatedAt),
  );
}

export function paymentMethodUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    attempt: z.string().optional(),
    last_four: z.string().optional(),
    kind: z.string().optional(),
    scheme: z.string().optional(),
    bin: z.string().optional(),
    expiration_month: z.string().optional(),
    expiration_year: z.string().optional(),
    created_at: z.lazy(() => PaymentMethodCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => PaymentMethodUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "last_four": "lastFour",
      "expiration_month": "expirationMonth",
      "expiration_year": "expirationYear",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$Outbound =
  {
    token?: string | undefined;
    tracker?: string | undefined;
    attempt?: string | undefined;
    last_four?: string | undefined;
    kind?: string | undefined;
    scheme?: string | undefined;
    bin?: string | undefined;
    expiration_month?: string | undefined;
    expiration_year?: string | undefined;
    created_at?: PaymentMethodCreatedAt$Outbound | undefined;
    updated_at?: PaymentMethodUpdatedAt$Outbound | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod
  > = z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    attempt: z.string().optional(),
    lastFour: z.string().optional(),
    kind: z.string().optional(),
    scheme: z.string().optional(),
    bin: z.string().optional(),
    expirationMonth: z.string().optional(),
    expirationYear: z.string().optional(),
    createdAt: z.lazy(() => PaymentMethodCreatedAt$outboundSchema).optional(),
    updatedAt: z.lazy(() => PaymentMethodUpdatedAt$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      lastFour: "last_four",
      expirationMonth: "expiration_month",
      expirationYear: "expiration_year",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethodToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod' from JSON`,
  );
}

/** @internal */
export const BillingCreatedAt$inboundSchema: z.ZodType<
  BillingCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type BillingCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const BillingCreatedAt$outboundSchema: z.ZodType<
  BillingCreatedAt$Outbound,
  z.ZodTypeDef,
  BillingCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingCreatedAt$ {
  /** @deprecated use `BillingCreatedAt$inboundSchema` instead. */
  export const inboundSchema = BillingCreatedAt$inboundSchema;
  /** @deprecated use `BillingCreatedAt$outboundSchema` instead. */
  export const outboundSchema = BillingCreatedAt$outboundSchema;
  /** @deprecated use `BillingCreatedAt$Outbound` instead. */
  export type Outbound = BillingCreatedAt$Outbound;
}

export function billingCreatedAtToJSON(
  billingCreatedAt: BillingCreatedAt,
): string {
  return JSON.stringify(
    BillingCreatedAt$outboundSchema.parse(billingCreatedAt),
  );
}

export function billingCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<BillingCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingCreatedAt' from JSON`,
  );
}

/** @internal */
export const BillingUpdatedAt$inboundSchema: z.ZodType<
  BillingUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type BillingUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const BillingUpdatedAt$outboundSchema: z.ZodType<
  BillingUpdatedAt$Outbound,
  z.ZodTypeDef,
  BillingUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingUpdatedAt$ {
  /** @deprecated use `BillingUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = BillingUpdatedAt$inboundSchema;
  /** @deprecated use `BillingUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = BillingUpdatedAt$outboundSchema;
  /** @deprecated use `BillingUpdatedAt$Outbound` instead. */
  export type Outbound = BillingUpdatedAt$Outbound;
}

export function billingUpdatedAtToJSON(
  billingUpdatedAt: BillingUpdatedAt,
): string {
  return JSON.stringify(
    BillingUpdatedAt$outboundSchema.parse(billingUpdatedAt),
  );
}

export function billingUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<BillingUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    attempt: z.string().optional(),
    street_1: z.string().optional(),
    city: z.string().optional(),
    postal_code: z.string().optional(),
    country: z.string().optional(),
    created_at: z.lazy(() => BillingCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => BillingUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "street_1": "street1",
      "postal_code": "postalCode",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$Outbound =
  {
    token?: string | undefined;
    attempt?: string | undefined;
    street_1?: string | undefined;
    city?: string | undefined;
    postal_code?: string | undefined;
    country?: string | undefined;
    created_at?: BillingCreatedAt$Outbound | undefined;
    updated_at?: BillingUpdatedAt$Outbound | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling
  > = z.object({
    token: z.string().optional(),
    attempt: z.string().optional(),
    street1: z.string().optional(),
    city: z.string().optional(),
    postalCode: z.string().optional(),
    country: z.string().optional(),
    createdAt: z.lazy(() => BillingCreatedAt$outboundSchema).optional(),
    updatedAt: z.lazy(() => BillingUpdatedAt$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      street1: "street_1",
      postalCode: "postal_code",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBillingToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBillingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling' from JSON`,
  );
}

/** @internal */
export const EnrollmentCreatedAt$inboundSchema: z.ZodType<
  EnrollmentCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type EnrollmentCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const EnrollmentCreatedAt$outboundSchema: z.ZodType<
  EnrollmentCreatedAt$Outbound,
  z.ZodTypeDef,
  EnrollmentCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentCreatedAt$ {
  /** @deprecated use `EnrollmentCreatedAt$inboundSchema` instead. */
  export const inboundSchema = EnrollmentCreatedAt$inboundSchema;
  /** @deprecated use `EnrollmentCreatedAt$outboundSchema` instead. */
  export const outboundSchema = EnrollmentCreatedAt$outboundSchema;
  /** @deprecated use `EnrollmentCreatedAt$Outbound` instead. */
  export type Outbound = EnrollmentCreatedAt$Outbound;
}

export function enrollmentCreatedAtToJSON(
  enrollmentCreatedAt: EnrollmentCreatedAt,
): string {
  return JSON.stringify(
    EnrollmentCreatedAt$outboundSchema.parse(enrollmentCreatedAt),
  );
}

export function enrollmentCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<EnrollmentCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnrollmentCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnrollmentCreatedAt' from JSON`,
  );
}

/** @internal */
export const EnrollmentUpdatedAt$inboundSchema: z.ZodType<
  EnrollmentUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type EnrollmentUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const EnrollmentUpdatedAt$outboundSchema: z.ZodType<
  EnrollmentUpdatedAt$Outbound,
  z.ZodTypeDef,
  EnrollmentUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentUpdatedAt$ {
  /** @deprecated use `EnrollmentUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = EnrollmentUpdatedAt$inboundSchema;
  /** @deprecated use `EnrollmentUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = EnrollmentUpdatedAt$outboundSchema;
  /** @deprecated use `EnrollmentUpdatedAt$Outbound` instead. */
  export type Outbound = EnrollmentUpdatedAt$Outbound;
}

export function enrollmentUpdatedAtToJSON(
  enrollmentUpdatedAt: EnrollmentUpdatedAt,
): string {
  return JSON.stringify(
    EnrollmentUpdatedAt$outboundSchema.parse(enrollmentUpdatedAt),
  );
}

export function enrollmentUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<EnrollmentUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnrollmentUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnrollmentUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Enrollment$inboundSchema: z.ZodType<
  Enrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  attempt: z.string().optional(),
  cybersource_rid: z.string().optional(),
  specification_version: z.string().optional(),
  veres_enrolled: z.string().optional(),
  eci: z.string().optional(),
  created_at: z.lazy(() => EnrollmentCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => EnrollmentUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "cybersource_rid": "cybersourceRid",
    "specification_version": "specificationVersion",
    "veres_enrolled": "veresEnrolled",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Enrollment$Outbound = {
  token?: string | undefined;
  attempt?: string | undefined;
  cybersource_rid?: string | undefined;
  specification_version?: string | undefined;
  veres_enrolled?: string | undefined;
  eci?: string | undefined;
  created_at?: EnrollmentCreatedAt$Outbound | undefined;
  updated_at?: EnrollmentUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Enrollment$outboundSchema: z.ZodType<
  Enrollment$Outbound,
  z.ZodTypeDef,
  Enrollment
> = z.object({
  token: z.string().optional(),
  attempt: z.string().optional(),
  cybersourceRid: z.string().optional(),
  specificationVersion: z.string().optional(),
  veresEnrolled: z.string().optional(),
  eci: z.string().optional(),
  createdAt: z.lazy(() => EnrollmentCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => EnrollmentUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cybersourceRid: "cybersource_rid",
    specificationVersion: "specification_version",
    veresEnrolled: "veres_enrolled",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enrollment$ {
  /** @deprecated use `Enrollment$inboundSchema` instead. */
  export const inboundSchema = Enrollment$inboundSchema;
  /** @deprecated use `Enrollment$outboundSchema` instead. */
  export const outboundSchema = Enrollment$outboundSchema;
  /** @deprecated use `Enrollment$Outbound` instead. */
  export type Outbound = Enrollment$Outbound;
}

export function enrollmentToJSON(enrollment: Enrollment): string {
  return JSON.stringify(Enrollment$outboundSchema.parse(enrollment));
}

export function enrollmentFromJSON(
  jsonString: string,
): SafeParseResult<Enrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Enrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Enrollment' from JSON`,
  );
}

/** @internal */
export const RiskCreatedAt$inboundSchema: z.ZodType<
  RiskCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type RiskCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const RiskCreatedAt$outboundSchema: z.ZodType<
  RiskCreatedAt$Outbound,
  z.ZodTypeDef,
  RiskCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RiskCreatedAt$ {
  /** @deprecated use `RiskCreatedAt$inboundSchema` instead. */
  export const inboundSchema = RiskCreatedAt$inboundSchema;
  /** @deprecated use `RiskCreatedAt$outboundSchema` instead. */
  export const outboundSchema = RiskCreatedAt$outboundSchema;
  /** @deprecated use `RiskCreatedAt$Outbound` instead. */
  export type Outbound = RiskCreatedAt$Outbound;
}

export function riskCreatedAtToJSON(riskCreatedAt: RiskCreatedAt): string {
  return JSON.stringify(RiskCreatedAt$outboundSchema.parse(riskCreatedAt));
}

export function riskCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<RiskCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RiskCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RiskCreatedAt' from JSON`,
  );
}

/** @internal */
export const RiskUpdatedAt$inboundSchema: z.ZodType<
  RiskUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type RiskUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const RiskUpdatedAt$outboundSchema: z.ZodType<
  RiskUpdatedAt$Outbound,
  z.ZodTypeDef,
  RiskUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RiskUpdatedAt$ {
  /** @deprecated use `RiskUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = RiskUpdatedAt$inboundSchema;
  /** @deprecated use `RiskUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = RiskUpdatedAt$outboundSchema;
  /** @deprecated use `RiskUpdatedAt$Outbound` instead. */
  export type Outbound = RiskUpdatedAt$Outbound;
}

export function riskUpdatedAtToJSON(riskUpdatedAt: RiskUpdatedAt): string {
  return JSON.stringify(RiskUpdatedAt$outboundSchema.parse(riskUpdatedAt));
}

export function riskUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<RiskUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RiskUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RiskUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Risk$inboundSchema: z.ZodType<Risk, z.ZodTypeDef, unknown> = z
  .object({
    token: z.string().optional(),
    attempt: z.string().optional(),
    score: z.string().optional(),
    factor_codes: z.array(z.string()).optional(),
    info_codes: z.array(z.string()).optional(),
    created_at: z.lazy(() => RiskCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => RiskUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "factor_codes": "factorCodes",
      "info_codes": "infoCodes",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Risk$Outbound = {
  token?: string | undefined;
  attempt?: string | undefined;
  score?: string | undefined;
  factor_codes?: Array<string> | undefined;
  info_codes?: Array<string> | undefined;
  created_at?: RiskCreatedAt$Outbound | undefined;
  updated_at?: RiskUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Risk$outboundSchema: z.ZodType<Risk$Outbound, z.ZodTypeDef, Risk> =
  z.object({
    token: z.string().optional(),
    attempt: z.string().optional(),
    score: z.string().optional(),
    factorCodes: z.array(z.string()).optional(),
    infoCodes: z.array(z.string()).optional(),
    createdAt: z.lazy(() => RiskCreatedAt$outboundSchema).optional(),
    updatedAt: z.lazy(() => RiskUpdatedAt$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      factorCodes: "factor_codes",
      infoCodes: "info_codes",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Risk$ {
  /** @deprecated use `Risk$inboundSchema` instead. */
  export const inboundSchema = Risk$inboundSchema;
  /** @deprecated use `Risk$outboundSchema` instead. */
  export const outboundSchema = Risk$outboundSchema;
  /** @deprecated use `Risk$Outbound` instead. */
  export type Outbound = Risk$Outbound;
}

export function riskToJSON(risk: Risk): string {
  return JSON.stringify(Risk$outboundSchema.parse(risk));
}

export function riskFromJSON(
  jsonString: string,
): SafeParseResult<Risk, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Risk$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Risk' from JSON`,
  );
}

/** @internal */
export const AuthorizationTotals$inboundSchema: z.ZodType<
  AuthorizationTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/** @internal */
export type AuthorizationTotals$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AuthorizationTotals$outboundSchema: z.ZodType<
  AuthorizationTotals$Outbound,
  z.ZodTypeDef,
  AuthorizationTotals
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationTotals$ {
  /** @deprecated use `AuthorizationTotals$inboundSchema` instead. */
  export const inboundSchema = AuthorizationTotals$inboundSchema;
  /** @deprecated use `AuthorizationTotals$outboundSchema` instead. */
  export const outboundSchema = AuthorizationTotals$outboundSchema;
  /** @deprecated use `AuthorizationTotals$Outbound` instead. */
  export type Outbound = AuthorizationTotals$Outbound;
}

export function authorizationTotalsToJSON(
  authorizationTotals: AuthorizationTotals,
): string {
  return JSON.stringify(
    AuthorizationTotals$outboundSchema.parse(authorizationTotals),
  );
}

export function authorizationTotalsFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationTotals' from JSON`,
  );
}

/** @internal */
export const AuthorizationCreatedAt$inboundSchema: z.ZodType<
  AuthorizationCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AuthorizationCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AuthorizationCreatedAt$outboundSchema: z.ZodType<
  AuthorizationCreatedAt$Outbound,
  z.ZodTypeDef,
  AuthorizationCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationCreatedAt$ {
  /** @deprecated use `AuthorizationCreatedAt$inboundSchema` instead. */
  export const inboundSchema = AuthorizationCreatedAt$inboundSchema;
  /** @deprecated use `AuthorizationCreatedAt$outboundSchema` instead. */
  export const outboundSchema = AuthorizationCreatedAt$outboundSchema;
  /** @deprecated use `AuthorizationCreatedAt$Outbound` instead. */
  export type Outbound = AuthorizationCreatedAt$Outbound;
}

export function authorizationCreatedAtToJSON(
  authorizationCreatedAt: AuthorizationCreatedAt,
): string {
  return JSON.stringify(
    AuthorizationCreatedAt$outboundSchema.parse(authorizationCreatedAt),
  );
}

export function authorizationCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationCreatedAt' from JSON`,
  );
}

/** @internal */
export const AuthorizationUpdatedAt$inboundSchema: z.ZodType<
  AuthorizationUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AuthorizationUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AuthorizationUpdatedAt$outboundSchema: z.ZodType<
  AuthorizationUpdatedAt$Outbound,
  z.ZodTypeDef,
  AuthorizationUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationUpdatedAt$ {
  /** @deprecated use `AuthorizationUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = AuthorizationUpdatedAt$inboundSchema;
  /** @deprecated use `AuthorizationUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = AuthorizationUpdatedAt$outboundSchema;
  /** @deprecated use `AuthorizationUpdatedAt$Outbound` instead. */
  export type Outbound = AuthorizationUpdatedAt$Outbound;
}

export function authorizationUpdatedAtToJSON(
  authorizationUpdatedAt: AuthorizationUpdatedAt,
): string {
  return JSON.stringify(
    AuthorizationUpdatedAt$outboundSchema.parse(authorizationUpdatedAt),
  );
}

export function authorizationUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    attempt: z.string().optional(),
    intent: z.string().optional(),
    cybersource_rid: z.string().optional(),
    totals: z.lazy(() => AuthorizationTotals$inboundSchema).optional(),
    created_at: z.lazy(() => AuthorizationCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => AuthorizationUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cybersource_rid": "cybersourceRid",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$Outbound =
  {
    token?: string | undefined;
    tracker?: string | undefined;
    attempt?: string | undefined;
    intent?: string | undefined;
    cybersource_rid?: string | undefined;
    totals?: AuthorizationTotals$Outbound | undefined;
    created_at?: AuthorizationCreatedAt$Outbound | undefined;
    updated_at?: AuthorizationUpdatedAt$Outbound | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization
  > = z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    attempt: z.string().optional(),
    intent: z.string().optional(),
    cybersourceRid: z.string().optional(),
    totals: z.lazy(() => AuthorizationTotals$outboundSchema).optional(),
    createdAt: z.lazy(() => AuthorizationCreatedAt$outboundSchema).optional(),
    updatedAt: z.lazy(() => AuthorizationUpdatedAt$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      cybersourceRid: "cybersource_rid",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorizationToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization' from JSON`,
  );
}

/** @internal */
export const AttemptCaptureTotals$inboundSchema: z.ZodType<
  AttemptCaptureTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/** @internal */
export type AttemptCaptureTotals$Outbound = {
  currency?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const AttemptCaptureTotals$outboundSchema: z.ZodType<
  AttemptCaptureTotals$Outbound,
  z.ZodTypeDef,
  AttemptCaptureTotals
> = z.object({
  currency: z.string().optional(),
  amount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCaptureTotals$ {
  /** @deprecated use `AttemptCaptureTotals$inboundSchema` instead. */
  export const inboundSchema = AttemptCaptureTotals$inboundSchema;
  /** @deprecated use `AttemptCaptureTotals$outboundSchema` instead. */
  export const outboundSchema = AttemptCaptureTotals$outboundSchema;
  /** @deprecated use `AttemptCaptureTotals$Outbound` instead. */
  export type Outbound = AttemptCaptureTotals$Outbound;
}

export function attemptCaptureTotalsToJSON(
  attemptCaptureTotals: AttemptCaptureTotals,
): string {
  return JSON.stringify(
    AttemptCaptureTotals$outboundSchema.parse(attemptCaptureTotals),
  );
}

export function attemptCaptureTotalsFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCaptureTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCaptureTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCaptureTotals' from JSON`,
  );
}

/** @internal */
export const AttemptCaptureCreatedAt$inboundSchema: z.ZodType<
  AttemptCaptureCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AttemptCaptureCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AttemptCaptureCreatedAt$outboundSchema: z.ZodType<
  AttemptCaptureCreatedAt$Outbound,
  z.ZodTypeDef,
  AttemptCaptureCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCaptureCreatedAt$ {
  /** @deprecated use `AttemptCaptureCreatedAt$inboundSchema` instead. */
  export const inboundSchema = AttemptCaptureCreatedAt$inboundSchema;
  /** @deprecated use `AttemptCaptureCreatedAt$outboundSchema` instead. */
  export const outboundSchema = AttemptCaptureCreatedAt$outboundSchema;
  /** @deprecated use `AttemptCaptureCreatedAt$Outbound` instead. */
  export type Outbound = AttemptCaptureCreatedAt$Outbound;
}

export function attemptCaptureCreatedAtToJSON(
  attemptCaptureCreatedAt: AttemptCaptureCreatedAt,
): string {
  return JSON.stringify(
    AttemptCaptureCreatedAt$outboundSchema.parse(attemptCaptureCreatedAt),
  );
}

export function attemptCaptureCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCaptureCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCaptureCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCaptureCreatedAt' from JSON`,
  );
}

/** @internal */
export const AttemptCaptureUpdatedAt$inboundSchema: z.ZodType<
  AttemptCaptureUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AttemptCaptureUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AttemptCaptureUpdatedAt$outboundSchema: z.ZodType<
  AttemptCaptureUpdatedAt$Outbound,
  z.ZodTypeDef,
  AttemptCaptureUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCaptureUpdatedAt$ {
  /** @deprecated use `AttemptCaptureUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = AttemptCaptureUpdatedAt$inboundSchema;
  /** @deprecated use `AttemptCaptureUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = AttemptCaptureUpdatedAt$outboundSchema;
  /** @deprecated use `AttemptCaptureUpdatedAt$Outbound` instead. */
  export type Outbound = AttemptCaptureUpdatedAt$Outbound;
}

export function attemptCaptureUpdatedAtToJSON(
  attemptCaptureUpdatedAt: AttemptCaptureUpdatedAt,
): string {
  return JSON.stringify(
    AttemptCaptureUpdatedAt$outboundSchema.parse(attemptCaptureUpdatedAt),
  );
}

export function attemptCaptureUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCaptureUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCaptureUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCaptureUpdatedAt' from JSON`,
  );
}

/** @internal */
export const AttemptCapture$inboundSchema: z.ZodType<
  AttemptCapture,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  intent: z.string().optional(),
  cybersource_rid: z.string().optional(),
  is_voidable: z.boolean().optional(),
  kind: z.string().optional(),
  totals: z.lazy(() => AttemptCaptureTotals$inboundSchema).optional(),
  created_at: z.lazy(() => AttemptCaptureCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => AttemptCaptureUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "cybersource_rid": "cybersourceRid",
    "is_voidable": "isVoidable",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AttemptCapture$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  attempt?: string | undefined;
  intent?: string | undefined;
  cybersource_rid?: string | undefined;
  is_voidable?: boolean | undefined;
  kind?: string | undefined;
  totals?: AttemptCaptureTotals$Outbound | undefined;
  created_at?: AttemptCaptureCreatedAt$Outbound | undefined;
  updated_at?: AttemptCaptureUpdatedAt$Outbound | undefined;
};

/** @internal */
export const AttemptCapture$outboundSchema: z.ZodType<
  AttemptCapture$Outbound,
  z.ZodTypeDef,
  AttemptCapture
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  attempt: z.string().optional(),
  intent: z.string().optional(),
  cybersourceRid: z.string().optional(),
  isVoidable: z.boolean().optional(),
  kind: z.string().optional(),
  totals: z.lazy(() => AttemptCaptureTotals$outboundSchema).optional(),
  createdAt: z.lazy(() => AttemptCaptureCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => AttemptCaptureUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    cybersourceRid: "cybersource_rid",
    isVoidable: "is_voidable",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCapture$ {
  /** @deprecated use `AttemptCapture$inboundSchema` instead. */
  export const inboundSchema = AttemptCapture$inboundSchema;
  /** @deprecated use `AttemptCapture$outboundSchema` instead. */
  export const outboundSchema = AttemptCapture$outboundSchema;
  /** @deprecated use `AttemptCapture$Outbound` instead. */
  export type Outbound = AttemptCapture$Outbound;
}

export function attemptCaptureToJSON(attemptCapture: AttemptCapture): string {
  return JSON.stringify(AttemptCapture$outboundSchema.parse(attemptCapture));
}

export function attemptCaptureFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCapture, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCapture$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCapture' from JSON`,
  );
}

/** @internal */
export const AttemptCreatedAt$inboundSchema: z.ZodType<
  AttemptCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AttemptCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AttemptCreatedAt$outboundSchema: z.ZodType<
  AttemptCreatedAt$Outbound,
  z.ZodTypeDef,
  AttemptCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCreatedAt$ {
  /** @deprecated use `AttemptCreatedAt$inboundSchema` instead. */
  export const inboundSchema = AttemptCreatedAt$inboundSchema;
  /** @deprecated use `AttemptCreatedAt$outboundSchema` instead. */
  export const outboundSchema = AttemptCreatedAt$outboundSchema;
  /** @deprecated use `AttemptCreatedAt$Outbound` instead. */
  export type Outbound = AttemptCreatedAt$Outbound;
}

export function attemptCreatedAtToJSON(
  attemptCreatedAt: AttemptCreatedAt,
): string {
  return JSON.stringify(
    AttemptCreatedAt$outboundSchema.parse(attemptCreatedAt),
  );
}

export function attemptCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCreatedAt' from JSON`,
  );
}

/** @internal */
export const AttemptUpdatedAt$inboundSchema: z.ZodType<
  AttemptUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type AttemptUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const AttemptUpdatedAt$outboundSchema: z.ZodType<
  AttemptUpdatedAt$Outbound,
  z.ZodTypeDef,
  AttemptUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptUpdatedAt$ {
  /** @deprecated use `AttemptUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = AttemptUpdatedAt$inboundSchema;
  /** @deprecated use `AttemptUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = AttemptUpdatedAt$outboundSchema;
  /** @deprecated use `AttemptUpdatedAt$Outbound` instead. */
  export type Outbound = AttemptUpdatedAt$Outbound;
}

export function attemptUpdatedAtToJSON(
  attemptUpdatedAt: AttemptUpdatedAt,
): string {
  return JSON.stringify(
    AttemptUpdatedAt$outboundSchema.parse(attemptUpdatedAt),
  );
}

export function attemptUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<AttemptUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptUpdatedAt' from JSON`,
  );
}

/** @internal */
export const AttemptCustomer$inboundSchema: z.ZodType<
  AttemptCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type AttemptCustomer$Outbound = {
  token?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
};

/** @internal */
export const AttemptCustomer$outboundSchema: z.ZodType<
  AttemptCustomer$Outbound,
  z.ZodTypeDef,
  AttemptCustomer
> = z.object({
  token: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttemptCustomer$ {
  /** @deprecated use `AttemptCustomer$inboundSchema` instead. */
  export const inboundSchema = AttemptCustomer$inboundSchema;
  /** @deprecated use `AttemptCustomer$outboundSchema` instead. */
  export const outboundSchema = AttemptCustomer$outboundSchema;
  /** @deprecated use `AttemptCustomer$Outbound` instead. */
  export type Outbound = AttemptCustomer$Outbound;
}

export function attemptCustomerToJSON(
  attemptCustomer: AttemptCustomer,
): string {
  return JSON.stringify(AttemptCustomer$outboundSchema.parse(attemptCustomer));
}

export function attemptCustomerFromJSON(
  jsonString: string,
): SafeParseResult<AttemptCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttemptCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttemptCustomer' from JSON`,
  );
}

/** @internal */
export const Attempt$inboundSchema: z.ZodType<Attempt, z.ZodTypeDef, unknown> =
  z.object({
    token: z.string().optional(),
    tracker: z.string().optional(),
    intent: z.string().optional(),
    idempotency_key: z.string().optional(),
    kind: z.number().int().optional(),
    actions_performed: z.array(z.lazy(() => ActionsPerformed$inboundSchema))
      .optional(),
    payment_method: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$inboundSchema
    ).optional(),
    billing: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$inboundSchema
    ).optional(),
    enrollment: z.lazy(() => Enrollment$inboundSchema).optional(),
    risk: z.lazy(() => Risk$inboundSchema).optional(),
    authorization: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$inboundSchema
    ).optional(),
    capture: z.lazy(() => AttemptCapture$inboundSchema).optional(),
    is_success: z.boolean().optional(),
    created_at: z.lazy(() => AttemptCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => AttemptUpdatedAt$inboundSchema).optional(),
    mode: z.string().optional(),
    entry_mode: z.string().optional(),
    customer: z.lazy(() => AttemptCustomer$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency_key": "idempotencyKey",
      "actions_performed": "actionsPerformed",
      "payment_method": "paymentMethod",
      "is_success": "isSuccess",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "entry_mode": "entryMode",
    });
  });

/** @internal */
export type Attempt$Outbound = {
  token?: string | undefined;
  tracker?: string | undefined;
  intent?: string | undefined;
  idempotency_key?: string | undefined;
  kind?: number | undefined;
  actions_performed?: Array<ActionsPerformed$Outbound> | undefined;
  payment_method?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$Outbound
    | undefined;
  billing?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$Outbound
    | undefined;
  enrollment?: Enrollment$Outbound | undefined;
  risk?: Risk$Outbound | undefined;
  authorization?:
    | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$Outbound
    | undefined;
  capture?: AttemptCapture$Outbound | undefined;
  is_success?: boolean | undefined;
  created_at?: AttemptCreatedAt$Outbound | undefined;
  updated_at?: AttemptUpdatedAt$Outbound | undefined;
  mode?: string | undefined;
  entry_mode?: string | undefined;
  customer?: AttemptCustomer$Outbound | undefined;
};

/** @internal */
export const Attempt$outboundSchema: z.ZodType<
  Attempt$Outbound,
  z.ZodTypeDef,
  Attempt
> = z.object({
  token: z.string().optional(),
  tracker: z.string().optional(),
  intent: z.string().optional(),
  idempotencyKey: z.string().optional(),
  kind: z.number().int().optional(),
  actionsPerformed: z.array(z.lazy(() => ActionsPerformed$outboundSchema))
    .optional(),
  paymentMethod: z.lazy(() =>
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPaymentMethod$outboundSchema
  ).optional(),
  billing: z.lazy(() =>
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcBilling$outboundSchema
  ).optional(),
  enrollment: z.lazy(() => Enrollment$outboundSchema).optional(),
  risk: z.lazy(() => Risk$outboundSchema).optional(),
  authorization: z.lazy(() =>
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcAuthorization$outboundSchema
  ).optional(),
  capture: z.lazy(() => AttemptCapture$outboundSchema).optional(),
  isSuccess: z.boolean().optional(),
  createdAt: z.lazy(() => AttemptCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => AttemptUpdatedAt$outboundSchema).optional(),
  mode: z.string().optional(),
  entryMode: z.string().optional(),
  customer: z.lazy(() => AttemptCustomer$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency_key",
    actionsPerformed: "actions_performed",
    paymentMethod: "payment_method",
    isSuccess: "is_success",
    createdAt: "created_at",
    updatedAt: "updated_at",
    entryMode: "entry_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attempt$ {
  /** @deprecated use `Attempt$inboundSchema` instead. */
  export const inboundSchema = Attempt$inboundSchema;
  /** @deprecated use `Attempt$outboundSchema` instead. */
  export const outboundSchema = Attempt$outboundSchema;
  /** @deprecated use `Attempt$Outbound` instead. */
  export type Outbound = Attempt$Outbound;
}

export function attemptToJSON(attempt: Attempt): string {
  return JSON.stringify(Attempt$outboundSchema.parse(attempt));
}

export function attemptFromJSON(
  jsonString: string,
): SafeParseResult<Attempt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attempt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attempt' from JSON`,
  );
}

/** @internal */
export const LocationCreatedAt$inboundSchema: z.ZodType<
  LocationCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type LocationCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const LocationCreatedAt$outboundSchema: z.ZodType<
  LocationCreatedAt$Outbound,
  z.ZodTypeDef,
  LocationCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationCreatedAt$ {
  /** @deprecated use `LocationCreatedAt$inboundSchema` instead. */
  export const inboundSchema = LocationCreatedAt$inboundSchema;
  /** @deprecated use `LocationCreatedAt$outboundSchema` instead. */
  export const outboundSchema = LocationCreatedAt$outboundSchema;
  /** @deprecated use `LocationCreatedAt$Outbound` instead. */
  export type Outbound = LocationCreatedAt$Outbound;
}

export function locationCreatedAtToJSON(
  locationCreatedAt: LocationCreatedAt,
): string {
  return JSON.stringify(
    LocationCreatedAt$outboundSchema.parse(locationCreatedAt),
  );
}

export function locationCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<LocationCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationCreatedAt' from JSON`,
  );
}

/** @internal */
export const LocationUpdatedAt$inboundSchema: z.ZodType<
  LocationUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type LocationUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const LocationUpdatedAt$outboundSchema: z.ZodType<
  LocationUpdatedAt$Outbound,
  z.ZodTypeDef,
  LocationUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationUpdatedAt$ {
  /** @deprecated use `LocationUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = LocationUpdatedAt$inboundSchema;
  /** @deprecated use `LocationUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = LocationUpdatedAt$outboundSchema;
  /** @deprecated use `LocationUpdatedAt$Outbound` instead. */
  export type Outbound = LocationUpdatedAt$Outbound;
}

export function locationUpdatedAtToJSON(
  locationUpdatedAt: LocationUpdatedAt,
): string {
  return JSON.stringify(
    LocationUpdatedAt$outboundSchema.parse(locationUpdatedAt),
  );
}

export function locationUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<LocationUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LocationUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LocationUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  tracker: z.string().optional(),
  token: z.string().optional(),
  ip_address: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  region: z.string().optional(),
  created_at: z.lazy(() => LocationCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => LocationUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ip_address": "ipAddress",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Location$Outbound = {
  tracker?: string | undefined;
  token?: string | undefined;
  ip_address?: string | undefined;
  city?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  region?: string | undefined;
  created_at?: LocationCreatedAt$Outbound | undefined;
  updated_at?: LocationUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  tracker: z.string().optional(),
  token: z.string().optional(),
  ipAddress: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  region: z.string().optional(),
  createdAt: z.lazy(() => LocationCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => LocationUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    ipAddress: "ip_address",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

export function locationToJSON(location: Location): string {
  return JSON.stringify(Location$outboundSchema.parse(location));
}

export function locationFromJSON(
  jsonString: string,
): SafeParseResult<Location, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Location$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Location' from JSON`,
  );
}

/** @internal */
export const DeviceCreatedAt$inboundSchema: z.ZodType<
  DeviceCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type DeviceCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const DeviceCreatedAt$outboundSchema: z.ZodType<
  DeviceCreatedAt$Outbound,
  z.ZodTypeDef,
  DeviceCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceCreatedAt$ {
  /** @deprecated use `DeviceCreatedAt$inboundSchema` instead. */
  export const inboundSchema = DeviceCreatedAt$inboundSchema;
  /** @deprecated use `DeviceCreatedAt$outboundSchema` instead. */
  export const outboundSchema = DeviceCreatedAt$outboundSchema;
  /** @deprecated use `DeviceCreatedAt$Outbound` instead. */
  export type Outbound = DeviceCreatedAt$Outbound;
}

export function deviceCreatedAtToJSON(
  deviceCreatedAt: DeviceCreatedAt,
): string {
  return JSON.stringify(DeviceCreatedAt$outboundSchema.parse(deviceCreatedAt));
}

export function deviceCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<DeviceCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceCreatedAt' from JSON`,
  );
}

/** @internal */
export const DeviceUpdatedAt$inboundSchema: z.ZodType<
  DeviceUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type DeviceUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const DeviceUpdatedAt$outboundSchema: z.ZodType<
  DeviceUpdatedAt$Outbound,
  z.ZodTypeDef,
  DeviceUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceUpdatedAt$ {
  /** @deprecated use `DeviceUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = DeviceUpdatedAt$inboundSchema;
  /** @deprecated use `DeviceUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = DeviceUpdatedAt$outboundSchema;
  /** @deprecated use `DeviceUpdatedAt$Outbound` instead. */
  export type Outbound = DeviceUpdatedAt$Outbound;
}

export function deviceUpdatedAtToJSON(
  deviceUpdatedAt: DeviceUpdatedAt,
): string {
  return JSON.stringify(DeviceUpdatedAt$outboundSchema.parse(deviceUpdatedAt));
}

export function deviceUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<DeviceUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceUpdatedAt' from JSON`,
  );
}

/** @internal */
export const Device$inboundSchema: z.ZodType<Device, z.ZodTypeDef, unknown> = z
  .object({
    tracker: z.string().optional(),
    token: z.string().optional(),
    user_agent: z.string().optional(),
    entity: z.string().optional(),
    browser: z.string().optional(),
    browser_version: z.string().optional(),
    device: z.string().optional(),
    device_type: z.string().optional(),
    platform: z.string().optional(),
    platform_icon: z.string().optional(),
    created_at: z.lazy(() => DeviceCreatedAt$inboundSchema).optional(),
    updated_at: z.lazy(() => DeviceUpdatedAt$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_agent": "userAgent",
      "browser_version": "browserVersion",
      "device_type": "deviceType",
      "platform_icon": "platformIcon",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Device$Outbound = {
  tracker?: string | undefined;
  token?: string | undefined;
  user_agent?: string | undefined;
  entity?: string | undefined;
  browser?: string | undefined;
  browser_version?: string | undefined;
  device?: string | undefined;
  device_type?: string | undefined;
  platform?: string | undefined;
  platform_icon?: string | undefined;
  created_at?: DeviceCreatedAt$Outbound | undefined;
  updated_at?: DeviceUpdatedAt$Outbound | undefined;
};

/** @internal */
export const Device$outboundSchema: z.ZodType<
  Device$Outbound,
  z.ZodTypeDef,
  Device
> = z.object({
  tracker: z.string().optional(),
  token: z.string().optional(),
  userAgent: z.string().optional(),
  entity: z.string().optional(),
  browser: z.string().optional(),
  browserVersion: z.string().optional(),
  device: z.string().optional(),
  deviceType: z.string().optional(),
  platform: z.string().optional(),
  platformIcon: z.string().optional(),
  createdAt: z.lazy(() => DeviceCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => DeviceUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    userAgent: "user_agent",
    browserVersion: "browser_version",
    deviceType: "device_type",
    platformIcon: "platform_icon",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Device$ {
  /** @deprecated use `Device$inboundSchema` instead. */
  export const inboundSchema = Device$inboundSchema;
  /** @deprecated use `Device$outboundSchema` instead. */
  export const outboundSchema = Device$outboundSchema;
  /** @deprecated use `Device$Outbound` instead. */
  export type Outbound = Device$Outbound;
}

export function deviceToJSON(device: Device): string {
  return JSON.stringify(Device$outboundSchema.parse(device));
}

export function deviceFromJSON(
  jsonString: string,
): SafeParseResult<Device, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Device$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Device' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt,
    z.ZodTypeDef,
    unknown
  > = z.object({
    seconds: z.number().int().optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$Outbound =
  {
    seconds?: number | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt
  > = z.object({
    seconds: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAtToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt,
    z.ZodTypeDef,
    unknown
  > = z.object({
    seconds: z.number().int().optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$Outbound =
  {
    seconds?: number | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt
  > = z.object({
    seconds: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAtToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string().optional(),
    environment: z.string().optional(),
    state: z.string().optional(),
    intent: z.string().optional(),
    mode: z.string().optional(),
    entry_mode: z.string().optional(),
    metadata: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$inboundSchema
    ).optional(),
    client: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$inboundSchema
    ).optional(),
    customer: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$inboundSchema
    ).optional(),
    next_actions: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$inboundSchema
    ).optional(),
    purchase_totals: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$inboundSchema
    ).optional(),
    charge: z.lazy(() => Charge$inboundSchema).optional(),
    events: z.array(z.lazy(() => Event$inboundSchema)).optional(),
    attempts: z.array(z.lazy(() => Attempt$inboundSchema)).optional(),
    location: z.lazy(() => Location$inboundSchema).optional(),
    device: z.lazy(() => Device$inboundSchema).optional(),
    created_at: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$inboundSchema
    ).optional(),
    updated_at: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "entry_mode": "entryMode",
      "next_actions": "nextActions",
      "purchase_totals": "purchaseTotals",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$Outbound =
  {
    token?: string | undefined;
    environment?: string | undefined;
    state?: string | undefined;
    intent?: string | undefined;
    mode?: string | undefined;
    entry_mode?: string | undefined;
    metadata?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$Outbound
      | undefined;
    client?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$Outbound
      | undefined;
    customer?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$Outbound
      | undefined;
    next_actions?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$Outbound
      | undefined;
    purchase_totals?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$Outbound
      | undefined;
    charge?: Charge$Outbound | undefined;
    events?: Array<Event$Outbound> | undefined;
    attempts?: Array<Attempt$Outbound> | undefined;
    location?: Location$Outbound | undefined;
    device?: Device$Outbound | undefined;
    created_at?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$Outbound
      | undefined;
    updated_at?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$Outbound
      | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData
  > = z.object({
    token: z.string().optional(),
    environment: z.string().optional(),
    state: z.string().optional(),
    intent: z.string().optional(),
    mode: z.string().optional(),
    entryMode: z.string().optional(),
    metadata: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcMetadata$outboundSchema
    ).optional(),
    client: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcClient$outboundSchema
    ).optional(),
    customer: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCustomer$outboundSchema
    ).optional(),
    nextActions: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcNextActions$outboundSchema
    ).optional(),
    purchaseTotals: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcPurchaseTotals$outboundSchema
    ).optional(),
    charge: z.lazy(() => Charge$outboundSchema).optional(),
    events: z.array(z.lazy(() => Event$outboundSchema)).optional(),
    attempts: z.array(z.lazy(() => Attempt$outboundSchema)).optional(),
    location: z.lazy(() => Location$outboundSchema).optional(),
    device: z.lazy(() => Device$outboundSchema).optional(),
    createdAt: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcCreatedAt$outboundSchema
    ).optional(),
    updatedAt: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcUpdatedAt$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      entryMode: "entry_mode",
      nextActions: "next_actions",
      purchaseTotals: "purchase_totals",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcDataToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$outboundSchema
      .parse(getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ok: z.boolean().optional(),
    data: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$Outbound =
  {
    ok?: boolean | undefined;
    data?:
      | GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$Outbound
      | undefined;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody
  > = z.object({
    ok: z.boolean().optional(),
    data: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcData$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBodyToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody' from JSON`,
  );
}

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$inboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result:
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$Outbound;
  };

/** @internal */
export const GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$outboundSchema:
  z.ZodType<
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$Outbound,
    z.ZodTypeDef,
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$ {
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$inboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$outboundSchema;
  /** @deprecated use `GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$Outbound` instead. */
  export type Outbound =
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$Outbound;
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseToJSON(
  getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse:
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse,
): string {
  return JSON.stringify(
    GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$outboundSchema
      .parse(
        getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse,
      ),
  );
}

export function getReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetReporterApiV1PaymentsTrackF865abdd3a61484280001cffa38f1fbcResponse' from JSON`,
  );
}
