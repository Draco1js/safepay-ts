/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetInvoiceQuickLinksV1Request = {
  /**
   * The page to search for. Page serves as an offset counter starting with 1
   */
  page?: number | undefined;
  /**
   * How many results to return per page. A limit of 10 will return 10 Quick Links per page
   */
  limit?: number | undefined;
  /**
   * One of EMAIL or MANUAL
   */
  workflow?: string | undefined;
};

export type GetInvoiceQuickLinksV1Metadatum = {
  id?: string | undefined;
  quickLinkId?: string | undefined;
  recipientViewUrl?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetInvoiceQuickLinksV1List = {
  id?: string | undefined;
  merchantId?: string | undefined;
  number?: string | undefined;
  status?: string | undefined;
  note?: string | undefined;
  metadata?: Array<GetInvoiceQuickLinksV1Metadatum> | undefined;
  payment?: Array<any> | undefined;
  recipients?: Array<any> | undefined;
  total?: number | undefined;
  currency?: string | undefined;
  workflow?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetInvoiceQuickLinksV1Data = {
  count?: number | undefined;
  list?: Array<GetInvoiceQuickLinksV1List> | undefined;
};

/**
 * 200
 */
export type GetInvoiceQuickLinksV1ResponseBody = {
  data?: GetInvoiceQuickLinksV1Data | undefined;
  status?: models.Status | undefined;
};

export type GetInvoiceQuickLinksV1Response = {
  headers: { [k: string]: Array<string> };
  result: GetInvoiceQuickLinksV1ResponseBody;
};

/** @internal */
export const GetInvoiceQuickLinksV1Request$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  limit: z.number().int().optional(),
  workflow: z.string().optional(),
});

/** @internal */
export type GetInvoiceQuickLinksV1Request$Outbound = {
  page?: number | undefined;
  limit?: number | undefined;
  workflow?: string | undefined;
};

/** @internal */
export const GetInvoiceQuickLinksV1Request$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Request$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1Request
> = z.object({
  page: z.number().int().optional(),
  limit: z.number().int().optional(),
  workflow: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1Request$ {
  /** @deprecated use `GetInvoiceQuickLinksV1Request$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1Request$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Request$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceQuickLinksV1Request$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Request$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1Request$Outbound;
}

export function getInvoiceQuickLinksV1RequestToJSON(
  getInvoiceQuickLinksV1Request: GetInvoiceQuickLinksV1Request,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1Request$outboundSchema.parse(
      getInvoiceQuickLinksV1Request,
    ),
  );
}

export function getInvoiceQuickLinksV1RequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceQuickLinksV1Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1Request' from JSON`,
  );
}

/** @internal */
export const GetInvoiceQuickLinksV1Metadatum$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Metadatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  quick_link_id: z.string().optional(),
  recipient_view_url: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "quick_link_id": "quickLinkId",
    "recipient_view_url": "recipientViewUrl",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetInvoiceQuickLinksV1Metadatum$Outbound = {
  id?: string | undefined;
  quick_link_id?: string | undefined;
  recipient_view_url?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetInvoiceQuickLinksV1Metadatum$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Metadatum$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1Metadatum
> = z.object({
  id: z.string().optional(),
  quickLinkId: z.string().optional(),
  recipientViewUrl: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    quickLinkId: "quick_link_id",
    recipientViewUrl: "recipient_view_url",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1Metadatum$ {
  /** @deprecated use `GetInvoiceQuickLinksV1Metadatum$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1Metadatum$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Metadatum$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceQuickLinksV1Metadatum$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Metadatum$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1Metadatum$Outbound;
}

export function getInvoiceQuickLinksV1MetadatumToJSON(
  getInvoiceQuickLinksV1Metadatum: GetInvoiceQuickLinksV1Metadatum,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1Metadatum$outboundSchema.parse(
      getInvoiceQuickLinksV1Metadatum,
    ),
  );
}

export function getInvoiceQuickLinksV1MetadatumFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1Metadatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceQuickLinksV1Metadatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1Metadatum' from JSON`,
  );
}

/** @internal */
export const GetInvoiceQuickLinksV1List$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1List,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  merchant_id: z.string().optional(),
  number: z.string().optional(),
  status: z.string().optional(),
  note: z.string().optional(),
  metadata: z.array(z.lazy(() => GetInvoiceQuickLinksV1Metadatum$inboundSchema))
    .optional(),
  payment: z.array(z.any()).optional(),
  recipients: z.array(z.any()).optional(),
  total: z.number().int().optional(),
  currency: z.string().optional(),
  workflow: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_id": "merchantId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetInvoiceQuickLinksV1List$Outbound = {
  id?: string | undefined;
  merchant_id?: string | undefined;
  number?: string | undefined;
  status?: string | undefined;
  note?: string | undefined;
  metadata?: Array<GetInvoiceQuickLinksV1Metadatum$Outbound> | undefined;
  payment?: Array<any> | undefined;
  recipients?: Array<any> | undefined;
  total?: number | undefined;
  currency?: string | undefined;
  workflow?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetInvoiceQuickLinksV1List$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1List$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1List
> = z.object({
  id: z.string().optional(),
  merchantId: z.string().optional(),
  number: z.string().optional(),
  status: z.string().optional(),
  note: z.string().optional(),
  metadata: z.array(
    z.lazy(() => GetInvoiceQuickLinksV1Metadatum$outboundSchema),
  ).optional(),
  payment: z.array(z.any()).optional(),
  recipients: z.array(z.any()).optional(),
  total: z.number().int().optional(),
  currency: z.string().optional(),
  workflow: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    merchantId: "merchant_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1List$ {
  /** @deprecated use `GetInvoiceQuickLinksV1List$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1List$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1List$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceQuickLinksV1List$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1List$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1List$Outbound;
}

export function getInvoiceQuickLinksV1ListToJSON(
  getInvoiceQuickLinksV1List: GetInvoiceQuickLinksV1List,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1List$outboundSchema.parse(getInvoiceQuickLinksV1List),
  );
}

export function getInvoiceQuickLinksV1ListFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1List, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceQuickLinksV1List$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1List' from JSON`,
  );
}

/** @internal */
export const GetInvoiceQuickLinksV1Data$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => GetInvoiceQuickLinksV1List$inboundSchema))
    .optional(),
});

/** @internal */
export type GetInvoiceQuickLinksV1Data$Outbound = {
  count?: number | undefined;
  list?: Array<GetInvoiceQuickLinksV1List$Outbound> | undefined;
};

/** @internal */
export const GetInvoiceQuickLinksV1Data$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Data$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1Data
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => GetInvoiceQuickLinksV1List$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1Data$ {
  /** @deprecated use `GetInvoiceQuickLinksV1Data$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1Data$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Data$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceQuickLinksV1Data$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Data$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1Data$Outbound;
}

export function getInvoiceQuickLinksV1DataToJSON(
  getInvoiceQuickLinksV1Data: GetInvoiceQuickLinksV1Data,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1Data$outboundSchema.parse(getInvoiceQuickLinksV1Data),
  );
}

export function getInvoiceQuickLinksV1DataFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceQuickLinksV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1Data' from JSON`,
  );
}

/** @internal */
export const GetInvoiceQuickLinksV1ResponseBody$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetInvoiceQuickLinksV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetInvoiceQuickLinksV1ResponseBody$Outbound = {
  data?: GetInvoiceQuickLinksV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetInvoiceQuickLinksV1ResponseBody$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1ResponseBody$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1ResponseBody
> = z.object({
  data: z.lazy(() => GetInvoiceQuickLinksV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1ResponseBody$ {
  /** @deprecated use `GetInvoiceQuickLinksV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1ResponseBody$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetInvoiceQuickLinksV1ResponseBody$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1ResponseBody$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1ResponseBody$Outbound;
}

export function getInvoiceQuickLinksV1ResponseBodyToJSON(
  getInvoiceQuickLinksV1ResponseBody: GetInvoiceQuickLinksV1ResponseBody,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1ResponseBody$outboundSchema.parse(
      getInvoiceQuickLinksV1ResponseBody,
    ),
  );
}

export function getInvoiceQuickLinksV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetInvoiceQuickLinksV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetInvoiceQuickLinksV1Response$inboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetInvoiceQuickLinksV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetInvoiceQuickLinksV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetInvoiceQuickLinksV1ResponseBody$Outbound;
};

/** @internal */
export const GetInvoiceQuickLinksV1Response$outboundSchema: z.ZodType<
  GetInvoiceQuickLinksV1Response$Outbound,
  z.ZodTypeDef,
  GetInvoiceQuickLinksV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetInvoiceQuickLinksV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceQuickLinksV1Response$ {
  /** @deprecated use `GetInvoiceQuickLinksV1Response$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceQuickLinksV1Response$inboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Response$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceQuickLinksV1Response$outboundSchema;
  /** @deprecated use `GetInvoiceQuickLinksV1Response$Outbound` instead. */
  export type Outbound = GetInvoiceQuickLinksV1Response$Outbound;
}

export function getInvoiceQuickLinksV1ResponseToJSON(
  getInvoiceQuickLinksV1Response: GetInvoiceQuickLinksV1Response,
): string {
  return JSON.stringify(
    GetInvoiceQuickLinksV1Response$outboundSchema.parse(
      getInvoiceQuickLinksV1Response,
    ),
  );
}

export function getInvoiceQuickLinksV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceQuickLinksV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceQuickLinksV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceQuickLinksV1Response' from JSON`,
  );
}
