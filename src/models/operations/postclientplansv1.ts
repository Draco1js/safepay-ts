/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostClientPlansV1Request = {
  amount?: string | undefined;
  currency?: string | undefined;
  interval?: string | undefined;
  type?: string | undefined;
  intervalCount?: number | undefined;
  product?: string | undefined;
  active?: boolean | undefined;
};

export type PostClientPlansV1Data = {
  requestId?: string | undefined;
  planId?: string | undefined;
};

/**
 * 200
 */
export type PostClientPlansV1ResponseBody = {
  data?: PostClientPlansV1Data | undefined;
  status?: models.Status | undefined;
};

export type PostClientPlansV1Response = {
  headers: { [k: string]: Array<string> };
  result: PostClientPlansV1ResponseBody;
};

/** @internal */
export const PostClientPlansV1Request$inboundSchema: z.ZodType<
  PostClientPlansV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  currency: z.string().optional(),
  interval: z.string().optional(),
  type: z.string().optional(),
  interval_count: z.number().int().optional(),
  product: z.string().optional(),
  active: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "interval_count": "intervalCount",
  });
});

/** @internal */
export type PostClientPlansV1Request$Outbound = {
  amount?: string | undefined;
  currency?: string | undefined;
  interval?: string | undefined;
  type?: string | undefined;
  interval_count?: number | undefined;
  product?: string | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const PostClientPlansV1Request$outboundSchema: z.ZodType<
  PostClientPlansV1Request$Outbound,
  z.ZodTypeDef,
  PostClientPlansV1Request
> = z.object({
  amount: z.string().optional(),
  currency: z.string().optional(),
  interval: z.string().optional(),
  type: z.string().optional(),
  intervalCount: z.number().int().optional(),
  product: z.string().optional(),
  active: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    intervalCount: "interval_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPlansV1Request$ {
  /** @deprecated use `PostClientPlansV1Request$inboundSchema` instead. */
  export const inboundSchema = PostClientPlansV1Request$inboundSchema;
  /** @deprecated use `PostClientPlansV1Request$outboundSchema` instead. */
  export const outboundSchema = PostClientPlansV1Request$outboundSchema;
  /** @deprecated use `PostClientPlansV1Request$Outbound` instead. */
  export type Outbound = PostClientPlansV1Request$Outbound;
}

export function postClientPlansV1RequestToJSON(
  postClientPlansV1Request: PostClientPlansV1Request,
): string {
  return JSON.stringify(
    PostClientPlansV1Request$outboundSchema.parse(postClientPlansV1Request),
  );
}

export function postClientPlansV1RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPlansV1Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPlansV1Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPlansV1Request' from JSON`,
  );
}

/** @internal */
export const PostClientPlansV1Data$inboundSchema: z.ZodType<
  PostClientPlansV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  plan_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "plan_id": "planId",
  });
});

/** @internal */
export type PostClientPlansV1Data$Outbound = {
  request_id?: string | undefined;
  plan_id?: string | undefined;
};

/** @internal */
export const PostClientPlansV1Data$outboundSchema: z.ZodType<
  PostClientPlansV1Data$Outbound,
  z.ZodTypeDef,
  PostClientPlansV1Data
> = z.object({
  requestId: z.string().optional(),
  planId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    planId: "plan_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPlansV1Data$ {
  /** @deprecated use `PostClientPlansV1Data$inboundSchema` instead. */
  export const inboundSchema = PostClientPlansV1Data$inboundSchema;
  /** @deprecated use `PostClientPlansV1Data$outboundSchema` instead. */
  export const outboundSchema = PostClientPlansV1Data$outboundSchema;
  /** @deprecated use `PostClientPlansV1Data$Outbound` instead. */
  export type Outbound = PostClientPlansV1Data$Outbound;
}

export function postClientPlansV1DataToJSON(
  postClientPlansV1Data: PostClientPlansV1Data,
): string {
  return JSON.stringify(
    PostClientPlansV1Data$outboundSchema.parse(postClientPlansV1Data),
  );
}

export function postClientPlansV1DataFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPlansV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPlansV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPlansV1Data' from JSON`,
  );
}

/** @internal */
export const PostClientPlansV1ResponseBody$inboundSchema: z.ZodType<
  PostClientPlansV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostClientPlansV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostClientPlansV1ResponseBody$Outbound = {
  data?: PostClientPlansV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostClientPlansV1ResponseBody$outboundSchema: z.ZodType<
  PostClientPlansV1ResponseBody$Outbound,
  z.ZodTypeDef,
  PostClientPlansV1ResponseBody
> = z.object({
  data: z.lazy(() => PostClientPlansV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPlansV1ResponseBody$ {
  /** @deprecated use `PostClientPlansV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostClientPlansV1ResponseBody$inboundSchema;
  /** @deprecated use `PostClientPlansV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostClientPlansV1ResponseBody$outboundSchema;
  /** @deprecated use `PostClientPlansV1ResponseBody$Outbound` instead. */
  export type Outbound = PostClientPlansV1ResponseBody$Outbound;
}

export function postClientPlansV1ResponseBodyToJSON(
  postClientPlansV1ResponseBody: PostClientPlansV1ResponseBody,
): string {
  return JSON.stringify(
    PostClientPlansV1ResponseBody$outboundSchema.parse(
      postClientPlansV1ResponseBody,
    ),
  );
}

export function postClientPlansV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPlansV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPlansV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPlansV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostClientPlansV1Response$inboundSchema: z.ZodType<
  PostClientPlansV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostClientPlansV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostClientPlansV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostClientPlansV1ResponseBody$Outbound;
};

/** @internal */
export const PostClientPlansV1Response$outboundSchema: z.ZodType<
  PostClientPlansV1Response$Outbound,
  z.ZodTypeDef,
  PostClientPlansV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostClientPlansV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPlansV1Response$ {
  /** @deprecated use `PostClientPlansV1Response$inboundSchema` instead. */
  export const inboundSchema = PostClientPlansV1Response$inboundSchema;
  /** @deprecated use `PostClientPlansV1Response$outboundSchema` instead. */
  export const outboundSchema = PostClientPlansV1Response$outboundSchema;
  /** @deprecated use `PostClientPlansV1Response$Outbound` instead. */
  export type Outbound = PostClientPlansV1Response$Outbound;
}

export function postClientPlansV1ResponseToJSON(
  postClientPlansV1Response: PostClientPlansV1Response,
): string {
  return JSON.stringify(
    PostClientPlansV1Response$outboundSchema.parse(postClientPlansV1Response),
  );
}

export function postClientPlansV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPlansV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPlansV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPlansV1Response' from JSON`,
  );
}
