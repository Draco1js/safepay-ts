/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostClientApiSettingsV1Data = {
  token?: string | undefined;
  clientId?: string | undefined;
  webhookSecret?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * 200
 */
export type PostClientApiSettingsV1ResponseBody = {
  data?: PostClientApiSettingsV1Data | undefined;
  status?: models.Status | undefined;
};

export type PostClientApiSettingsV1Response = {
  headers: { [k: string]: Array<string> };
  result: PostClientApiSettingsV1ResponseBody;
};

/** @internal */
export const PostClientApiSettingsV1Data$inboundSchema: z.ZodType<
  PostClientApiSettingsV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  client_id: z.string().optional(),
  webhook_secret: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "webhook_secret": "webhookSecret",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostClientApiSettingsV1Data$Outbound = {
  token?: string | undefined;
  client_id?: string | undefined;
  webhook_secret?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PostClientApiSettingsV1Data$outboundSchema: z.ZodType<
  PostClientApiSettingsV1Data$Outbound,
  z.ZodTypeDef,
  PostClientApiSettingsV1Data
> = z.object({
  token: z.string().optional(),
  clientId: z.string().optional(),
  webhookSecret: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    webhookSecret: "webhook_secret",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientApiSettingsV1Data$ {
  /** @deprecated use `PostClientApiSettingsV1Data$inboundSchema` instead. */
  export const inboundSchema = PostClientApiSettingsV1Data$inboundSchema;
  /** @deprecated use `PostClientApiSettingsV1Data$outboundSchema` instead. */
  export const outboundSchema = PostClientApiSettingsV1Data$outboundSchema;
  /** @deprecated use `PostClientApiSettingsV1Data$Outbound` instead. */
  export type Outbound = PostClientApiSettingsV1Data$Outbound;
}

export function postClientApiSettingsV1DataToJSON(
  postClientApiSettingsV1Data: PostClientApiSettingsV1Data,
): string {
  return JSON.stringify(
    PostClientApiSettingsV1Data$outboundSchema.parse(
      postClientApiSettingsV1Data,
    ),
  );
}

export function postClientApiSettingsV1DataFromJSON(
  jsonString: string,
): SafeParseResult<PostClientApiSettingsV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientApiSettingsV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientApiSettingsV1Data' from JSON`,
  );
}

/** @internal */
export const PostClientApiSettingsV1ResponseBody$inboundSchema: z.ZodType<
  PostClientApiSettingsV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostClientApiSettingsV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostClientApiSettingsV1ResponseBody$Outbound = {
  data?: PostClientApiSettingsV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostClientApiSettingsV1ResponseBody$outboundSchema: z.ZodType<
  PostClientApiSettingsV1ResponseBody$Outbound,
  z.ZodTypeDef,
  PostClientApiSettingsV1ResponseBody
> = z.object({
  data: z.lazy(() => PostClientApiSettingsV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientApiSettingsV1ResponseBody$ {
  /** @deprecated use `PostClientApiSettingsV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostClientApiSettingsV1ResponseBody$inboundSchema;
  /** @deprecated use `PostClientApiSettingsV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostClientApiSettingsV1ResponseBody$outboundSchema;
  /** @deprecated use `PostClientApiSettingsV1ResponseBody$Outbound` instead. */
  export type Outbound = PostClientApiSettingsV1ResponseBody$Outbound;
}

export function postClientApiSettingsV1ResponseBodyToJSON(
  postClientApiSettingsV1ResponseBody: PostClientApiSettingsV1ResponseBody,
): string {
  return JSON.stringify(
    PostClientApiSettingsV1ResponseBody$outboundSchema.parse(
      postClientApiSettingsV1ResponseBody,
    ),
  );
}

export function postClientApiSettingsV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostClientApiSettingsV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostClientApiSettingsV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientApiSettingsV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostClientApiSettingsV1Response$inboundSchema: z.ZodType<
  PostClientApiSettingsV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostClientApiSettingsV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostClientApiSettingsV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostClientApiSettingsV1ResponseBody$Outbound;
};

/** @internal */
export const PostClientApiSettingsV1Response$outboundSchema: z.ZodType<
  PostClientApiSettingsV1Response$Outbound,
  z.ZodTypeDef,
  PostClientApiSettingsV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostClientApiSettingsV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientApiSettingsV1Response$ {
  /** @deprecated use `PostClientApiSettingsV1Response$inboundSchema` instead. */
  export const inboundSchema = PostClientApiSettingsV1Response$inboundSchema;
  /** @deprecated use `PostClientApiSettingsV1Response$outboundSchema` instead. */
  export const outboundSchema = PostClientApiSettingsV1Response$outboundSchema;
  /** @deprecated use `PostClientApiSettingsV1Response$Outbound` instead. */
  export type Outbound = PostClientApiSettingsV1Response$Outbound;
}

export function postClientApiSettingsV1ResponseToJSON(
  postClientApiSettingsV1Response: PostClientApiSettingsV1Response,
): string {
  return JSON.stringify(
    PostClientApiSettingsV1Response$outboundSchema.parse(
      postClientApiSettingsV1Response,
    ),
  );
}

export function postClientApiSettingsV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostClientApiSettingsV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientApiSettingsV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientApiSettingsV1Response' from JSON`,
  );
}
