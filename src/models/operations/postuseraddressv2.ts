/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostUserAddressV2Request = {
  street1?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
};

export type PostUserAddressV2CreatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserAddressV2UpdatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserAddressV2Data = {
  token?: string | undefined;
  street1?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
  isDefault?: boolean | undefined;
  createdAt?: PostUserAddressV2CreatedAt | undefined;
  updatedAt?: PostUserAddressV2UpdatedAt | undefined;
};

/**
 * 201
 */
export type PostUserAddressV2ResponseBody = {
  data?: PostUserAddressV2Data | undefined;
  status?: models.Status | undefined;
};

export type PostUserAddressV2Response = {
  headers: { [k: string]: Array<string> };
  result: PostUserAddressV2ResponseBody;
};

/** @internal */
export const PostUserAddressV2Request$inboundSchema: z.ZodType<
  PostUserAddressV2Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postal_code: z.string().optional(),
  country: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
  });
});

/** @internal */
export type PostUserAddressV2Request$Outbound = {
  street1?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postal_code?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const PostUserAddressV2Request$outboundSchema: z.ZodType<
  PostUserAddressV2Request$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2Request
> = z.object({
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2Request$ {
  /** @deprecated use `PostUserAddressV2Request$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2Request$inboundSchema;
  /** @deprecated use `PostUserAddressV2Request$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2Request$outboundSchema;
  /** @deprecated use `PostUserAddressV2Request$Outbound` instead. */
  export type Outbound = PostUserAddressV2Request$Outbound;
}

export function postUserAddressV2RequestToJSON(
  postUserAddressV2Request: PostUserAddressV2Request,
): string {
  return JSON.stringify(
    PostUserAddressV2Request$outboundSchema.parse(postUserAddressV2Request),
  );
}

export function postUserAddressV2RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2Request' from JSON`,
  );
}

/** @internal */
export const PostUserAddressV2CreatedAt$inboundSchema: z.ZodType<
  PostUserAddressV2CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserAddressV2CreatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserAddressV2CreatedAt$outboundSchema: z.ZodType<
  PostUserAddressV2CreatedAt$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2CreatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2CreatedAt$ {
  /** @deprecated use `PostUserAddressV2CreatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2CreatedAt$inboundSchema;
  /** @deprecated use `PostUserAddressV2CreatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2CreatedAt$outboundSchema;
  /** @deprecated use `PostUserAddressV2CreatedAt$Outbound` instead. */
  export type Outbound = PostUserAddressV2CreatedAt$Outbound;
}

export function postUserAddressV2CreatedAtToJSON(
  postUserAddressV2CreatedAt: PostUserAddressV2CreatedAt,
): string {
  return JSON.stringify(
    PostUserAddressV2CreatedAt$outboundSchema.parse(postUserAddressV2CreatedAt),
  );
}

export function postUserAddressV2CreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2CreatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserAddressV2UpdatedAt$inboundSchema: z.ZodType<
  PostUserAddressV2UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserAddressV2UpdatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserAddressV2UpdatedAt$outboundSchema: z.ZodType<
  PostUserAddressV2UpdatedAt$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2UpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2UpdatedAt$ {
  /** @deprecated use `PostUserAddressV2UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2UpdatedAt$inboundSchema;
  /** @deprecated use `PostUserAddressV2UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2UpdatedAt$outboundSchema;
  /** @deprecated use `PostUserAddressV2UpdatedAt$Outbound` instead. */
  export type Outbound = PostUserAddressV2UpdatedAt$Outbound;
}

export function postUserAddressV2UpdatedAtToJSON(
  postUserAddressV2UpdatedAt: PostUserAddressV2UpdatedAt,
): string {
  return JSON.stringify(
    PostUserAddressV2UpdatedAt$outboundSchema.parse(postUserAddressV2UpdatedAt),
  );
}

export function postUserAddressV2UpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2UpdatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserAddressV2Data$inboundSchema: z.ZodType<
  PostUserAddressV2Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postal_code: z.string().optional(),
  country: z.string().optional(),
  is_default: z.boolean().optional(),
  created_at: z.lazy(() => PostUserAddressV2CreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => PostUserAddressV2UpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "is_default": "isDefault",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostUserAddressV2Data$Outbound = {
  token?: string | undefined;
  street1?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postal_code?: string | undefined;
  country?: string | undefined;
  is_default?: boolean | undefined;
  created_at?: PostUserAddressV2CreatedAt$Outbound | undefined;
  updated_at?: PostUserAddressV2UpdatedAt$Outbound | undefined;
};

/** @internal */
export const PostUserAddressV2Data$outboundSchema: z.ZodType<
  PostUserAddressV2Data$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2Data
> = z.object({
  token: z.string().optional(),
  street1: z.string().optional(),
  street2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.lazy(() => PostUserAddressV2CreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => PostUserAddressV2UpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    isDefault: "is_default",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2Data$ {
  /** @deprecated use `PostUserAddressV2Data$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2Data$inboundSchema;
  /** @deprecated use `PostUserAddressV2Data$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2Data$outboundSchema;
  /** @deprecated use `PostUserAddressV2Data$Outbound` instead. */
  export type Outbound = PostUserAddressV2Data$Outbound;
}

export function postUserAddressV2DataToJSON(
  postUserAddressV2Data: PostUserAddressV2Data,
): string {
  return JSON.stringify(
    PostUserAddressV2Data$outboundSchema.parse(postUserAddressV2Data),
  );
}

export function postUserAddressV2DataFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2Data' from JSON`,
  );
}

/** @internal */
export const PostUserAddressV2ResponseBody$inboundSchema: z.ZodType<
  PostUserAddressV2ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostUserAddressV2Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostUserAddressV2ResponseBody$Outbound = {
  data?: PostUserAddressV2Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostUserAddressV2ResponseBody$outboundSchema: z.ZodType<
  PostUserAddressV2ResponseBody$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2ResponseBody
> = z.object({
  data: z.lazy(() => PostUserAddressV2Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2ResponseBody$ {
  /** @deprecated use `PostUserAddressV2ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2ResponseBody$inboundSchema;
  /** @deprecated use `PostUserAddressV2ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2ResponseBody$outboundSchema;
  /** @deprecated use `PostUserAddressV2ResponseBody$Outbound` instead. */
  export type Outbound = PostUserAddressV2ResponseBody$Outbound;
}

export function postUserAddressV2ResponseBodyToJSON(
  postUserAddressV2ResponseBody: PostUserAddressV2ResponseBody,
): string {
  return JSON.stringify(
    PostUserAddressV2ResponseBody$outboundSchema.parse(
      postUserAddressV2ResponseBody,
    ),
  );
}

export function postUserAddressV2ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostUserAddressV2Response$inboundSchema: z.ZodType<
  PostUserAddressV2Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostUserAddressV2ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostUserAddressV2Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostUserAddressV2ResponseBody$Outbound;
};

/** @internal */
export const PostUserAddressV2Response$outboundSchema: z.ZodType<
  PostUserAddressV2Response$Outbound,
  z.ZodTypeDef,
  PostUserAddressV2Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostUserAddressV2ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserAddressV2Response$ {
  /** @deprecated use `PostUserAddressV2Response$inboundSchema` instead. */
  export const inboundSchema = PostUserAddressV2Response$inboundSchema;
  /** @deprecated use `PostUserAddressV2Response$outboundSchema` instead. */
  export const outboundSchema = PostUserAddressV2Response$outboundSchema;
  /** @deprecated use `PostUserAddressV2Response$Outbound` instead. */
  export type Outbound = PostUserAddressV2Response$Outbound;
}

export function postUserAddressV2ResponseToJSON(
  postUserAddressV2Response: PostUserAddressV2Response,
): string {
  return JSON.stringify(
    PostUserAddressV2Response$outboundSchema.parse(postUserAddressV2Response),
  );
}

export function postUserAddressV2ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostUserAddressV2Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserAddressV2Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserAddressV2Response' from JSON`,
  );
}
