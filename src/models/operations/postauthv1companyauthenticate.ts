/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostAuthV1CompanyAuthenticateRequest = {
  client?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
};

export type PostAuthV1CompanyAuthenticateExpectationFailedStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type PostAuthV1CompanyAuthenticateUnauthorizedStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type PostAuthV1CompanyAuthenticateData = {
  session?: string | undefined;
  token?: string | undefined;
};

export type PostAuthV1CompanyAuthenticateStatus = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/**
 * 200
 */
export type PostAuthV1CompanyAuthenticateResponseBody = {
  data?: PostAuthV1CompanyAuthenticateData | undefined;
  status?: PostAuthV1CompanyAuthenticateStatus | undefined;
};

export type PostAuthV1CompanyAuthenticateResponse = {
  headers: { [k: string]: Array<string> };
  result: PostAuthV1CompanyAuthenticateResponseBody;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateRequest$inboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  client: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
});

/** @internal */
export type PostAuthV1CompanyAuthenticateRequest$Outbound = {
  client?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateRequest$outboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateRequest$Outbound,
  z.ZodTypeDef,
  PostAuthV1CompanyAuthenticateRequest
> = z.object({
  client: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateRequest$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateRequest$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateRequest$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateRequest$Outbound` instead. */
  export type Outbound = PostAuthV1CompanyAuthenticateRequest$Outbound;
}

export function postAuthV1CompanyAuthenticateRequestToJSON(
  postAuthV1CompanyAuthenticateRequest: PostAuthV1CompanyAuthenticateRequest,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateRequest$outboundSchema.parse(
      postAuthV1CompanyAuthenticateRequest,
    ),
  );
}

export function postAuthV1CompanyAuthenticateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV1CompanyAuthenticateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV1CompanyAuthenticateRequest' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateExpectationFailedStatus$inboundSchema:
  z.ZodType<
    PostAuthV1CompanyAuthenticateExpectationFailedStatus,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/** @internal */
export type PostAuthV1CompanyAuthenticateExpectationFailedStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateExpectationFailedStatus$outboundSchema:
  z.ZodType<
    PostAuthV1CompanyAuthenticateExpectationFailedStatus$Outbound,
    z.ZodTypeDef,
    PostAuthV1CompanyAuthenticateExpectationFailedStatus
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateExpectationFailedStatus$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateExpectationFailedStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateExpectationFailedStatus$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateExpectationFailedStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateExpectationFailedStatus$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateExpectationFailedStatus$Outbound` instead. */
  export type Outbound =
    PostAuthV1CompanyAuthenticateExpectationFailedStatus$Outbound;
}

export function postAuthV1CompanyAuthenticateExpectationFailedStatusToJSON(
  postAuthV1CompanyAuthenticateExpectationFailedStatus:
    PostAuthV1CompanyAuthenticateExpectationFailedStatus,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateExpectationFailedStatus$outboundSchema.parse(
      postAuthV1CompanyAuthenticateExpectationFailedStatus,
    ),
  );
}

export function postAuthV1CompanyAuthenticateExpectationFailedStatusFromJSON(
  jsonString: string,
): SafeParseResult<
  PostAuthV1CompanyAuthenticateExpectationFailedStatus,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateExpectationFailedStatus$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostAuthV1CompanyAuthenticateExpectationFailedStatus' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateUnauthorizedStatus$inboundSchema:
  z.ZodType<
    PostAuthV1CompanyAuthenticateUnauthorizedStatus,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/** @internal */
export type PostAuthV1CompanyAuthenticateUnauthorizedStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateUnauthorizedStatus$outboundSchema:
  z.ZodType<
    PostAuthV1CompanyAuthenticateUnauthorizedStatus$Outbound,
    z.ZodTypeDef,
    PostAuthV1CompanyAuthenticateUnauthorizedStatus
  > = z.object({
    errors: z.array(z.string()).optional(),
    message: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateUnauthorizedStatus$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateUnauthorizedStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateUnauthorizedStatus$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateUnauthorizedStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateUnauthorizedStatus$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateUnauthorizedStatus$Outbound` instead. */
  export type Outbound =
    PostAuthV1CompanyAuthenticateUnauthorizedStatus$Outbound;
}

export function postAuthV1CompanyAuthenticateUnauthorizedStatusToJSON(
  postAuthV1CompanyAuthenticateUnauthorizedStatus:
    PostAuthV1CompanyAuthenticateUnauthorizedStatus,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateUnauthorizedStatus$outboundSchema.parse(
      postAuthV1CompanyAuthenticateUnauthorizedStatus,
    ),
  );
}

export function postAuthV1CompanyAuthenticateUnauthorizedStatusFromJSON(
  jsonString: string,
): SafeParseResult<
  PostAuthV1CompanyAuthenticateUnauthorizedStatus,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateUnauthorizedStatus$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostAuthV1CompanyAuthenticateUnauthorizedStatus' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateData$inboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
});

/** @internal */
export type PostAuthV1CompanyAuthenticateData$Outbound = {
  session?: string | undefined;
  token?: string | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateData$outboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateData$Outbound,
  z.ZodTypeDef,
  PostAuthV1CompanyAuthenticateData
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateData$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateData$inboundSchema` instead. */
  export const inboundSchema = PostAuthV1CompanyAuthenticateData$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateData$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateData$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateData$Outbound` instead. */
  export type Outbound = PostAuthV1CompanyAuthenticateData$Outbound;
}

export function postAuthV1CompanyAuthenticateDataToJSON(
  postAuthV1CompanyAuthenticateData: PostAuthV1CompanyAuthenticateData,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateData$outboundSchema.parse(
      postAuthV1CompanyAuthenticateData,
    ),
  );
}

export function postAuthV1CompanyAuthenticateDataFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV1CompanyAuthenticateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthV1CompanyAuthenticateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV1CompanyAuthenticateData' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateStatus$inboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostAuthV1CompanyAuthenticateStatus$Outbound = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateStatus$outboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateStatus$Outbound,
  z.ZodTypeDef,
  PostAuthV1CompanyAuthenticateStatus
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateStatus$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateStatus$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateStatus$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateStatus$Outbound` instead. */
  export type Outbound = PostAuthV1CompanyAuthenticateStatus$Outbound;
}

export function postAuthV1CompanyAuthenticateStatusToJSON(
  postAuthV1CompanyAuthenticateStatus: PostAuthV1CompanyAuthenticateStatus,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateStatus$outboundSchema.parse(
      postAuthV1CompanyAuthenticateStatus,
    ),
  );
}

export function postAuthV1CompanyAuthenticateStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV1CompanyAuthenticateStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV1CompanyAuthenticateStatus' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateResponseBody$inboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostAuthV1CompanyAuthenticateData$inboundSchema)
    .optional(),
  status: z.lazy(() => PostAuthV1CompanyAuthenticateStatus$inboundSchema)
    .optional(),
});

/** @internal */
export type PostAuthV1CompanyAuthenticateResponseBody$Outbound = {
  data?: PostAuthV1CompanyAuthenticateData$Outbound | undefined;
  status?: PostAuthV1CompanyAuthenticateStatus$Outbound | undefined;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateResponseBody$outboundSchema:
  z.ZodType<
    PostAuthV1CompanyAuthenticateResponseBody$Outbound,
    z.ZodTypeDef,
    PostAuthV1CompanyAuthenticateResponseBody
  > = z.object({
    data: z.lazy(() => PostAuthV1CompanyAuthenticateData$outboundSchema)
      .optional(),
    status: z.lazy(() => PostAuthV1CompanyAuthenticateStatus$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateResponseBody$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateResponseBody$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateResponseBody$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponseBody$Outbound` instead. */
  export type Outbound = PostAuthV1CompanyAuthenticateResponseBody$Outbound;
}

export function postAuthV1CompanyAuthenticateResponseBodyToJSON(
  postAuthV1CompanyAuthenticateResponseBody:
    PostAuthV1CompanyAuthenticateResponseBody,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateResponseBody$outboundSchema.parse(
      postAuthV1CompanyAuthenticateResponseBody,
    ),
  );
}

export function postAuthV1CompanyAuthenticateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostAuthV1CompanyAuthenticateResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostAuthV1CompanyAuthenticateResponseBody' from JSON`,
  );
}

/** @internal */
export const PostAuthV1CompanyAuthenticateResponse$inboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostAuthV1CompanyAuthenticateResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostAuthV1CompanyAuthenticateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostAuthV1CompanyAuthenticateResponseBody$Outbound;
};

/** @internal */
export const PostAuthV1CompanyAuthenticateResponse$outboundSchema: z.ZodType<
  PostAuthV1CompanyAuthenticateResponse$Outbound,
  z.ZodTypeDef,
  PostAuthV1CompanyAuthenticateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    PostAuthV1CompanyAuthenticateResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV1CompanyAuthenticateResponse$ {
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostAuthV1CompanyAuthenticateResponse$inboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostAuthV1CompanyAuthenticateResponse$outboundSchema;
  /** @deprecated use `PostAuthV1CompanyAuthenticateResponse$Outbound` instead. */
  export type Outbound = PostAuthV1CompanyAuthenticateResponse$Outbound;
}

export function postAuthV1CompanyAuthenticateResponseToJSON(
  postAuthV1CompanyAuthenticateResponse: PostAuthV1CompanyAuthenticateResponse,
): string {
  return JSON.stringify(
    PostAuthV1CompanyAuthenticateResponse$outboundSchema.parse(
      postAuthV1CompanyAuthenticateResponse,
    ),
  );
}

export function postAuthV1CompanyAuthenticateResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV1CompanyAuthenticateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostAuthV1CompanyAuthenticateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV1CompanyAuthenticateResponse' from JSON`,
  );
}
