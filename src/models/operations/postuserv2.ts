/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostUserV2Request = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  password?: string | undefined;
};

export type PostUserV2CreatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserV2UpdatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserV2Contact = {
  token?: string | undefined;
  user?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  isDefault?: boolean | undefined;
  createdAt?: PostUserV2CreatedAt | undefined;
  updatedAt?: PostUserV2UpdatedAt | undefined;
};

export type PostUserV2Verification = {
  userId?: string | undefined;
  code?: string | undefined;
  verificationType?: number | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostUserV2Data = {
  token?: string | undefined;
  contacts?: Array<PostUserV2Contact> | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  suspended?: number | undefined;
  suspendReason?: string | undefined;
  verified?: number | undefined;
  verification?: PostUserV2Verification | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * 200
 */
export type PostUserV2ResponseBody = {
  data?: PostUserV2Data | undefined;
  status?: models.Status | undefined;
};

export type PostUserV2Response = {
  headers: { [k: string]: Array<string> };
  result: PostUserV2ResponseBody;
};

/** @internal */
export const PostUserV2Request$inboundSchema: z.ZodType<
  PostUserV2Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  password: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type PostUserV2Request$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  password?: string | undefined;
};

/** @internal */
export const PostUserV2Request$outboundSchema: z.ZodType<
  PostUserV2Request$Outbound,
  z.ZodTypeDef,
  PostUserV2Request
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  password: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2Request$ {
  /** @deprecated use `PostUserV2Request$inboundSchema` instead. */
  export const inboundSchema = PostUserV2Request$inboundSchema;
  /** @deprecated use `PostUserV2Request$outboundSchema` instead. */
  export const outboundSchema = PostUserV2Request$outboundSchema;
  /** @deprecated use `PostUserV2Request$Outbound` instead. */
  export type Outbound = PostUserV2Request$Outbound;
}

export function postUserV2RequestToJSON(
  postUserV2Request: PostUserV2Request,
): string {
  return JSON.stringify(
    PostUserV2Request$outboundSchema.parse(postUserV2Request),
  );
}

export function postUserV2RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2Request' from JSON`,
  );
}

/** @internal */
export const PostUserV2CreatedAt$inboundSchema: z.ZodType<
  PostUserV2CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserV2CreatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserV2CreatedAt$outboundSchema: z.ZodType<
  PostUserV2CreatedAt$Outbound,
  z.ZodTypeDef,
  PostUserV2CreatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2CreatedAt$ {
  /** @deprecated use `PostUserV2CreatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserV2CreatedAt$inboundSchema;
  /** @deprecated use `PostUserV2CreatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserV2CreatedAt$outboundSchema;
  /** @deprecated use `PostUserV2CreatedAt$Outbound` instead. */
  export type Outbound = PostUserV2CreatedAt$Outbound;
}

export function postUserV2CreatedAtToJSON(
  postUserV2CreatedAt: PostUserV2CreatedAt,
): string {
  return JSON.stringify(
    PostUserV2CreatedAt$outboundSchema.parse(postUserV2CreatedAt),
  );
}

export function postUserV2CreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2CreatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserV2UpdatedAt$inboundSchema: z.ZodType<
  PostUserV2UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserV2UpdatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserV2UpdatedAt$outboundSchema: z.ZodType<
  PostUserV2UpdatedAt$Outbound,
  z.ZodTypeDef,
  PostUserV2UpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2UpdatedAt$ {
  /** @deprecated use `PostUserV2UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserV2UpdatedAt$inboundSchema;
  /** @deprecated use `PostUserV2UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserV2UpdatedAt$outboundSchema;
  /** @deprecated use `PostUserV2UpdatedAt$Outbound` instead. */
  export type Outbound = PostUserV2UpdatedAt$Outbound;
}

export function postUserV2UpdatedAtToJSON(
  postUserV2UpdatedAt: PostUserV2UpdatedAt,
): string {
  return JSON.stringify(
    PostUserV2UpdatedAt$outboundSchema.parse(postUserV2UpdatedAt),
  );
}

export function postUserV2UpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2UpdatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserV2Contact$inboundSchema: z.ZodType<
  PostUserV2Contact,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  is_default: z.boolean().optional(),
  created_at: z.lazy(() => PostUserV2CreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => PostUserV2UpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "is_default": "isDefault",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostUserV2Contact$Outbound = {
  token?: string | undefined;
  user?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  is_default?: boolean | undefined;
  created_at?: PostUserV2CreatedAt$Outbound | undefined;
  updated_at?: PostUserV2UpdatedAt$Outbound | undefined;
};

/** @internal */
export const PostUserV2Contact$outboundSchema: z.ZodType<
  PostUserV2Contact$Outbound,
  z.ZodTypeDef,
  PostUserV2Contact
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.lazy(() => PostUserV2CreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => PostUserV2UpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    isDefault: "is_default",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2Contact$ {
  /** @deprecated use `PostUserV2Contact$inboundSchema` instead. */
  export const inboundSchema = PostUserV2Contact$inboundSchema;
  /** @deprecated use `PostUserV2Contact$outboundSchema` instead. */
  export const outboundSchema = PostUserV2Contact$outboundSchema;
  /** @deprecated use `PostUserV2Contact$Outbound` instead. */
  export type Outbound = PostUserV2Contact$Outbound;
}

export function postUserV2ContactToJSON(
  postUserV2Contact: PostUserV2Contact,
): string {
  return JSON.stringify(
    PostUserV2Contact$outboundSchema.parse(postUserV2Contact),
  );
}

export function postUserV2ContactFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2Contact' from JSON`,
  );
}

/** @internal */
export const PostUserV2Verification$inboundSchema: z.ZodType<
  PostUserV2Verification,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  code: z.string().optional(),
  verification_type: z.number().int().optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "verification_type": "verificationType",
    "expires_at": "expiresAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostUserV2Verification$Outbound = {
  user_id?: string | undefined;
  code?: string | undefined;
  verification_type?: number | undefined;
  expires_at?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PostUserV2Verification$outboundSchema: z.ZodType<
  PostUserV2Verification$Outbound,
  z.ZodTypeDef,
  PostUserV2Verification
> = z.object({
  userId: z.string().optional(),
  code: z.string().optional(),
  verificationType: z.number().int().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    verificationType: "verification_type",
    expiresAt: "expires_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2Verification$ {
  /** @deprecated use `PostUserV2Verification$inboundSchema` instead. */
  export const inboundSchema = PostUserV2Verification$inboundSchema;
  /** @deprecated use `PostUserV2Verification$outboundSchema` instead. */
  export const outboundSchema = PostUserV2Verification$outboundSchema;
  /** @deprecated use `PostUserV2Verification$Outbound` instead. */
  export type Outbound = PostUserV2Verification$Outbound;
}

export function postUserV2VerificationToJSON(
  postUserV2Verification: PostUserV2Verification,
): string {
  return JSON.stringify(
    PostUserV2Verification$outboundSchema.parse(postUserV2Verification),
  );
}

export function postUserV2VerificationFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2Verification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2Verification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2Verification' from JSON`,
  );
}

/** @internal */
export const PostUserV2Data$inboundSchema: z.ZodType<
  PostUserV2Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  contacts: z.array(z.lazy(() => PostUserV2Contact$inboundSchema)).optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  suspended: z.number().int().optional(),
  suspend_reason: z.string().optional(),
  verified: z.number().int().optional(),
  verification: z.lazy(() => PostUserV2Verification$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "suspend_reason": "suspendReason",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostUserV2Data$Outbound = {
  token?: string | undefined;
  contacts?: Array<PostUserV2Contact$Outbound> | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  suspended?: number | undefined;
  suspend_reason?: string | undefined;
  verified?: number | undefined;
  verification?: PostUserV2Verification$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PostUserV2Data$outboundSchema: z.ZodType<
  PostUserV2Data$Outbound,
  z.ZodTypeDef,
  PostUserV2Data
> = z.object({
  token: z.string().optional(),
  contacts: z.array(z.lazy(() => PostUserV2Contact$outboundSchema)).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  suspended: z.number().int().optional(),
  suspendReason: z.string().optional(),
  verified: z.number().int().optional(),
  verification: z.lazy(() => PostUserV2Verification$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    suspendReason: "suspend_reason",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2Data$ {
  /** @deprecated use `PostUserV2Data$inboundSchema` instead. */
  export const inboundSchema = PostUserV2Data$inboundSchema;
  /** @deprecated use `PostUserV2Data$outboundSchema` instead. */
  export const outboundSchema = PostUserV2Data$outboundSchema;
  /** @deprecated use `PostUserV2Data$Outbound` instead. */
  export type Outbound = PostUserV2Data$Outbound;
}

export function postUserV2DataToJSON(postUserV2Data: PostUserV2Data): string {
  return JSON.stringify(PostUserV2Data$outboundSchema.parse(postUserV2Data));
}

export function postUserV2DataFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2Data' from JSON`,
  );
}

/** @internal */
export const PostUserV2ResponseBody$inboundSchema: z.ZodType<
  PostUserV2ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostUserV2Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostUserV2ResponseBody$Outbound = {
  data?: PostUserV2Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostUserV2ResponseBody$outboundSchema: z.ZodType<
  PostUserV2ResponseBody$Outbound,
  z.ZodTypeDef,
  PostUserV2ResponseBody
> = z.object({
  data: z.lazy(() => PostUserV2Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2ResponseBody$ {
  /** @deprecated use `PostUserV2ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostUserV2ResponseBody$inboundSchema;
  /** @deprecated use `PostUserV2ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostUserV2ResponseBody$outboundSchema;
  /** @deprecated use `PostUserV2ResponseBody$Outbound` instead. */
  export type Outbound = PostUserV2ResponseBody$Outbound;
}

export function postUserV2ResponseBodyToJSON(
  postUserV2ResponseBody: PostUserV2ResponseBody,
): string {
  return JSON.stringify(
    PostUserV2ResponseBody$outboundSchema.parse(postUserV2ResponseBody),
  );
}

export function postUserV2ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostUserV2Response$inboundSchema: z.ZodType<
  PostUserV2Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostUserV2ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostUserV2Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostUserV2ResponseBody$Outbound;
};

/** @internal */
export const PostUserV2Response$outboundSchema: z.ZodType<
  PostUserV2Response$Outbound,
  z.ZodTypeDef,
  PostUserV2Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostUserV2ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserV2Response$ {
  /** @deprecated use `PostUserV2Response$inboundSchema` instead. */
  export const inboundSchema = PostUserV2Response$inboundSchema;
  /** @deprecated use `PostUserV2Response$outboundSchema` instead. */
  export const outboundSchema = PostUserV2Response$outboundSchema;
  /** @deprecated use `PostUserV2Response$Outbound` instead. */
  export type Outbound = PostUserV2Response$Outbound;
}

export function postUserV2ResponseToJSON(
  postUserV2Response: PostUserV2Response,
): string {
  return JSON.stringify(
    PostUserV2Response$outboundSchema.parse(postUserV2Response),
  );
}

export function postUserV2ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostUserV2Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserV2Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserV2Response' from JSON`,
  );
}
