/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type PostUserCustomersV1Request = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phoneNumber?: string | undefined;
  country?: string | undefined;
};

export type PostUserCustomersV1CreatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserCustomersV1UpdatedAt = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

export type PostUserCustomersV1Data = {
  token?: string | undefined;
  merchantApiKey?: string | undefined;
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phoneNumber?: string | undefined;
  country?: string | undefined;
  isGuest?: boolean | undefined;
  isDeleted?: boolean | undefined;
  createdAt?: PostUserCustomersV1CreatedAt | undefined;
  updatedAt?: PostUserCustomersV1UpdatedAt | undefined;
};

/**
 * 201
 */
export type PostUserCustomersV1ResponseBody = {
  data?: PostUserCustomersV1Data | undefined;
  status?: models.Status | undefined;
};

export type PostUserCustomersV1Response = {
  headers: { [k: string]: Array<string> };
  result: PostUserCustomersV1ResponseBody;
};

/** @internal */
export const PostUserCustomersV1Request$inboundSchema: z.ZodType<
  PostUserCustomersV1Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone_number: z.string().optional(),
  country: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type PostUserCustomersV1Request$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone_number?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const PostUserCustomersV1Request$outboundSchema: z.ZodType<
  PostUserCustomersV1Request$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1Request
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  country: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1Request$ {
  /** @deprecated use `PostUserCustomersV1Request$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1Request$inboundSchema;
  /** @deprecated use `PostUserCustomersV1Request$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1Request$outboundSchema;
  /** @deprecated use `PostUserCustomersV1Request$Outbound` instead. */
  export type Outbound = PostUserCustomersV1Request$Outbound;
}

export function postUserCustomersV1RequestToJSON(
  postUserCustomersV1Request: PostUserCustomersV1Request,
): string {
  return JSON.stringify(
    PostUserCustomersV1Request$outboundSchema.parse(postUserCustomersV1Request),
  );
}

export function postUserCustomersV1RequestFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1Request' from JSON`,
  );
}

/** @internal */
export const PostUserCustomersV1CreatedAt$inboundSchema: z.ZodType<
  PostUserCustomersV1CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserCustomersV1CreatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserCustomersV1CreatedAt$outboundSchema: z.ZodType<
  PostUserCustomersV1CreatedAt$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1CreatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1CreatedAt$ {
  /** @deprecated use `PostUserCustomersV1CreatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1CreatedAt$inboundSchema;
  /** @deprecated use `PostUserCustomersV1CreatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1CreatedAt$outboundSchema;
  /** @deprecated use `PostUserCustomersV1CreatedAt$Outbound` instead. */
  export type Outbound = PostUserCustomersV1CreatedAt$Outbound;
}

export function postUserCustomersV1CreatedAtToJSON(
  postUserCustomersV1CreatedAt: PostUserCustomersV1CreatedAt,
): string {
  return JSON.stringify(
    PostUserCustomersV1CreatedAt$outboundSchema.parse(
      postUserCustomersV1CreatedAt,
    ),
  );
}

export function postUserCustomersV1CreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1CreatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserCustomersV1UpdatedAt$inboundSchema: z.ZodType<
  PostUserCustomersV1UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/** @internal */
export type PostUserCustomersV1UpdatedAt$Outbound = {
  seconds?: number | undefined;
  nanos?: number | undefined;
};

/** @internal */
export const PostUserCustomersV1UpdatedAt$outboundSchema: z.ZodType<
  PostUserCustomersV1UpdatedAt$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1UpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
  nanos: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1UpdatedAt$ {
  /** @deprecated use `PostUserCustomersV1UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1UpdatedAt$inboundSchema;
  /** @deprecated use `PostUserCustomersV1UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1UpdatedAt$outboundSchema;
  /** @deprecated use `PostUserCustomersV1UpdatedAt$Outbound` instead. */
  export type Outbound = PostUserCustomersV1UpdatedAt$Outbound;
}

export function postUserCustomersV1UpdatedAtToJSON(
  postUserCustomersV1UpdatedAt: PostUserCustomersV1UpdatedAt,
): string {
  return JSON.stringify(
    PostUserCustomersV1UpdatedAt$outboundSchema.parse(
      postUserCustomersV1UpdatedAt,
    ),
  );
}

export function postUserCustomersV1UpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1UpdatedAt' from JSON`,
  );
}

/** @internal */
export const PostUserCustomersV1Data$inboundSchema: z.ZodType<
  PostUserCustomersV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  merchant_api_key: z.string().optional(),
  email: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  phone_number: z.string().optional(),
  country: z.string().optional(),
  is_guest: z.boolean().optional(),
  is_deleted: z.boolean().optional(),
  created_at: z.lazy(() => PostUserCustomersV1CreatedAt$inboundSchema)
    .optional(),
  updated_at: z.lazy(() => PostUserCustomersV1UpdatedAt$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_api_key": "merchantApiKey",
    "first_name": "firstName",
    "last_name": "lastName",
    "phone_number": "phoneNumber",
    "is_guest": "isGuest",
    "is_deleted": "isDeleted",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostUserCustomersV1Data$Outbound = {
  token?: string | undefined;
  merchant_api_key?: string | undefined;
  email?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  phone_number?: string | undefined;
  country?: string | undefined;
  is_guest?: boolean | undefined;
  is_deleted?: boolean | undefined;
  created_at?: PostUserCustomersV1CreatedAt$Outbound | undefined;
  updated_at?: PostUserCustomersV1UpdatedAt$Outbound | undefined;
};

/** @internal */
export const PostUserCustomersV1Data$outboundSchema: z.ZodType<
  PostUserCustomersV1Data$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1Data
> = z.object({
  token: z.string().optional(),
  merchantApiKey: z.string().optional(),
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phoneNumber: z.string().optional(),
  country: z.string().optional(),
  isGuest: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  createdAt: z.lazy(() => PostUserCustomersV1CreatedAt$outboundSchema)
    .optional(),
  updatedAt: z.lazy(() => PostUserCustomersV1UpdatedAt$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    merchantApiKey: "merchant_api_key",
    firstName: "first_name",
    lastName: "last_name",
    phoneNumber: "phone_number",
    isGuest: "is_guest",
    isDeleted: "is_deleted",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1Data$ {
  /** @deprecated use `PostUserCustomersV1Data$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1Data$inboundSchema;
  /** @deprecated use `PostUserCustomersV1Data$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1Data$outboundSchema;
  /** @deprecated use `PostUserCustomersV1Data$Outbound` instead. */
  export type Outbound = PostUserCustomersV1Data$Outbound;
}

export function postUserCustomersV1DataToJSON(
  postUserCustomersV1Data: PostUserCustomersV1Data,
): string {
  return JSON.stringify(
    PostUserCustomersV1Data$outboundSchema.parse(postUserCustomersV1Data),
  );
}

export function postUserCustomersV1DataFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1Data' from JSON`,
  );
}

/** @internal */
export const PostUserCustomersV1ResponseBody$inboundSchema: z.ZodType<
  PostUserCustomersV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostUserCustomersV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type PostUserCustomersV1ResponseBody$Outbound = {
  data?: PostUserCustomersV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const PostUserCustomersV1ResponseBody$outboundSchema: z.ZodType<
  PostUserCustomersV1ResponseBody$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1ResponseBody
> = z.object({
  data: z.lazy(() => PostUserCustomersV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1ResponseBody$ {
  /** @deprecated use `PostUserCustomersV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1ResponseBody$inboundSchema;
  /** @deprecated use `PostUserCustomersV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1ResponseBody$outboundSchema;
  /** @deprecated use `PostUserCustomersV1ResponseBody$Outbound` instead. */
  export type Outbound = PostUserCustomersV1ResponseBody$Outbound;
}

export function postUserCustomersV1ResponseBodyToJSON(
  postUserCustomersV1ResponseBody: PostUserCustomersV1ResponseBody,
): string {
  return JSON.stringify(
    PostUserCustomersV1ResponseBody$outboundSchema.parse(
      postUserCustomersV1ResponseBody,
    ),
  );
}

export function postUserCustomersV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const PostUserCustomersV1Response$inboundSchema: z.ZodType<
  PostUserCustomersV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostUserCustomersV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostUserCustomersV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostUserCustomersV1ResponseBody$Outbound;
};

/** @internal */
export const PostUserCustomersV1Response$outboundSchema: z.ZodType<
  PostUserCustomersV1Response$Outbound,
  z.ZodTypeDef,
  PostUserCustomersV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostUserCustomersV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostUserCustomersV1Response$ {
  /** @deprecated use `PostUserCustomersV1Response$inboundSchema` instead. */
  export const inboundSchema = PostUserCustomersV1Response$inboundSchema;
  /** @deprecated use `PostUserCustomersV1Response$outboundSchema` instead. */
  export const outboundSchema = PostUserCustomersV1Response$outboundSchema;
  /** @deprecated use `PostUserCustomersV1Response$Outbound` instead. */
  export type Outbound = PostUserCustomersV1Response$Outbound;
}

export function postUserCustomersV1ResponseToJSON(
  postUserCustomersV1Response: PostUserCustomersV1Response,
): string {
  return JSON.stringify(
    PostUserCustomersV1Response$outboundSchema.parse(
      postUserCustomersV1Response,
    ),
  );
}

export function postUserCustomersV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostUserCustomersV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostUserCustomersV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostUserCustomersV1Response' from JSON`,
  );
}
