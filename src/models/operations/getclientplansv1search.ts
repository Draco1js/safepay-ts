/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetClientPlansV1SearchRequest = {
  /**
   * Filter for specific Plan IDs
   */
  planIds?: string | undefined;
  /**
   * Filter for specific intervals
   */
  intervals?: string | undefined;
  /**
   * Filter for specific products
   */
  products?: string | undefined;
  /**
   * Filter for specific currencies
   */
  currencies?: string | undefined;
  /**
   * Limit search results to a value
   */
  limit?: string | undefined;
  /**
   * Paginate search results
   */
  page?: string | undefined;
  /**
   * Sort by specifies the field use to sort data e.g. `created_at`
   */
  sortBy?: string | undefined;
  /**
   * Direction specifies the data sort order either ASC or DESC
   */
  direction?: string | undefined;
};

export type GetClientPlansV1SearchPriceMoney = {
  currency?: string | undefined;
  amount?: string | undefined;
};

export type GetClientPlansV1SearchPlan = {
  token?: string | undefined;
  merchantApiKey?: string | undefined;
  name?: string | undefined;
  amount?: string | undefined;
  currency?: string | undefined;
  intervalCount?: number | undefined;
  interval?: string | undefined;
  product?: string | undefined;
  type?: string | undefined;
  trialPeriodDays?: number | undefined;
  description?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  active?: boolean | undefined;
  archived?: boolean | undefined;
  numberOfBillingCycles?: number | undefined;
  applyAmountChangeOnExistingSubscriptions?: boolean | undefined;
  priceMoney?: GetClientPlansV1SearchPriceMoney | undefined;
};

export type GetClientPlansV1SearchData = {
  plans?: Array<GetClientPlansV1SearchPlan> | undefined;
  count?: number | undefined;
  sortBy?: string | undefined;
  direction?: string | undefined;
};

/**
 * 200
 */
export type GetClientPlansV1SearchResponseBody = {
  data?: GetClientPlansV1SearchData | undefined;
  status?: models.Status | undefined;
};

export type GetClientPlansV1SearchResponse = {
  headers: { [k: string]: Array<string> };
  result: GetClientPlansV1SearchResponseBody;
};

/** @internal */
export const GetClientPlansV1SearchRequest$inboundSchema: z.ZodType<
  GetClientPlansV1SearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  plan_ids: z.string().optional(),
  intervals: z.string().optional(),
  products: z.string().optional(),
  currencies: z.string().optional(),
  limit: z.string().optional(),
  page: z.string().optional(),
  sort_by: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "plan_ids": "planIds",
    "sort_by": "sortBy",
  });
});

/** @internal */
export type GetClientPlansV1SearchRequest$Outbound = {
  plan_ids?: string | undefined;
  intervals?: string | undefined;
  products?: string | undefined;
  currencies?: string | undefined;
  limit?: string | undefined;
  page?: string | undefined;
  sort_by?: string | undefined;
  direction?: string | undefined;
};

/** @internal */
export const GetClientPlansV1SearchRequest$outboundSchema: z.ZodType<
  GetClientPlansV1SearchRequest$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchRequest
> = z.object({
  planIds: z.string().optional(),
  intervals: z.string().optional(),
  products: z.string().optional(),
  currencies: z.string().optional(),
  limit: z.string().optional(),
  page: z.string().optional(),
  sortBy: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    planIds: "plan_ids",
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchRequest$ {
  /** @deprecated use `GetClientPlansV1SearchRequest$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchRequest$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchRequest$outboundSchema` instead. */
  export const outboundSchema = GetClientPlansV1SearchRequest$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchRequest$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchRequest$Outbound;
}

export function getClientPlansV1SearchRequestToJSON(
  getClientPlansV1SearchRequest: GetClientPlansV1SearchRequest,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchRequest$outboundSchema.parse(
      getClientPlansV1SearchRequest,
    ),
  );
}

export function getClientPlansV1SearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientPlansV1SearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchRequest' from JSON`,
  );
}

/** @internal */
export const GetClientPlansV1SearchPriceMoney$inboundSchema: z.ZodType<
  GetClientPlansV1SearchPriceMoney,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.string().optional(),
});

/** @internal */
export type GetClientPlansV1SearchPriceMoney$Outbound = {
  currency?: string | undefined;
  amount?: string | undefined;
};

/** @internal */
export const GetClientPlansV1SearchPriceMoney$outboundSchema: z.ZodType<
  GetClientPlansV1SearchPriceMoney$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchPriceMoney
> = z.object({
  currency: z.string().optional(),
  amount: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchPriceMoney$ {
  /** @deprecated use `GetClientPlansV1SearchPriceMoney$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchPriceMoney$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchPriceMoney$outboundSchema` instead. */
  export const outboundSchema = GetClientPlansV1SearchPriceMoney$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchPriceMoney$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchPriceMoney$Outbound;
}

export function getClientPlansV1SearchPriceMoneyToJSON(
  getClientPlansV1SearchPriceMoney: GetClientPlansV1SearchPriceMoney,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchPriceMoney$outboundSchema.parse(
      getClientPlansV1SearchPriceMoney,
    ),
  );
}

export function getClientPlansV1SearchPriceMoneyFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchPriceMoney, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientPlansV1SearchPriceMoney$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchPriceMoney' from JSON`,
  );
}

/** @internal */
export const GetClientPlansV1SearchPlan$inboundSchema: z.ZodType<
  GetClientPlansV1SearchPlan,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  merchant_api_key: z.string().optional(),
  name: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
  interval_count: z.number().int().optional(),
  interval: z.string().optional(),
  product: z.string().optional(),
  type: z.string().optional(),
  trial_period_days: z.number().int().optional(),
  description: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  active: z.boolean().optional(),
  archived: z.boolean().optional(),
  number_of_billing_cycles: z.number().int().optional(),
  apply_amount_change_on_existing_subscriptions: z.boolean().optional(),
  price_money: z.lazy(() => GetClientPlansV1SearchPriceMoney$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "merchant_api_key": "merchantApiKey",
    "interval_count": "intervalCount",
    "trial_period_days": "trialPeriodDays",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "number_of_billing_cycles": "numberOfBillingCycles",
    "apply_amount_change_on_existing_subscriptions":
      "applyAmountChangeOnExistingSubscriptions",
    "price_money": "priceMoney",
  });
});

/** @internal */
export type GetClientPlansV1SearchPlan$Outbound = {
  token?: string | undefined;
  merchant_api_key?: string | undefined;
  name?: string | undefined;
  amount?: string | undefined;
  currency?: string | undefined;
  interval_count?: number | undefined;
  interval?: string | undefined;
  product?: string | undefined;
  type?: string | undefined;
  trial_period_days?: number | undefined;
  description?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  active?: boolean | undefined;
  archived?: boolean | undefined;
  number_of_billing_cycles?: number | undefined;
  apply_amount_change_on_existing_subscriptions?: boolean | undefined;
  price_money?: GetClientPlansV1SearchPriceMoney$Outbound | undefined;
};

/** @internal */
export const GetClientPlansV1SearchPlan$outboundSchema: z.ZodType<
  GetClientPlansV1SearchPlan$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchPlan
> = z.object({
  token: z.string().optional(),
  merchantApiKey: z.string().optional(),
  name: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
  intervalCount: z.number().int().optional(),
  interval: z.string().optional(),
  product: z.string().optional(),
  type: z.string().optional(),
  trialPeriodDays: z.number().int().optional(),
  description: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  active: z.boolean().optional(),
  archived: z.boolean().optional(),
  numberOfBillingCycles: z.number().int().optional(),
  applyAmountChangeOnExistingSubscriptions: z.boolean().optional(),
  priceMoney: z.lazy(() => GetClientPlansV1SearchPriceMoney$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    merchantApiKey: "merchant_api_key",
    intervalCount: "interval_count",
    trialPeriodDays: "trial_period_days",
    createdAt: "created_at",
    updatedAt: "updated_at",
    numberOfBillingCycles: "number_of_billing_cycles",
    applyAmountChangeOnExistingSubscriptions:
      "apply_amount_change_on_existing_subscriptions",
    priceMoney: "price_money",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchPlan$ {
  /** @deprecated use `GetClientPlansV1SearchPlan$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchPlan$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchPlan$outboundSchema` instead. */
  export const outboundSchema = GetClientPlansV1SearchPlan$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchPlan$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchPlan$Outbound;
}

export function getClientPlansV1SearchPlanToJSON(
  getClientPlansV1SearchPlan: GetClientPlansV1SearchPlan,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchPlan$outboundSchema.parse(getClientPlansV1SearchPlan),
  );
}

export function getClientPlansV1SearchPlanFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientPlansV1SearchPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchPlan' from JSON`,
  );
}

/** @internal */
export const GetClientPlansV1SearchData$inboundSchema: z.ZodType<
  GetClientPlansV1SearchData,
  z.ZodTypeDef,
  unknown
> = z.object({
  plans: z.array(z.lazy(() => GetClientPlansV1SearchPlan$inboundSchema))
    .optional(),
  count: z.number().int().optional(),
  sort_by: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
  });
});

/** @internal */
export type GetClientPlansV1SearchData$Outbound = {
  plans?: Array<GetClientPlansV1SearchPlan$Outbound> | undefined;
  count?: number | undefined;
  sort_by?: string | undefined;
  direction?: string | undefined;
};

/** @internal */
export const GetClientPlansV1SearchData$outboundSchema: z.ZodType<
  GetClientPlansV1SearchData$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchData
> = z.object({
  plans: z.array(z.lazy(() => GetClientPlansV1SearchPlan$outboundSchema))
    .optional(),
  count: z.number().int().optional(),
  sortBy: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchData$ {
  /** @deprecated use `GetClientPlansV1SearchData$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchData$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchData$outboundSchema` instead. */
  export const outboundSchema = GetClientPlansV1SearchData$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchData$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchData$Outbound;
}

export function getClientPlansV1SearchDataToJSON(
  getClientPlansV1SearchData: GetClientPlansV1SearchData,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchData$outboundSchema.parse(getClientPlansV1SearchData),
  );
}

export function getClientPlansV1SearchDataFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientPlansV1SearchData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchData' from JSON`,
  );
}

/** @internal */
export const GetClientPlansV1SearchResponseBody$inboundSchema: z.ZodType<
  GetClientPlansV1SearchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetClientPlansV1SearchData$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetClientPlansV1SearchResponseBody$Outbound = {
  data?: GetClientPlansV1SearchData$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetClientPlansV1SearchResponseBody$outboundSchema: z.ZodType<
  GetClientPlansV1SearchResponseBody$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchResponseBody
> = z.object({
  data: z.lazy(() => GetClientPlansV1SearchData$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchResponseBody$ {
  /** @deprecated use `GetClientPlansV1SearchResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchResponseBody$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetClientPlansV1SearchResponseBody$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchResponseBody$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchResponseBody$Outbound;
}

export function getClientPlansV1SearchResponseBodyToJSON(
  getClientPlansV1SearchResponseBody: GetClientPlansV1SearchResponseBody,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchResponseBody$outboundSchema.parse(
      getClientPlansV1SearchResponseBody,
    ),
  );
}

export function getClientPlansV1SearchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientPlansV1SearchResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchResponseBody' from JSON`,
  );
}

/** @internal */
export const GetClientPlansV1SearchResponse$inboundSchema: z.ZodType<
  GetClientPlansV1SearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetClientPlansV1SearchResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetClientPlansV1SearchResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetClientPlansV1SearchResponseBody$Outbound;
};

/** @internal */
export const GetClientPlansV1SearchResponse$outboundSchema: z.ZodType<
  GetClientPlansV1SearchResponse$Outbound,
  z.ZodTypeDef,
  GetClientPlansV1SearchResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetClientPlansV1SearchResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientPlansV1SearchResponse$ {
  /** @deprecated use `GetClientPlansV1SearchResponse$inboundSchema` instead. */
  export const inboundSchema = GetClientPlansV1SearchResponse$inboundSchema;
  /** @deprecated use `GetClientPlansV1SearchResponse$outboundSchema` instead. */
  export const outboundSchema = GetClientPlansV1SearchResponse$outboundSchema;
  /** @deprecated use `GetClientPlansV1SearchResponse$Outbound` instead. */
  export type Outbound = GetClientPlansV1SearchResponse$Outbound;
}

export function getClientPlansV1SearchResponseToJSON(
  getClientPlansV1SearchResponse: GetClientPlansV1SearchResponse,
): string {
  return JSON.stringify(
    GetClientPlansV1SearchResponse$outboundSchema.parse(
      getClientPlansV1SearchResponse,
    ),
  );
}

export function getClientPlansV1SearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientPlansV1SearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientPlansV1SearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientPlansV1SearchResponse' from JSON`,
  );
}
