/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetUserWalletsV1ContactCreatedAt = {
  seconds?: number | undefined;
};

export type GetUserWalletsV1ContactUpdatedAt = {
  seconds?: number | undefined;
};

export type GetUserWalletsV1Contact = {
  token?: string | undefined;
  user?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  isDefault?: boolean | undefined;
  createdAt?: GetUserWalletsV1ContactCreatedAt | undefined;
  updatedAt?: GetUserWalletsV1ContactUpdatedAt | undefined;
};

export type CybersourceCreatedAt = {
  seconds?: number | undefined;
};

export type CybersourceUpdatedAt = {
  seconds?: number | undefined;
};

export type GetUserWalletsV1Cybersource = {
  token?: string | undefined;
  paymentMethod?: string | undefined;
  scheme?: number | undefined;
  bin?: string | undefined;
  lastFour?: string | undefined;
  expiryMonth?: string | undefined;
  expiryYear?: string | undefined;
  createdAt?: CybersourceCreatedAt | undefined;
  updatedAt?: CybersourceUpdatedAt | undefined;
};

export type GetUserWalletsV1Data = {
  token?: string | undefined;
  user?: string | undefined;
  paymentMethodToken?: string | undefined;
  deduplicationKey?: string | undefined;
  intent?: string | undefined;
  last4?: string | undefined;
  instrumentType?: string | undefined;
  expiryMonth?: string | undefined;
  expiryYear?: string | undefined;
  contact?: GetUserWalletsV1Contact | undefined;
  address?: models.Address | undefined;
  cybersource?: GetUserWalletsV1Cybersource | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * 200
 */
export type GetUserWalletsV1ResponseBody = {
  data?: Array<GetUserWalletsV1Data> | undefined;
  status?: models.Status | undefined;
};

export type GetUserWalletsV1Response = {
  headers: { [k: string]: Array<string> };
  result: GetUserWalletsV1ResponseBody;
};

/** @internal */
export const GetUserWalletsV1ContactCreatedAt$inboundSchema: z.ZodType<
  GetUserWalletsV1ContactCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserWalletsV1ContactCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserWalletsV1ContactCreatedAt$outboundSchema: z.ZodType<
  GetUserWalletsV1ContactCreatedAt$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1ContactCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1ContactCreatedAt$ {
  /** @deprecated use `GetUserWalletsV1ContactCreatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1ContactCreatedAt$inboundSchema;
  /** @deprecated use `GetUserWalletsV1ContactCreatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1ContactCreatedAt$outboundSchema;
  /** @deprecated use `GetUserWalletsV1ContactCreatedAt$Outbound` instead. */
  export type Outbound = GetUserWalletsV1ContactCreatedAt$Outbound;
}

export function getUserWalletsV1ContactCreatedAtToJSON(
  getUserWalletsV1ContactCreatedAt: GetUserWalletsV1ContactCreatedAt,
): string {
  return JSON.stringify(
    GetUserWalletsV1ContactCreatedAt$outboundSchema.parse(
      getUserWalletsV1ContactCreatedAt,
    ),
  );
}

export function getUserWalletsV1ContactCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1ContactCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1ContactCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1ContactCreatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1ContactUpdatedAt$inboundSchema: z.ZodType<
  GetUserWalletsV1ContactUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserWalletsV1ContactUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserWalletsV1ContactUpdatedAt$outboundSchema: z.ZodType<
  GetUserWalletsV1ContactUpdatedAt$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1ContactUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1ContactUpdatedAt$ {
  /** @deprecated use `GetUserWalletsV1ContactUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1ContactUpdatedAt$inboundSchema;
  /** @deprecated use `GetUserWalletsV1ContactUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1ContactUpdatedAt$outboundSchema;
  /** @deprecated use `GetUserWalletsV1ContactUpdatedAt$Outbound` instead. */
  export type Outbound = GetUserWalletsV1ContactUpdatedAt$Outbound;
}

export function getUserWalletsV1ContactUpdatedAtToJSON(
  getUserWalletsV1ContactUpdatedAt: GetUserWalletsV1ContactUpdatedAt,
): string {
  return JSON.stringify(
    GetUserWalletsV1ContactUpdatedAt$outboundSchema.parse(
      getUserWalletsV1ContactUpdatedAt,
    ),
  );
}

export function getUserWalletsV1ContactUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1ContactUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1ContactUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1ContactUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1Contact$inboundSchema: z.ZodType<
  GetUserWalletsV1Contact,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  is_default: z.boolean().optional(),
  created_at: z.lazy(() => GetUserWalletsV1ContactCreatedAt$inboundSchema)
    .optional(),
  updated_at: z.lazy(() => GetUserWalletsV1ContactUpdatedAt$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "is_default": "isDefault",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserWalletsV1Contact$Outbound = {
  token?: string | undefined;
  user?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  is_default?: boolean | undefined;
  created_at?: GetUserWalletsV1ContactCreatedAt$Outbound | undefined;
  updated_at?: GetUserWalletsV1ContactUpdatedAt$Outbound | undefined;
};

/** @internal */
export const GetUserWalletsV1Contact$outboundSchema: z.ZodType<
  GetUserWalletsV1Contact$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1Contact
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.lazy(() => GetUserWalletsV1ContactCreatedAt$outboundSchema)
    .optional(),
  updatedAt: z.lazy(() => GetUserWalletsV1ContactUpdatedAt$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    isDefault: "is_default",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1Contact$ {
  /** @deprecated use `GetUserWalletsV1Contact$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1Contact$inboundSchema;
  /** @deprecated use `GetUserWalletsV1Contact$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1Contact$outboundSchema;
  /** @deprecated use `GetUserWalletsV1Contact$Outbound` instead. */
  export type Outbound = GetUserWalletsV1Contact$Outbound;
}

export function getUserWalletsV1ContactToJSON(
  getUserWalletsV1Contact: GetUserWalletsV1Contact,
): string {
  return JSON.stringify(
    GetUserWalletsV1Contact$outboundSchema.parse(getUserWalletsV1Contact),
  );
}

export function getUserWalletsV1ContactFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1Contact' from JSON`,
  );
}

/** @internal */
export const CybersourceCreatedAt$inboundSchema: z.ZodType<
  CybersourceCreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type CybersourceCreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const CybersourceCreatedAt$outboundSchema: z.ZodType<
  CybersourceCreatedAt$Outbound,
  z.ZodTypeDef,
  CybersourceCreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CybersourceCreatedAt$ {
  /** @deprecated use `CybersourceCreatedAt$inboundSchema` instead. */
  export const inboundSchema = CybersourceCreatedAt$inboundSchema;
  /** @deprecated use `CybersourceCreatedAt$outboundSchema` instead. */
  export const outboundSchema = CybersourceCreatedAt$outboundSchema;
  /** @deprecated use `CybersourceCreatedAt$Outbound` instead. */
  export type Outbound = CybersourceCreatedAt$Outbound;
}

export function cybersourceCreatedAtToJSON(
  cybersourceCreatedAt: CybersourceCreatedAt,
): string {
  return JSON.stringify(
    CybersourceCreatedAt$outboundSchema.parse(cybersourceCreatedAt),
  );
}

export function cybersourceCreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<CybersourceCreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CybersourceCreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CybersourceCreatedAt' from JSON`,
  );
}

/** @internal */
export const CybersourceUpdatedAt$inboundSchema: z.ZodType<
  CybersourceUpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type CybersourceUpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const CybersourceUpdatedAt$outboundSchema: z.ZodType<
  CybersourceUpdatedAt$Outbound,
  z.ZodTypeDef,
  CybersourceUpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CybersourceUpdatedAt$ {
  /** @deprecated use `CybersourceUpdatedAt$inboundSchema` instead. */
  export const inboundSchema = CybersourceUpdatedAt$inboundSchema;
  /** @deprecated use `CybersourceUpdatedAt$outboundSchema` instead. */
  export const outboundSchema = CybersourceUpdatedAt$outboundSchema;
  /** @deprecated use `CybersourceUpdatedAt$Outbound` instead. */
  export type Outbound = CybersourceUpdatedAt$Outbound;
}

export function cybersourceUpdatedAtToJSON(
  cybersourceUpdatedAt: CybersourceUpdatedAt,
): string {
  return JSON.stringify(
    CybersourceUpdatedAt$outboundSchema.parse(cybersourceUpdatedAt),
  );
}

export function cybersourceUpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<CybersourceUpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CybersourceUpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CybersourceUpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1Cybersource$inboundSchema: z.ZodType<
  GetUserWalletsV1Cybersource,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  payment_method: z.string().optional(),
  scheme: z.number().int().optional(),
  bin: z.string().optional(),
  last_four: z.string().optional(),
  expiry_month: z.string().optional(),
  expiry_year: z.string().optional(),
  created_at: z.lazy(() => CybersourceCreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => CybersourceUpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_method": "paymentMethod",
    "last_four": "lastFour",
    "expiry_month": "expiryMonth",
    "expiry_year": "expiryYear",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserWalletsV1Cybersource$Outbound = {
  token?: string | undefined;
  payment_method?: string | undefined;
  scheme?: number | undefined;
  bin?: string | undefined;
  last_four?: string | undefined;
  expiry_month?: string | undefined;
  expiry_year?: string | undefined;
  created_at?: CybersourceCreatedAt$Outbound | undefined;
  updated_at?: CybersourceUpdatedAt$Outbound | undefined;
};

/** @internal */
export const GetUserWalletsV1Cybersource$outboundSchema: z.ZodType<
  GetUserWalletsV1Cybersource$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1Cybersource
> = z.object({
  token: z.string().optional(),
  paymentMethod: z.string().optional(),
  scheme: z.number().int().optional(),
  bin: z.string().optional(),
  lastFour: z.string().optional(),
  expiryMonth: z.string().optional(),
  expiryYear: z.string().optional(),
  createdAt: z.lazy(() => CybersourceCreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => CybersourceUpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentMethod: "payment_method",
    lastFour: "last_four",
    expiryMonth: "expiry_month",
    expiryYear: "expiry_year",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1Cybersource$ {
  /** @deprecated use `GetUserWalletsV1Cybersource$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1Cybersource$inboundSchema;
  /** @deprecated use `GetUserWalletsV1Cybersource$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1Cybersource$outboundSchema;
  /** @deprecated use `GetUserWalletsV1Cybersource$Outbound` instead. */
  export type Outbound = GetUserWalletsV1Cybersource$Outbound;
}

export function getUserWalletsV1CybersourceToJSON(
  getUserWalletsV1Cybersource: GetUserWalletsV1Cybersource,
): string {
  return JSON.stringify(
    GetUserWalletsV1Cybersource$outboundSchema.parse(
      getUserWalletsV1Cybersource,
    ),
  );
}

export function getUserWalletsV1CybersourceFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1Cybersource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1Cybersource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1Cybersource' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1Data$inboundSchema: z.ZodType<
  GetUserWalletsV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  payment_method_token: z.string().optional(),
  deduplication_key: z.string().optional(),
  intent: z.string().optional(),
  last_4: z.string().optional(),
  instrument_type: z.string().optional(),
  expiry_month: z.string().optional(),
  expiry_year: z.string().optional(),
  contact: z.lazy(() => GetUserWalletsV1Contact$inboundSchema).optional(),
  address: models.Address$inboundSchema.optional(),
  cybersource: z.lazy(() => GetUserWalletsV1Cybersource$inboundSchema)
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "payment_method_token": "paymentMethodToken",
    "deduplication_key": "deduplicationKey",
    "last_4": "last4",
    "instrument_type": "instrumentType",
    "expiry_month": "expiryMonth",
    "expiry_year": "expiryYear",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserWalletsV1Data$Outbound = {
  token?: string | undefined;
  user?: string | undefined;
  payment_method_token?: string | undefined;
  deduplication_key?: string | undefined;
  intent?: string | undefined;
  last_4?: string | undefined;
  instrument_type?: string | undefined;
  expiry_month?: string | undefined;
  expiry_year?: string | undefined;
  contact?: GetUserWalletsV1Contact$Outbound | undefined;
  address?: models.Address$Outbound | undefined;
  cybersource?: GetUserWalletsV1Cybersource$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetUserWalletsV1Data$outboundSchema: z.ZodType<
  GetUserWalletsV1Data$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1Data
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  paymentMethodToken: z.string().optional(),
  deduplicationKey: z.string().optional(),
  intent: z.string().optional(),
  last4: z.string().optional(),
  instrumentType: z.string().optional(),
  expiryMonth: z.string().optional(),
  expiryYear: z.string().optional(),
  contact: z.lazy(() => GetUserWalletsV1Contact$outboundSchema).optional(),
  address: models.Address$outboundSchema.optional(),
  cybersource: z.lazy(() => GetUserWalletsV1Cybersource$outboundSchema)
    .optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    paymentMethodToken: "payment_method_token",
    deduplicationKey: "deduplication_key",
    last4: "last_4",
    instrumentType: "instrument_type",
    expiryMonth: "expiry_month",
    expiryYear: "expiry_year",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1Data$ {
  /** @deprecated use `GetUserWalletsV1Data$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1Data$inboundSchema;
  /** @deprecated use `GetUserWalletsV1Data$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1Data$outboundSchema;
  /** @deprecated use `GetUserWalletsV1Data$Outbound` instead. */
  export type Outbound = GetUserWalletsV1Data$Outbound;
}

export function getUserWalletsV1DataToJSON(
  getUserWalletsV1Data: GetUserWalletsV1Data,
): string {
  return JSON.stringify(
    GetUserWalletsV1Data$outboundSchema.parse(getUserWalletsV1Data),
  );
}

export function getUserWalletsV1DataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1Data' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1ResponseBody$inboundSchema: z.ZodType<
  GetUserWalletsV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetUserWalletsV1Data$inboundSchema)).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetUserWalletsV1ResponseBody$Outbound = {
  data?: Array<GetUserWalletsV1Data$Outbound> | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetUserWalletsV1ResponseBody$outboundSchema: z.ZodType<
  GetUserWalletsV1ResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1ResponseBody
> = z.object({
  data: z.array(z.lazy(() => GetUserWalletsV1Data$outboundSchema)).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1ResponseBody$ {
  /** @deprecated use `GetUserWalletsV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1ResponseBody$inboundSchema;
  /** @deprecated use `GetUserWalletsV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1ResponseBody$outboundSchema;
  /** @deprecated use `GetUserWalletsV1ResponseBody$Outbound` instead. */
  export type Outbound = GetUserWalletsV1ResponseBody$Outbound;
}

export function getUserWalletsV1ResponseBodyToJSON(
  getUserWalletsV1ResponseBody: GetUserWalletsV1ResponseBody,
): string {
  return JSON.stringify(
    GetUserWalletsV1ResponseBody$outboundSchema.parse(
      getUserWalletsV1ResponseBody,
    ),
  );
}

export function getUserWalletsV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserWalletsV1Response$inboundSchema: z.ZodType<
  GetUserWalletsV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserWalletsV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserWalletsV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserWalletsV1ResponseBody$Outbound;
};

/** @internal */
export const GetUserWalletsV1Response$outboundSchema: z.ZodType<
  GetUserWalletsV1Response$Outbound,
  z.ZodTypeDef,
  GetUserWalletsV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserWalletsV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserWalletsV1Response$ {
  /** @deprecated use `GetUserWalletsV1Response$inboundSchema` instead. */
  export const inboundSchema = GetUserWalletsV1Response$inboundSchema;
  /** @deprecated use `GetUserWalletsV1Response$outboundSchema` instead. */
  export const outboundSchema = GetUserWalletsV1Response$outboundSchema;
  /** @deprecated use `GetUserWalletsV1Response$Outbound` instead. */
  export type Outbound = GetUserWalletsV1Response$Outbound;
}

export function getUserWalletsV1ResponseToJSON(
  getUserWalletsV1Response: GetUserWalletsV1Response,
): string {
  return JSON.stringify(
    GetUserWalletsV1Response$outboundSchema.parse(getUserWalletsV1Response),
  );
}

export function getUserWalletsV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserWalletsV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserWalletsV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserWalletsV1Response' from JSON`,
  );
}
