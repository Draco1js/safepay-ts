/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1CompanyLoginList = {
  token?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  apiKey?: string | undefined;
  avatar?: string | undefined;
  website?: string | undefined;
  payoutTerms?: string | undefined;
  active?: number | undefined;
  suspended?: number | undefined;
  suspendReason?: string | undefined;
  emailSettings?: any | null | undefined;
  apiSettings?: any | null | undefined;
  organization?: any | null | undefined;
  verification?: any | null | undefined;
  verified?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostV1CompanyLoginData = {
  count?: number | undefined;
  list?: Array<PostV1CompanyLoginList> | undefined;
};

export type PostV1CompanyLoginStatus = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/**
 * Login Company
 */
export type PostV1CompanyLoginResponseBody = {
  data?: PostV1CompanyLoginData | undefined;
  status?: PostV1CompanyLoginStatus | undefined;
};

export type PostV1CompanyLoginResponse = {
  headers: { [k: string]: Array<string> };
  result: PostV1CompanyLoginResponseBody;
};

/** @internal */
export const PostV1CompanyLoginList$inboundSchema: z.ZodType<
  PostV1CompanyLoginList,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  api_key: z.string().optional(),
  avatar: z.string().optional(),
  website: z.string().optional(),
  payout_terms: z.string().optional(),
  active: z.number().int().optional(),
  suspended: z.number().int().optional(),
  suspend_reason: z.string().optional(),
  email_settings: z.nullable(z.any()).optional(),
  api_settings: z.nullable(z.any()).optional(),
  organization: z.nullable(z.any()).optional(),
  verification: z.nullable(z.any()).optional(),
  verified: z.number().int().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "payout_terms": "payoutTerms",
    "suspend_reason": "suspendReason",
    "email_settings": "emailSettings",
    "api_settings": "apiSettings",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PostV1CompanyLoginList$Outbound = {
  token?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  api_key?: string | undefined;
  avatar?: string | undefined;
  website?: string | undefined;
  payout_terms?: string | undefined;
  active?: number | undefined;
  suspended?: number | undefined;
  suspend_reason?: string | undefined;
  email_settings?: any | null | undefined;
  api_settings?: any | null | undefined;
  organization?: any | null | undefined;
  verification?: any | null | undefined;
  verified?: number | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PostV1CompanyLoginList$outboundSchema: z.ZodType<
  PostV1CompanyLoginList$Outbound,
  z.ZodTypeDef,
  PostV1CompanyLoginList
> = z.object({
  token: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  apiKey: z.string().optional(),
  avatar: z.string().optional(),
  website: z.string().optional(),
  payoutTerms: z.string().optional(),
  active: z.number().int().optional(),
  suspended: z.number().int().optional(),
  suspendReason: z.string().optional(),
  emailSettings: z.nullable(z.any()).optional(),
  apiSettings: z.nullable(z.any()).optional(),
  organization: z.nullable(z.any()).optional(),
  verification: z.nullable(z.any()).optional(),
  verified: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    payoutTerms: "payout_terms",
    suspendReason: "suspend_reason",
    emailSettings: "email_settings",
    apiSettings: "api_settings",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompanyLoginList$ {
  /** @deprecated use `PostV1CompanyLoginList$inboundSchema` instead. */
  export const inboundSchema = PostV1CompanyLoginList$inboundSchema;
  /** @deprecated use `PostV1CompanyLoginList$outboundSchema` instead. */
  export const outboundSchema = PostV1CompanyLoginList$outboundSchema;
  /** @deprecated use `PostV1CompanyLoginList$Outbound` instead. */
  export type Outbound = PostV1CompanyLoginList$Outbound;
}

export function postV1CompanyLoginListToJSON(
  postV1CompanyLoginList: PostV1CompanyLoginList,
): string {
  return JSON.stringify(
    PostV1CompanyLoginList$outboundSchema.parse(postV1CompanyLoginList),
  );
}

export function postV1CompanyLoginListFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompanyLoginList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompanyLoginList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompanyLoginList' from JSON`,
  );
}

/** @internal */
export const PostV1CompanyLoginData$inboundSchema: z.ZodType<
  PostV1CompanyLoginData,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => PostV1CompanyLoginList$inboundSchema)).optional(),
});

/** @internal */
export type PostV1CompanyLoginData$Outbound = {
  count?: number | undefined;
  list?: Array<PostV1CompanyLoginList$Outbound> | undefined;
};

/** @internal */
export const PostV1CompanyLoginData$outboundSchema: z.ZodType<
  PostV1CompanyLoginData$Outbound,
  z.ZodTypeDef,
  PostV1CompanyLoginData
> = z.object({
  count: z.number().int().optional(),
  list: z.array(z.lazy(() => PostV1CompanyLoginList$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompanyLoginData$ {
  /** @deprecated use `PostV1CompanyLoginData$inboundSchema` instead. */
  export const inboundSchema = PostV1CompanyLoginData$inboundSchema;
  /** @deprecated use `PostV1CompanyLoginData$outboundSchema` instead. */
  export const outboundSchema = PostV1CompanyLoginData$outboundSchema;
  /** @deprecated use `PostV1CompanyLoginData$Outbound` instead. */
  export type Outbound = PostV1CompanyLoginData$Outbound;
}

export function postV1CompanyLoginDataToJSON(
  postV1CompanyLoginData: PostV1CompanyLoginData,
): string {
  return JSON.stringify(
    PostV1CompanyLoginData$outboundSchema.parse(postV1CompanyLoginData),
  );
}

export function postV1CompanyLoginDataFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompanyLoginData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompanyLoginData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompanyLoginData' from JSON`,
  );
}

/** @internal */
export const PostV1CompanyLoginStatus$inboundSchema: z.ZodType<
  PostV1CompanyLoginStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostV1CompanyLoginStatus$Outbound = {
  errors?: Array<any> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostV1CompanyLoginStatus$outboundSchema: z.ZodType<
  PostV1CompanyLoginStatus$Outbound,
  z.ZodTypeDef,
  PostV1CompanyLoginStatus
> = z.object({
  errors: z.array(z.any()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompanyLoginStatus$ {
  /** @deprecated use `PostV1CompanyLoginStatus$inboundSchema` instead. */
  export const inboundSchema = PostV1CompanyLoginStatus$inboundSchema;
  /** @deprecated use `PostV1CompanyLoginStatus$outboundSchema` instead. */
  export const outboundSchema = PostV1CompanyLoginStatus$outboundSchema;
  /** @deprecated use `PostV1CompanyLoginStatus$Outbound` instead. */
  export type Outbound = PostV1CompanyLoginStatus$Outbound;
}

export function postV1CompanyLoginStatusToJSON(
  postV1CompanyLoginStatus: PostV1CompanyLoginStatus,
): string {
  return JSON.stringify(
    PostV1CompanyLoginStatus$outboundSchema.parse(postV1CompanyLoginStatus),
  );
}

export function postV1CompanyLoginStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompanyLoginStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompanyLoginStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompanyLoginStatus' from JSON`,
  );
}

/** @internal */
export const PostV1CompanyLoginResponseBody$inboundSchema: z.ZodType<
  PostV1CompanyLoginResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostV1CompanyLoginData$inboundSchema).optional(),
  status: z.lazy(() => PostV1CompanyLoginStatus$inboundSchema).optional(),
});

/** @internal */
export type PostV1CompanyLoginResponseBody$Outbound = {
  data?: PostV1CompanyLoginData$Outbound | undefined;
  status?: PostV1CompanyLoginStatus$Outbound | undefined;
};

/** @internal */
export const PostV1CompanyLoginResponseBody$outboundSchema: z.ZodType<
  PostV1CompanyLoginResponseBody$Outbound,
  z.ZodTypeDef,
  PostV1CompanyLoginResponseBody
> = z.object({
  data: z.lazy(() => PostV1CompanyLoginData$outboundSchema).optional(),
  status: z.lazy(() => PostV1CompanyLoginStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompanyLoginResponseBody$ {
  /** @deprecated use `PostV1CompanyLoginResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostV1CompanyLoginResponseBody$inboundSchema;
  /** @deprecated use `PostV1CompanyLoginResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostV1CompanyLoginResponseBody$outboundSchema;
  /** @deprecated use `PostV1CompanyLoginResponseBody$Outbound` instead. */
  export type Outbound = PostV1CompanyLoginResponseBody$Outbound;
}

export function postV1CompanyLoginResponseBodyToJSON(
  postV1CompanyLoginResponseBody: PostV1CompanyLoginResponseBody,
): string {
  return JSON.stringify(
    PostV1CompanyLoginResponseBody$outboundSchema.parse(
      postV1CompanyLoginResponseBody,
    ),
  );
}

export function postV1CompanyLoginResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompanyLoginResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompanyLoginResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompanyLoginResponseBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompanyLoginResponse$inboundSchema: z.ZodType<
  PostV1CompanyLoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostV1CompanyLoginResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostV1CompanyLoginResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostV1CompanyLoginResponseBody$Outbound;
};

/** @internal */
export const PostV1CompanyLoginResponse$outboundSchema: z.ZodType<
  PostV1CompanyLoginResponse$Outbound,
  z.ZodTypeDef,
  PostV1CompanyLoginResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostV1CompanyLoginResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompanyLoginResponse$ {
  /** @deprecated use `PostV1CompanyLoginResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1CompanyLoginResponse$inboundSchema;
  /** @deprecated use `PostV1CompanyLoginResponse$outboundSchema` instead. */
  export const outboundSchema = PostV1CompanyLoginResponse$outboundSchema;
  /** @deprecated use `PostV1CompanyLoginResponse$Outbound` instead. */
  export type Outbound = PostV1CompanyLoginResponse$Outbound;
}

export function postV1CompanyLoginResponseToJSON(
  postV1CompanyLoginResponse: PostV1CompanyLoginResponse,
): string {
  return JSON.stringify(
    PostV1CompanyLoginResponse$outboundSchema.parse(postV1CompanyLoginResponse),
  );
}

export function postV1CompanyLoginResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompanyLoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompanyLoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompanyLoginResponse' from JSON`,
  );
}
