/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostClientPassportV1TokenStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/**
 * 200
 */
export type PostClientPassportV1TokenResponseBody = {
  data?: string | undefined;
};

export type PostClientPassportV1TokenResponse = {
  headers: { [k: string]: Array<string> };
  result: PostClientPassportV1TokenResponseBody;
};

/** @internal */
export const PostClientPassportV1TokenStatus$inboundSchema: z.ZodType<
  PostClientPassportV1TokenStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostClientPassportV1TokenStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostClientPassportV1TokenStatus$outboundSchema: z.ZodType<
  PostClientPassportV1TokenStatus$Outbound,
  z.ZodTypeDef,
  PostClientPassportV1TokenStatus
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPassportV1TokenStatus$ {
  /** @deprecated use `PostClientPassportV1TokenStatus$inboundSchema` instead. */
  export const inboundSchema = PostClientPassportV1TokenStatus$inboundSchema;
  /** @deprecated use `PostClientPassportV1TokenStatus$outboundSchema` instead. */
  export const outboundSchema = PostClientPassportV1TokenStatus$outboundSchema;
  /** @deprecated use `PostClientPassportV1TokenStatus$Outbound` instead. */
  export type Outbound = PostClientPassportV1TokenStatus$Outbound;
}

export function postClientPassportV1TokenStatusToJSON(
  postClientPassportV1TokenStatus: PostClientPassportV1TokenStatus,
): string {
  return JSON.stringify(
    PostClientPassportV1TokenStatus$outboundSchema.parse(
      postClientPassportV1TokenStatus,
    ),
  );
}

export function postClientPassportV1TokenStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPassportV1TokenStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPassportV1TokenStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPassportV1TokenStatus' from JSON`,
  );
}

/** @internal */
export const PostClientPassportV1TokenResponseBody$inboundSchema: z.ZodType<
  PostClientPassportV1TokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().optional(),
});

/** @internal */
export type PostClientPassportV1TokenResponseBody$Outbound = {
  data?: string | undefined;
};

/** @internal */
export const PostClientPassportV1TokenResponseBody$outboundSchema: z.ZodType<
  PostClientPassportV1TokenResponseBody$Outbound,
  z.ZodTypeDef,
  PostClientPassportV1TokenResponseBody
> = z.object({
  data: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPassportV1TokenResponseBody$ {
  /** @deprecated use `PostClientPassportV1TokenResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostClientPassportV1TokenResponseBody$inboundSchema;
  /** @deprecated use `PostClientPassportV1TokenResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostClientPassportV1TokenResponseBody$outboundSchema;
  /** @deprecated use `PostClientPassportV1TokenResponseBody$Outbound` instead. */
  export type Outbound = PostClientPassportV1TokenResponseBody$Outbound;
}

export function postClientPassportV1TokenResponseBodyToJSON(
  postClientPassportV1TokenResponseBody: PostClientPassportV1TokenResponseBody,
): string {
  return JSON.stringify(
    PostClientPassportV1TokenResponseBody$outboundSchema.parse(
      postClientPassportV1TokenResponseBody,
    ),
  );
}

export function postClientPassportV1TokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPassportV1TokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostClientPassportV1TokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPassportV1TokenResponseBody' from JSON`,
  );
}

/** @internal */
export const PostClientPassportV1TokenResponse$inboundSchema: z.ZodType<
  PostClientPassportV1TokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostClientPassportV1TokenResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostClientPassportV1TokenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostClientPassportV1TokenResponseBody$Outbound;
};

/** @internal */
export const PostClientPassportV1TokenResponse$outboundSchema: z.ZodType<
  PostClientPassportV1TokenResponse$Outbound,
  z.ZodTypeDef,
  PostClientPassportV1TokenResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostClientPassportV1TokenResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientPassportV1TokenResponse$ {
  /** @deprecated use `PostClientPassportV1TokenResponse$inboundSchema` instead. */
  export const inboundSchema = PostClientPassportV1TokenResponse$inboundSchema;
  /** @deprecated use `PostClientPassportV1TokenResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostClientPassportV1TokenResponse$outboundSchema;
  /** @deprecated use `PostClientPassportV1TokenResponse$Outbound` instead. */
  export type Outbound = PostClientPassportV1TokenResponse$Outbound;
}

export function postClientPassportV1TokenResponseToJSON(
  postClientPassportV1TokenResponse: PostClientPassportV1TokenResponse,
): string {
  return JSON.stringify(
    PostClientPassportV1TokenResponse$outboundSchema.parse(
      postClientPassportV1TokenResponse,
    ),
  );
}

export function postClientPassportV1TokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostClientPassportV1TokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientPassportV1TokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientPassportV1TokenResponse' from JSON`,
  );
}
