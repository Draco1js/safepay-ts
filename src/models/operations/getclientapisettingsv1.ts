/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetClientApiSettingsV1Data = {
  clientId?: string | undefined;
  createdAt?: Date | undefined;
  token?: string | undefined;
  updatedAt?: Date | undefined;
  webhookSecret?: string | undefined;
};

/**
 * 200
 */
export type GetClientApiSettingsV1ResponseBody = {
  data?: GetClientApiSettingsV1Data | undefined;
  status?: models.Status | undefined;
};

export type GetClientApiSettingsV1Response = {
  headers: { [k: string]: Array<string> };
  result: GetClientApiSettingsV1ResponseBody;
};

/** @internal */
export const GetClientApiSettingsV1Data$inboundSchema: z.ZodType<
  GetClientApiSettingsV1Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  token: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  webhook_secret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "webhook_secret": "webhookSecret",
  });
});

/** @internal */
export type GetClientApiSettingsV1Data$Outbound = {
  client_id?: string | undefined;
  created_at?: string | undefined;
  token?: string | undefined;
  updated_at?: string | undefined;
  webhook_secret?: string | undefined;
};

/** @internal */
export const GetClientApiSettingsV1Data$outboundSchema: z.ZodType<
  GetClientApiSettingsV1Data$Outbound,
  z.ZodTypeDef,
  GetClientApiSettingsV1Data
> = z.object({
  clientId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  token: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  webhookSecret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    webhookSecret: "webhook_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientApiSettingsV1Data$ {
  /** @deprecated use `GetClientApiSettingsV1Data$inboundSchema` instead. */
  export const inboundSchema = GetClientApiSettingsV1Data$inboundSchema;
  /** @deprecated use `GetClientApiSettingsV1Data$outboundSchema` instead. */
  export const outboundSchema = GetClientApiSettingsV1Data$outboundSchema;
  /** @deprecated use `GetClientApiSettingsV1Data$Outbound` instead. */
  export type Outbound = GetClientApiSettingsV1Data$Outbound;
}

export function getClientApiSettingsV1DataToJSON(
  getClientApiSettingsV1Data: GetClientApiSettingsV1Data,
): string {
  return JSON.stringify(
    GetClientApiSettingsV1Data$outboundSchema.parse(getClientApiSettingsV1Data),
  );
}

export function getClientApiSettingsV1DataFromJSON(
  jsonString: string,
): SafeParseResult<GetClientApiSettingsV1Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientApiSettingsV1Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientApiSettingsV1Data' from JSON`,
  );
}

/** @internal */
export const GetClientApiSettingsV1ResponseBody$inboundSchema: z.ZodType<
  GetClientApiSettingsV1ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetClientApiSettingsV1Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetClientApiSettingsV1ResponseBody$Outbound = {
  data?: GetClientApiSettingsV1Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetClientApiSettingsV1ResponseBody$outboundSchema: z.ZodType<
  GetClientApiSettingsV1ResponseBody$Outbound,
  z.ZodTypeDef,
  GetClientApiSettingsV1ResponseBody
> = z.object({
  data: z.lazy(() => GetClientApiSettingsV1Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientApiSettingsV1ResponseBody$ {
  /** @deprecated use `GetClientApiSettingsV1ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetClientApiSettingsV1ResponseBody$inboundSchema;
  /** @deprecated use `GetClientApiSettingsV1ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetClientApiSettingsV1ResponseBody$outboundSchema;
  /** @deprecated use `GetClientApiSettingsV1ResponseBody$Outbound` instead. */
  export type Outbound = GetClientApiSettingsV1ResponseBody$Outbound;
}

export function getClientApiSettingsV1ResponseBodyToJSON(
  getClientApiSettingsV1ResponseBody: GetClientApiSettingsV1ResponseBody,
): string {
  return JSON.stringify(
    GetClientApiSettingsV1ResponseBody$outboundSchema.parse(
      getClientApiSettingsV1ResponseBody,
    ),
  );
}

export function getClientApiSettingsV1ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetClientApiSettingsV1ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientApiSettingsV1ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientApiSettingsV1ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetClientApiSettingsV1Response$inboundSchema: z.ZodType<
  GetClientApiSettingsV1Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetClientApiSettingsV1ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetClientApiSettingsV1Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetClientApiSettingsV1ResponseBody$Outbound;
};

/** @internal */
export const GetClientApiSettingsV1Response$outboundSchema: z.ZodType<
  GetClientApiSettingsV1Response$Outbound,
  z.ZodTypeDef,
  GetClientApiSettingsV1Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetClientApiSettingsV1ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientApiSettingsV1Response$ {
  /** @deprecated use `GetClientApiSettingsV1Response$inboundSchema` instead. */
  export const inboundSchema = GetClientApiSettingsV1Response$inboundSchema;
  /** @deprecated use `GetClientApiSettingsV1Response$outboundSchema` instead. */
  export const outboundSchema = GetClientApiSettingsV1Response$outboundSchema;
  /** @deprecated use `GetClientApiSettingsV1Response$Outbound` instead. */
  export type Outbound = GetClientApiSettingsV1Response$Outbound;
}

export function getClientApiSettingsV1ResponseToJSON(
  getClientApiSettingsV1Response: GetClientApiSettingsV1Response,
): string {
  return JSON.stringify(
    GetClientApiSettingsV1Response$outboundSchema.parse(
      getClientApiSettingsV1Response,
    ),
  );
}

export function getClientApiSettingsV1ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientApiSettingsV1Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientApiSettingsV1Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientApiSettingsV1Response' from JSON`,
  );
}
