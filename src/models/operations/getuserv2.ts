/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetUserV2CreatedAt = {
  seconds?: number | undefined;
};

export type GetUserV2UpdatedAt = {
  seconds?: number | undefined;
};

export type GetUserV2Contact = {
  token?: string | undefined;
  user?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  isDefault?: boolean | undefined;
  createdAt?: GetUserV2CreatedAt | undefined;
  updatedAt?: GetUserV2UpdatedAt | undefined;
};

export type GetUserV2Verification = {
  userId?: string | undefined;
  code?: string | undefined;
  verificationType?: number | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetUserV2Data = {
  token?: string | undefined;
  contacts?: Array<GetUserV2Contact> | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  suspended?: number | undefined;
  suspendReason?: string | undefined;
  verified?: number | undefined;
  verification?: GetUserV2Verification | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/**
 * 200
 */
export type GetUserV2ResponseBody = {
  data?: GetUserV2Data | undefined;
  status?: models.Status | undefined;
};

export type GetUserV2Response = {
  headers: { [k: string]: Array<string> };
  result: GetUserV2ResponseBody;
};

/** @internal */
export const GetUserV2CreatedAt$inboundSchema: z.ZodType<
  GetUserV2CreatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserV2CreatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserV2CreatedAt$outboundSchema: z.ZodType<
  GetUserV2CreatedAt$Outbound,
  z.ZodTypeDef,
  GetUserV2CreatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2CreatedAt$ {
  /** @deprecated use `GetUserV2CreatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserV2CreatedAt$inboundSchema;
  /** @deprecated use `GetUserV2CreatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserV2CreatedAt$outboundSchema;
  /** @deprecated use `GetUserV2CreatedAt$Outbound` instead. */
  export type Outbound = GetUserV2CreatedAt$Outbound;
}

export function getUserV2CreatedAtToJSON(
  getUserV2CreatedAt: GetUserV2CreatedAt,
): string {
  return JSON.stringify(
    GetUserV2CreatedAt$outboundSchema.parse(getUserV2CreatedAt),
  );
}

export function getUserV2CreatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2CreatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2CreatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2CreatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserV2UpdatedAt$inboundSchema: z.ZodType<
  GetUserV2UpdatedAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type GetUserV2UpdatedAt$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const GetUserV2UpdatedAt$outboundSchema: z.ZodType<
  GetUserV2UpdatedAt$Outbound,
  z.ZodTypeDef,
  GetUserV2UpdatedAt
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2UpdatedAt$ {
  /** @deprecated use `GetUserV2UpdatedAt$inboundSchema` instead. */
  export const inboundSchema = GetUserV2UpdatedAt$inboundSchema;
  /** @deprecated use `GetUserV2UpdatedAt$outboundSchema` instead. */
  export const outboundSchema = GetUserV2UpdatedAt$outboundSchema;
  /** @deprecated use `GetUserV2UpdatedAt$Outbound` instead. */
  export type Outbound = GetUserV2UpdatedAt$Outbound;
}

export function getUserV2UpdatedAtToJSON(
  getUserV2UpdatedAt: GetUserV2UpdatedAt,
): string {
  return JSON.stringify(
    GetUserV2UpdatedAt$outboundSchema.parse(getUserV2UpdatedAt),
  );
}

export function getUserV2UpdatedAtFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2UpdatedAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2UpdatedAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2UpdatedAt' from JSON`,
  );
}

/** @internal */
export const GetUserV2Contact$inboundSchema: z.ZodType<
  GetUserV2Contact,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  is_default: z.boolean().optional(),
  created_at: z.lazy(() => GetUserV2CreatedAt$inboundSchema).optional(),
  updated_at: z.lazy(() => GetUserV2UpdatedAt$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "is_default": "isDefault",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserV2Contact$Outbound = {
  token?: string | undefined;
  user?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  is_default?: boolean | undefined;
  created_at?: GetUserV2CreatedAt$Outbound | undefined;
  updated_at?: GetUserV2UpdatedAt$Outbound | undefined;
};

/** @internal */
export const GetUserV2Contact$outboundSchema: z.ZodType<
  GetUserV2Contact$Outbound,
  z.ZodTypeDef,
  GetUserV2Contact
> = z.object({
  token: z.string().optional(),
  user: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.lazy(() => GetUserV2CreatedAt$outboundSchema).optional(),
  updatedAt: z.lazy(() => GetUserV2UpdatedAt$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    isDefault: "is_default",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2Contact$ {
  /** @deprecated use `GetUserV2Contact$inboundSchema` instead. */
  export const inboundSchema = GetUserV2Contact$inboundSchema;
  /** @deprecated use `GetUserV2Contact$outboundSchema` instead. */
  export const outboundSchema = GetUserV2Contact$outboundSchema;
  /** @deprecated use `GetUserV2Contact$Outbound` instead. */
  export type Outbound = GetUserV2Contact$Outbound;
}

export function getUserV2ContactToJSON(
  getUserV2Contact: GetUserV2Contact,
): string {
  return JSON.stringify(
    GetUserV2Contact$outboundSchema.parse(getUserV2Contact),
  );
}

export function getUserV2ContactFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2Contact' from JSON`,
  );
}

/** @internal */
export const GetUserV2Verification$inboundSchema: z.ZodType<
  GetUserV2Verification,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  code: z.string().optional(),
  verification_type: z.number().int().optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "verification_type": "verificationType",
    "expires_at": "expiresAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserV2Verification$Outbound = {
  user_id?: string | undefined;
  code?: string | undefined;
  verification_type?: number | undefined;
  expires_at?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetUserV2Verification$outboundSchema: z.ZodType<
  GetUserV2Verification$Outbound,
  z.ZodTypeDef,
  GetUserV2Verification
> = z.object({
  userId: z.string().optional(),
  code: z.string().optional(),
  verificationType: z.number().int().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    verificationType: "verification_type",
    expiresAt: "expires_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2Verification$ {
  /** @deprecated use `GetUserV2Verification$inboundSchema` instead. */
  export const inboundSchema = GetUserV2Verification$inboundSchema;
  /** @deprecated use `GetUserV2Verification$outboundSchema` instead. */
  export const outboundSchema = GetUserV2Verification$outboundSchema;
  /** @deprecated use `GetUserV2Verification$Outbound` instead. */
  export type Outbound = GetUserV2Verification$Outbound;
}

export function getUserV2VerificationToJSON(
  getUserV2Verification: GetUserV2Verification,
): string {
  return JSON.stringify(
    GetUserV2Verification$outboundSchema.parse(getUserV2Verification),
  );
}

export function getUserV2VerificationFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2Verification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2Verification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2Verification' from JSON`,
  );
}

/** @internal */
export const GetUserV2Data$inboundSchema: z.ZodType<
  GetUserV2Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  contacts: z.array(z.lazy(() => GetUserV2Contact$inboundSchema)).optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  suspended: z.number().int().optional(),
  suspend_reason: z.string().optional(),
  verified: z.number().int().optional(),
  verification: z.lazy(() => GetUserV2Verification$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "suspend_reason": "suspendReason",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetUserV2Data$Outbound = {
  token?: string | undefined;
  contacts?: Array<GetUserV2Contact$Outbound> | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  suspended?: number | undefined;
  suspend_reason?: string | undefined;
  verified?: number | undefined;
  verification?: GetUserV2Verification$Outbound | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const GetUserV2Data$outboundSchema: z.ZodType<
  GetUserV2Data$Outbound,
  z.ZodTypeDef,
  GetUserV2Data
> = z.object({
  token: z.string().optional(),
  contacts: z.array(z.lazy(() => GetUserV2Contact$outboundSchema)).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  suspended: z.number().int().optional(),
  suspendReason: z.string().optional(),
  verified: z.number().int().optional(),
  verification: z.lazy(() => GetUserV2Verification$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    suspendReason: "suspend_reason",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2Data$ {
  /** @deprecated use `GetUserV2Data$inboundSchema` instead. */
  export const inboundSchema = GetUserV2Data$inboundSchema;
  /** @deprecated use `GetUserV2Data$outboundSchema` instead. */
  export const outboundSchema = GetUserV2Data$outboundSchema;
  /** @deprecated use `GetUserV2Data$Outbound` instead. */
  export type Outbound = GetUserV2Data$Outbound;
}

export function getUserV2DataToJSON(getUserV2Data: GetUserV2Data): string {
  return JSON.stringify(GetUserV2Data$outboundSchema.parse(getUserV2Data));
}

export function getUserV2DataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2Data' from JSON`,
  );
}

/** @internal */
export const GetUserV2ResponseBody$inboundSchema: z.ZodType<
  GetUserV2ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetUserV2Data$inboundSchema).optional(),
  status: models.Status$inboundSchema.optional(),
});

/** @internal */
export type GetUserV2ResponseBody$Outbound = {
  data?: GetUserV2Data$Outbound | undefined;
  status?: models.Status$Outbound | undefined;
};

/** @internal */
export const GetUserV2ResponseBody$outboundSchema: z.ZodType<
  GetUserV2ResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserV2ResponseBody
> = z.object({
  data: z.lazy(() => GetUserV2Data$outboundSchema).optional(),
  status: models.Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2ResponseBody$ {
  /** @deprecated use `GetUserV2ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserV2ResponseBody$inboundSchema;
  /** @deprecated use `GetUserV2ResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserV2ResponseBody$outboundSchema;
  /** @deprecated use `GetUserV2ResponseBody$Outbound` instead. */
  export type Outbound = GetUserV2ResponseBody$Outbound;
}

export function getUserV2ResponseBodyToJSON(
  getUserV2ResponseBody: GetUserV2ResponseBody,
): string {
  return JSON.stringify(
    GetUserV2ResponseBody$outboundSchema.parse(getUserV2ResponseBody),
  );
}

export function getUserV2ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserV2Response$inboundSchema: z.ZodType<
  GetUserV2Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserV2ResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserV2Response$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserV2ResponseBody$Outbound;
};

/** @internal */
export const GetUserV2Response$outboundSchema: z.ZodType<
  GetUserV2Response$Outbound,
  z.ZodTypeDef,
  GetUserV2Response
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserV2ResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2Response$ {
  /** @deprecated use `GetUserV2Response$inboundSchema` instead. */
  export const inboundSchema = GetUserV2Response$inboundSchema;
  /** @deprecated use `GetUserV2Response$outboundSchema` instead. */
  export const outboundSchema = GetUserV2Response$outboundSchema;
  /** @deprecated use `GetUserV2Response$Outbound` instead. */
  export type Outbound = GetUserV2Response$Outbound;
}

export function getUserV2ResponseToJSON(
  getUserV2Response: GetUserV2Response,
): string {
  return JSON.stringify(
    GetUserV2Response$outboundSchema.parse(getUserV2Response),
  );
}

export function getUserV2ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2Response' from JSON`,
  );
}
