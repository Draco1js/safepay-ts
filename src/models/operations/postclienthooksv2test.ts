/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostClientHooksV2TestRequest = {
  event?: string | undefined;
  identifier?: string | undefined;
};

export type PostClientHooksV2TestStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type Details = {
  event?: string | undefined;
};

export type PostClientHooksV2TestData = {
  isSuccess?: boolean | undefined;
};

/**
 * 200
 */
export type PostClientHooksV2TestResponseBody = {
  data?: PostClientHooksV2TestData | undefined;
};

export type PostClientHooksV2TestResponse = {
  headers: { [k: string]: Array<string> };
  result: PostClientHooksV2TestResponseBody;
};

/** @internal */
export const PostClientHooksV2TestRequest$inboundSchema: z.ZodType<
  PostClientHooksV2TestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.string().optional(),
  identifier: z.string().optional(),
});

/** @internal */
export type PostClientHooksV2TestRequest$Outbound = {
  event?: string | undefined;
  identifier?: string | undefined;
};

/** @internal */
export const PostClientHooksV2TestRequest$outboundSchema: z.ZodType<
  PostClientHooksV2TestRequest$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestRequest
> = z.object({
  event: z.string().optional(),
  identifier: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestRequest$ {
  /** @deprecated use `PostClientHooksV2TestRequest$inboundSchema` instead. */
  export const inboundSchema = PostClientHooksV2TestRequest$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestRequest$outboundSchema` instead. */
  export const outboundSchema = PostClientHooksV2TestRequest$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestRequest$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestRequest$Outbound;
}

export function postClientHooksV2TestRequestToJSON(
  postClientHooksV2TestRequest: PostClientHooksV2TestRequest,
): string {
  return JSON.stringify(
    PostClientHooksV2TestRequest$outboundSchema.parse(
      postClientHooksV2TestRequest,
    ),
  );
}

export function postClientHooksV2TestRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostClientHooksV2TestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientHooksV2TestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientHooksV2TestRequest' from JSON`,
  );
}

/** @internal */
export const PostClientHooksV2TestStatus$inboundSchema: z.ZodType<
  PostClientHooksV2TestStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type PostClientHooksV2TestStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const PostClientHooksV2TestStatus$outboundSchema: z.ZodType<
  PostClientHooksV2TestStatus$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestStatus
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestStatus$ {
  /** @deprecated use `PostClientHooksV2TestStatus$inboundSchema` instead. */
  export const inboundSchema = PostClientHooksV2TestStatus$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestStatus$outboundSchema` instead. */
  export const outboundSchema = PostClientHooksV2TestStatus$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestStatus$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestStatus$Outbound;
}

export function postClientHooksV2TestStatusToJSON(
  postClientHooksV2TestStatus: PostClientHooksV2TestStatus,
): string {
  return JSON.stringify(
    PostClientHooksV2TestStatus$outboundSchema.parse(
      postClientHooksV2TestStatus,
    ),
  );
}

export function postClientHooksV2TestStatusFromJSON(
  jsonString: string,
): SafeParseResult<PostClientHooksV2TestStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientHooksV2TestStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientHooksV2TestStatus' from JSON`,
  );
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    event: z.string().optional(),
  });

/** @internal */
export type Details$Outbound = {
  event?: string | undefined;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  event: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const PostClientHooksV2TestData$inboundSchema: z.ZodType<
  PostClientHooksV2TestData,
  z.ZodTypeDef,
  unknown
> = z.object({
  is_success: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_success": "isSuccess",
  });
});

/** @internal */
export type PostClientHooksV2TestData$Outbound = {
  is_success?: boolean | undefined;
};

/** @internal */
export const PostClientHooksV2TestData$outboundSchema: z.ZodType<
  PostClientHooksV2TestData$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestData
> = z.object({
  isSuccess: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isSuccess: "is_success",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestData$ {
  /** @deprecated use `PostClientHooksV2TestData$inboundSchema` instead. */
  export const inboundSchema = PostClientHooksV2TestData$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestData$outboundSchema` instead. */
  export const outboundSchema = PostClientHooksV2TestData$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestData$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestData$Outbound;
}

export function postClientHooksV2TestDataToJSON(
  postClientHooksV2TestData: PostClientHooksV2TestData,
): string {
  return JSON.stringify(
    PostClientHooksV2TestData$outboundSchema.parse(postClientHooksV2TestData),
  );
}

export function postClientHooksV2TestDataFromJSON(
  jsonString: string,
): SafeParseResult<PostClientHooksV2TestData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientHooksV2TestData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientHooksV2TestData' from JSON`,
  );
}

/** @internal */
export const PostClientHooksV2TestResponseBody$inboundSchema: z.ZodType<
  PostClientHooksV2TestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostClientHooksV2TestData$inboundSchema).optional(),
});

/** @internal */
export type PostClientHooksV2TestResponseBody$Outbound = {
  data?: PostClientHooksV2TestData$Outbound | undefined;
};

/** @internal */
export const PostClientHooksV2TestResponseBody$outboundSchema: z.ZodType<
  PostClientHooksV2TestResponseBody$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestResponseBody
> = z.object({
  data: z.lazy(() => PostClientHooksV2TestData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestResponseBody$ {
  /** @deprecated use `PostClientHooksV2TestResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostClientHooksV2TestResponseBody$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostClientHooksV2TestResponseBody$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestResponseBody$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestResponseBody$Outbound;
}

export function postClientHooksV2TestResponseBodyToJSON(
  postClientHooksV2TestResponseBody: PostClientHooksV2TestResponseBody,
): string {
  return JSON.stringify(
    PostClientHooksV2TestResponseBody$outboundSchema.parse(
      postClientHooksV2TestResponseBody,
    ),
  );
}

export function postClientHooksV2TestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostClientHooksV2TestResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientHooksV2TestResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientHooksV2TestResponseBody' from JSON`,
  );
}

/** @internal */
export const PostClientHooksV2TestResponse$inboundSchema: z.ZodType<
  PostClientHooksV2TestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostClientHooksV2TestResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostClientHooksV2TestResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostClientHooksV2TestResponseBody$Outbound;
};

/** @internal */
export const PostClientHooksV2TestResponse$outboundSchema: z.ZodType<
  PostClientHooksV2TestResponse$Outbound,
  z.ZodTypeDef,
  PostClientHooksV2TestResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostClientHooksV2TestResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostClientHooksV2TestResponse$ {
  /** @deprecated use `PostClientHooksV2TestResponse$inboundSchema` instead. */
  export const inboundSchema = PostClientHooksV2TestResponse$inboundSchema;
  /** @deprecated use `PostClientHooksV2TestResponse$outboundSchema` instead. */
  export const outboundSchema = PostClientHooksV2TestResponse$outboundSchema;
  /** @deprecated use `PostClientHooksV2TestResponse$Outbound` instead. */
  export type Outbound = PostClientHooksV2TestResponse$Outbound;
}

export function postClientHooksV2TestResponseToJSON(
  postClientHooksV2TestResponse: PostClientHooksV2TestResponse,
): string {
  return JSON.stringify(
    PostClientHooksV2TestResponse$outboundSchema.parse(
      postClientHooksV2TestResponse,
    ),
  );
}

export function postClientHooksV2TestResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostClientHooksV2TestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostClientHooksV2TestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostClientHooksV2TestResponse' from JSON`,
  );
}
