/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserV2ExistsRequest = {
  email?: string | undefined;
};

export type GetUserV2ExistsData = {
  exists?: boolean | undefined;
  isLocal?: boolean | undefined;
  hasPassword?: boolean | undefined;
  phone?: string | undefined;
  email?: string | undefined;
};

/**
 * 200 - Exists
 */
export type GetUserV2ExistsResponseBody = {
  data?: GetUserV2ExistsData | undefined;
};

export type GetUserV2ExistsResponse = {
  headers: { [k: string]: Array<string> };
  result: GetUserV2ExistsResponseBody;
};

/** @internal */
export const GetUserV2ExistsRequest$inboundSchema: z.ZodType<
  GetUserV2ExistsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
});

/** @internal */
export type GetUserV2ExistsRequest$Outbound = {
  email?: string | undefined;
};

/** @internal */
export const GetUserV2ExistsRequest$outboundSchema: z.ZodType<
  GetUserV2ExistsRequest$Outbound,
  z.ZodTypeDef,
  GetUserV2ExistsRequest
> = z.object({
  email: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2ExistsRequest$ {
  /** @deprecated use `GetUserV2ExistsRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserV2ExistsRequest$inboundSchema;
  /** @deprecated use `GetUserV2ExistsRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserV2ExistsRequest$outboundSchema;
  /** @deprecated use `GetUserV2ExistsRequest$Outbound` instead. */
  export type Outbound = GetUserV2ExistsRequest$Outbound;
}

export function getUserV2ExistsRequestToJSON(
  getUserV2ExistsRequest: GetUserV2ExistsRequest,
): string {
  return JSON.stringify(
    GetUserV2ExistsRequest$outboundSchema.parse(getUserV2ExistsRequest),
  );
}

export function getUserV2ExistsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2ExistsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2ExistsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2ExistsRequest' from JSON`,
  );
}

/** @internal */
export const GetUserV2ExistsData$inboundSchema: z.ZodType<
  GetUserV2ExistsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  exists: z.boolean().optional(),
  is_local: z.boolean().optional(),
  has_password: z.boolean().optional(),
  phone: z.string().optional(),
  email: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_local": "isLocal",
    "has_password": "hasPassword",
  });
});

/** @internal */
export type GetUserV2ExistsData$Outbound = {
  exists?: boolean | undefined;
  is_local?: boolean | undefined;
  has_password?: boolean | undefined;
  phone?: string | undefined;
  email?: string | undefined;
};

/** @internal */
export const GetUserV2ExistsData$outboundSchema: z.ZodType<
  GetUserV2ExistsData$Outbound,
  z.ZodTypeDef,
  GetUserV2ExistsData
> = z.object({
  exists: z.boolean().optional(),
  isLocal: z.boolean().optional(),
  hasPassword: z.boolean().optional(),
  phone: z.string().optional(),
  email: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    isLocal: "is_local",
    hasPassword: "has_password",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2ExistsData$ {
  /** @deprecated use `GetUserV2ExistsData$inboundSchema` instead. */
  export const inboundSchema = GetUserV2ExistsData$inboundSchema;
  /** @deprecated use `GetUserV2ExistsData$outboundSchema` instead. */
  export const outboundSchema = GetUserV2ExistsData$outboundSchema;
  /** @deprecated use `GetUserV2ExistsData$Outbound` instead. */
  export type Outbound = GetUserV2ExistsData$Outbound;
}

export function getUserV2ExistsDataToJSON(
  getUserV2ExistsData: GetUserV2ExistsData,
): string {
  return JSON.stringify(
    GetUserV2ExistsData$outboundSchema.parse(getUserV2ExistsData),
  );
}

export function getUserV2ExistsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2ExistsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2ExistsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2ExistsData' from JSON`,
  );
}

/** @internal */
export const GetUserV2ExistsResponseBody$inboundSchema: z.ZodType<
  GetUserV2ExistsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetUserV2ExistsData$inboundSchema).optional(),
});

/** @internal */
export type GetUserV2ExistsResponseBody$Outbound = {
  data?: GetUserV2ExistsData$Outbound | undefined;
};

/** @internal */
export const GetUserV2ExistsResponseBody$outboundSchema: z.ZodType<
  GetUserV2ExistsResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserV2ExistsResponseBody
> = z.object({
  data: z.lazy(() => GetUserV2ExistsData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2ExistsResponseBody$ {
  /** @deprecated use `GetUserV2ExistsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserV2ExistsResponseBody$inboundSchema;
  /** @deprecated use `GetUserV2ExistsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserV2ExistsResponseBody$outboundSchema;
  /** @deprecated use `GetUserV2ExistsResponseBody$Outbound` instead. */
  export type Outbound = GetUserV2ExistsResponseBody$Outbound;
}

export function getUserV2ExistsResponseBodyToJSON(
  getUserV2ExistsResponseBody: GetUserV2ExistsResponseBody,
): string {
  return JSON.stringify(
    GetUserV2ExistsResponseBody$outboundSchema.parse(
      getUserV2ExistsResponseBody,
    ),
  );
}

export function getUserV2ExistsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2ExistsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2ExistsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2ExistsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUserV2ExistsResponse$inboundSchema: z.ZodType<
  GetUserV2ExistsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetUserV2ExistsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetUserV2ExistsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetUserV2ExistsResponseBody$Outbound;
};

/** @internal */
export const GetUserV2ExistsResponse$outboundSchema: z.ZodType<
  GetUserV2ExistsResponse$Outbound,
  z.ZodTypeDef,
  GetUserV2ExistsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => GetUserV2ExistsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserV2ExistsResponse$ {
  /** @deprecated use `GetUserV2ExistsResponse$inboundSchema` instead. */
  export const inboundSchema = GetUserV2ExistsResponse$inboundSchema;
  /** @deprecated use `GetUserV2ExistsResponse$outboundSchema` instead. */
  export const outboundSchema = GetUserV2ExistsResponse$outboundSchema;
  /** @deprecated use `GetUserV2ExistsResponse$Outbound` instead. */
  export type Outbound = GetUserV2ExistsResponse$Outbound;
}

export function getUserV2ExistsResponseToJSON(
  getUserV2ExistsResponse: GetUserV2ExistsResponse,
): string {
  return JSON.stringify(
    GetUserV2ExistsResponse$outboundSchema.parse(getUserV2ExistsResponse),
  );
}

export function getUserV2ExistsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserV2ExistsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserV2ExistsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserV2ExistsResponse' from JSON`,
  );
}
