/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostAuthV2UserLoginRequest = {
  type?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
};

export type PostAuthV2UserLoginData = {
  session?: string | undefined;
  token?: string | undefined;
  refreshToken?: string | undefined;
};

/**
 * 200
 */
export type PostAuthV2UserLoginResponseBody = {
  data?: PostAuthV2UserLoginData | undefined;
};

export type PostAuthV2UserLoginResponse = {
  headers: { [k: string]: Array<string> };
  result: PostAuthV2UserLoginResponseBody;
};

/** @internal */
export const PostAuthV2UserLoginRequest$inboundSchema: z.ZodType<
  PostAuthV2UserLoginRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
});

/** @internal */
export type PostAuthV2UserLoginRequest$Outbound = {
  type?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
};

/** @internal */
export const PostAuthV2UserLoginRequest$outboundSchema: z.ZodType<
  PostAuthV2UserLoginRequest$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginRequest
> = z.object({
  type: z.string().optional(),
  email: z.string().optional(),
  password: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginRequest$ {
  /** @deprecated use `PostAuthV2UserLoginRequest$inboundSchema` instead. */
  export const inboundSchema = PostAuthV2UserLoginRequest$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginRequest$outboundSchema` instead. */
  export const outboundSchema = PostAuthV2UserLoginRequest$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginRequest$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginRequest$Outbound;
}

export function postAuthV2UserLoginRequestToJSON(
  postAuthV2UserLoginRequest: PostAuthV2UserLoginRequest,
): string {
  return JSON.stringify(
    PostAuthV2UserLoginRequest$outboundSchema.parse(postAuthV2UserLoginRequest),
  );
}

export function postAuthV2UserLoginRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV2UserLoginRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthV2UserLoginRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV2UserLoginRequest' from JSON`,
  );
}

/** @internal */
export const PostAuthV2UserLoginData$inboundSchema: z.ZodType<
  PostAuthV2UserLoginData,
  z.ZodTypeDef,
  unknown
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
  refresh_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "refresh_token": "refreshToken",
  });
});

/** @internal */
export type PostAuthV2UserLoginData$Outbound = {
  session?: string | undefined;
  token?: string | undefined;
  refresh_token?: string | undefined;
};

/** @internal */
export const PostAuthV2UserLoginData$outboundSchema: z.ZodType<
  PostAuthV2UserLoginData$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginData
> = z.object({
  session: z.string().optional(),
  token: z.string().optional(),
  refreshToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    refreshToken: "refresh_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginData$ {
  /** @deprecated use `PostAuthV2UserLoginData$inboundSchema` instead. */
  export const inboundSchema = PostAuthV2UserLoginData$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginData$outboundSchema` instead. */
  export const outboundSchema = PostAuthV2UserLoginData$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginData$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginData$Outbound;
}

export function postAuthV2UserLoginDataToJSON(
  postAuthV2UserLoginData: PostAuthV2UserLoginData,
): string {
  return JSON.stringify(
    PostAuthV2UserLoginData$outboundSchema.parse(postAuthV2UserLoginData),
  );
}

export function postAuthV2UserLoginDataFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV2UserLoginData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthV2UserLoginData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV2UserLoginData' from JSON`,
  );
}

/** @internal */
export const PostAuthV2UserLoginResponseBody$inboundSchema: z.ZodType<
  PostAuthV2UserLoginResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostAuthV2UserLoginData$inboundSchema).optional(),
});

/** @internal */
export type PostAuthV2UserLoginResponseBody$Outbound = {
  data?: PostAuthV2UserLoginData$Outbound | undefined;
};

/** @internal */
export const PostAuthV2UserLoginResponseBody$outboundSchema: z.ZodType<
  PostAuthV2UserLoginResponseBody$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginResponseBody
> = z.object({
  data: z.lazy(() => PostAuthV2UserLoginData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginResponseBody$ {
  /** @deprecated use `PostAuthV2UserLoginResponseBody$inboundSchema` instead. */
  export const inboundSchema = PostAuthV2UserLoginResponseBody$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginResponseBody$outboundSchema` instead. */
  export const outboundSchema = PostAuthV2UserLoginResponseBody$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginResponseBody$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginResponseBody$Outbound;
}

export function postAuthV2UserLoginResponseBodyToJSON(
  postAuthV2UserLoginResponseBody: PostAuthV2UserLoginResponseBody,
): string {
  return JSON.stringify(
    PostAuthV2UserLoginResponseBody$outboundSchema.parse(
      postAuthV2UserLoginResponseBody,
    ),
  );
}

export function postAuthV2UserLoginResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV2UserLoginResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthV2UserLoginResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV2UserLoginResponseBody' from JSON`,
  );
}

/** @internal */
export const PostAuthV2UserLoginResponse$inboundSchema: z.ZodType<
  PostAuthV2UserLoginResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => PostAuthV2UserLoginResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type PostAuthV2UserLoginResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: PostAuthV2UserLoginResponseBody$Outbound;
};

/** @internal */
export const PostAuthV2UserLoginResponse$outboundSchema: z.ZodType<
  PostAuthV2UserLoginResponse$Outbound,
  z.ZodTypeDef,
  PostAuthV2UserLoginResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => PostAuthV2UserLoginResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAuthV2UserLoginResponse$ {
  /** @deprecated use `PostAuthV2UserLoginResponse$inboundSchema` instead. */
  export const inboundSchema = PostAuthV2UserLoginResponse$inboundSchema;
  /** @deprecated use `PostAuthV2UserLoginResponse$outboundSchema` instead. */
  export const outboundSchema = PostAuthV2UserLoginResponse$outboundSchema;
  /** @deprecated use `PostAuthV2UserLoginResponse$Outbound` instead. */
  export type Outbound = PostAuthV2UserLoginResponse$Outbound;
}

export function postAuthV2UserLoginResponseToJSON(
  postAuthV2UserLoginResponse: PostAuthV2UserLoginResponse,
): string {
  return JSON.stringify(
    PostAuthV2UserLoginResponse$outboundSchema.parse(
      postAuthV2UserLoginResponse,
    ),
  );
}

export function postAuthV2UserLoginResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostAuthV2UserLoginResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAuthV2UserLoginResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAuthV2UserLoginResponse' from JSON`,
  );
}
