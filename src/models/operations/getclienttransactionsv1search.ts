/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetClientTransactionsV1SearchRequest = {
  /**
   * Filter by transaction IDs
   */
  tokens?: string | undefined;
  /**
   * Filter by transaction states
   */
  states?: string | undefined;
  /**
   * Filter by currencies
   */
  currencies?: string | undefined;
  /**
   * Filter by instrument IDs
   */
  instrumentIds?: string | undefined;
  /**
   * Filter by subscription IDs
   */
  subscriptionIds?: string | undefined;
  /**
   * Filter by User IDs
   */
  userIds?: string | undefined;
  /**
   * Limit search results
   */
  limit?: string | undefined;
  /**
   * Paginate search results
   */
  page?: string | undefined;
  /**
   * Sort by specifies the field use to sort data e.g. `created_at`
   */
  sortBy?: string | undefined;
  /**
   * Direction specifies the data sort order either ASC or DESC
   */
  direction?: string | undefined;
};

export type GetClientTransactionsV1SearchStatus = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

export type GetClientTransactionsV1SearchPriceMoney = {
  currency?: string | undefined;
  amount?: string | undefined;
};

export type GetClientTransactionsV1SearchTransaction = {
  token?: string | undefined;
  chargeAt?: Date | undefined;
  charged?: Date | undefined;
  status?: string | undefined;
  amount?: string | undefined;
  currency?: string | undefined;
  instrumentId?: string | undefined;
  subscriptionId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  failures?: Array<any> | undefined;
  subscription?: any | null | undefined;
  merchantApiKey?: string | undefined;
  userId?: string | undefined;
  transactionType?: string | undefined;
  proration?: boolean | undefined;
  tracker?: string | undefined;
  priceMoney?: GetClientTransactionsV1SearchPriceMoney | undefined;
};

export type GetClientTransactionsV1SearchData = {
  transactions?: Array<GetClientTransactionsV1SearchTransaction> | undefined;
  count?: number | undefined;
  direction?: string | undefined;
  sortBy?: string | undefined;
};

/**
 * 200
 */
export type GetClientTransactionsV1SearchResponseBody = {
  data?: GetClientTransactionsV1SearchData | undefined;
};

export type GetClientTransactionsV1SearchResponse = {
  headers: { [k: string]: Array<string> };
  result: GetClientTransactionsV1SearchResponseBody;
};

/** @internal */
export const GetClientTransactionsV1SearchRequest$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokens: z.string().optional(),
  states: z.string().optional(),
  currencies: z.string().optional(),
  instrument_ids: z.string().optional(),
  subscription_ids: z.string().optional(),
  user_ids: z.string().optional(),
  limit: z.string().optional(),
  page: z.string().optional(),
  sort_by: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "instrument_ids": "instrumentIds",
    "subscription_ids": "subscriptionIds",
    "user_ids": "userIds",
    "sort_by": "sortBy",
  });
});

/** @internal */
export type GetClientTransactionsV1SearchRequest$Outbound = {
  tokens?: string | undefined;
  states?: string | undefined;
  currencies?: string | undefined;
  instrument_ids?: string | undefined;
  subscription_ids?: string | undefined;
  user_ids?: string | undefined;
  limit?: string | undefined;
  page?: string | undefined;
  sort_by?: string | undefined;
  direction?: string | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchRequest$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchRequest$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchRequest
> = z.object({
  tokens: z.string().optional(),
  states: z.string().optional(),
  currencies: z.string().optional(),
  instrumentIds: z.string().optional(),
  subscriptionIds: z.string().optional(),
  userIds: z.string().optional(),
  limit: z.string().optional(),
  page: z.string().optional(),
  sortBy: z.string().optional(),
  direction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    instrumentIds: "instrument_ids",
    subscriptionIds: "subscription_ids",
    userIds: "user_ids",
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchRequest$ {
  /** @deprecated use `GetClientTransactionsV1SearchRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchRequest$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchRequest$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchRequest$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchRequest$Outbound;
}

export function getClientTransactionsV1SearchRequestToJSON(
  getClientTransactionsV1SearchRequest: GetClientTransactionsV1SearchRequest,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchRequest$outboundSchema.parse(
      getClientTransactionsV1SearchRequest,
    ),
  );
}

export function getClientTransactionsV1SearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClientTransactionsV1SearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientTransactionsV1SearchRequest' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchStatus$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/** @internal */
export type GetClientTransactionsV1SearchStatus$Outbound = {
  errors?: Array<string> | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchStatus$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchStatus$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchStatus
> = z.object({
  errors: z.array(z.string()).optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchStatus$ {
  /** @deprecated use `GetClientTransactionsV1SearchStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchStatus$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchStatus$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchStatus$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchStatus$Outbound;
}

export function getClientTransactionsV1SearchStatusToJSON(
  getClientTransactionsV1SearchStatus: GetClientTransactionsV1SearchStatus,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchStatus$outboundSchema.parse(
      getClientTransactionsV1SearchStatus,
    ),
  );
}

export function getClientTransactionsV1SearchStatusFromJSON(
  jsonString: string,
): SafeParseResult<GetClientTransactionsV1SearchStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientTransactionsV1SearchStatus' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchPriceMoney$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchPriceMoney,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  amount: z.string().optional(),
});

/** @internal */
export type GetClientTransactionsV1SearchPriceMoney$Outbound = {
  currency?: string | undefined;
  amount?: string | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchPriceMoney$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchPriceMoney$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchPriceMoney
> = z.object({
  currency: z.string().optional(),
  amount: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchPriceMoney$ {
  /** @deprecated use `GetClientTransactionsV1SearchPriceMoney$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchPriceMoney$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchPriceMoney$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchPriceMoney$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchPriceMoney$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchPriceMoney$Outbound;
}

export function getClientTransactionsV1SearchPriceMoneyToJSON(
  getClientTransactionsV1SearchPriceMoney:
    GetClientTransactionsV1SearchPriceMoney,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchPriceMoney$outboundSchema.parse(
      getClientTransactionsV1SearchPriceMoney,
    ),
  );
}

export function getClientTransactionsV1SearchPriceMoneyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetClientTransactionsV1SearchPriceMoney,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchPriceMoney$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetClientTransactionsV1SearchPriceMoney' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchTransaction$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string().optional(),
  charge_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  charged: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
  instrument_id: z.string().optional(),
  subscription_id: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  failures: z.array(z.any()).optional(),
  subscription: z.nullable(z.any()).optional(),
  merchant_api_key: z.string().optional(),
  user_id: z.string().optional(),
  transaction_type: z.string().optional(),
  proration: z.boolean().optional(),
  tracker: z.string().optional(),
  price_money: z.lazy(() =>
    GetClientTransactionsV1SearchPriceMoney$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "charge_at": "chargeAt",
    "instrument_id": "instrumentId",
    "subscription_id": "subscriptionId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "merchant_api_key": "merchantApiKey",
    "user_id": "userId",
    "transaction_type": "transactionType",
    "price_money": "priceMoney",
  });
});

/** @internal */
export type GetClientTransactionsV1SearchTransaction$Outbound = {
  token?: string | undefined;
  charge_at?: string | undefined;
  charged?: string | undefined;
  status?: string | undefined;
  amount?: string | undefined;
  currency?: string | undefined;
  instrument_id?: string | undefined;
  subscription_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  failures?: Array<any> | undefined;
  subscription?: any | null | undefined;
  merchant_api_key?: string | undefined;
  user_id?: string | undefined;
  transaction_type?: string | undefined;
  proration?: boolean | undefined;
  tracker?: string | undefined;
  price_money?: GetClientTransactionsV1SearchPriceMoney$Outbound | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchTransaction$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchTransaction$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchTransaction
> = z.object({
  token: z.string().optional(),
  chargeAt: z.date().transform(v => v.toISOString()).optional(),
  charged: z.date().transform(v => v.toISOString()).optional(),
  status: z.string().optional(),
  amount: z.string().optional(),
  currency: z.string().optional(),
  instrumentId: z.string().optional(),
  subscriptionId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  failures: z.array(z.any()).optional(),
  subscription: z.nullable(z.any()).optional(),
  merchantApiKey: z.string().optional(),
  userId: z.string().optional(),
  transactionType: z.string().optional(),
  proration: z.boolean().optional(),
  tracker: z.string().optional(),
  priceMoney: z.lazy(() =>
    GetClientTransactionsV1SearchPriceMoney$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    chargeAt: "charge_at",
    instrumentId: "instrument_id",
    subscriptionId: "subscription_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
    merchantApiKey: "merchant_api_key",
    userId: "user_id",
    transactionType: "transaction_type",
    priceMoney: "price_money",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchTransaction$ {
  /** @deprecated use `GetClientTransactionsV1SearchTransaction$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchTransaction$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchTransaction$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchTransaction$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchTransaction$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchTransaction$Outbound;
}

export function getClientTransactionsV1SearchTransactionToJSON(
  getClientTransactionsV1SearchTransaction:
    GetClientTransactionsV1SearchTransaction,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchTransaction$outboundSchema.parse(
      getClientTransactionsV1SearchTransaction,
    ),
  );
}

export function getClientTransactionsV1SearchTransactionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetClientTransactionsV1SearchTransaction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchTransaction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetClientTransactionsV1SearchTransaction' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchData$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(
    z.lazy(() => GetClientTransactionsV1SearchTransaction$inboundSchema),
  ).optional(),
  count: z.number().int().optional(),
  direction: z.string().optional(),
  sort_by: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sort_by": "sortBy",
  });
});

/** @internal */
export type GetClientTransactionsV1SearchData$Outbound = {
  transactions?:
    | Array<GetClientTransactionsV1SearchTransaction$Outbound>
    | undefined;
  count?: number | undefined;
  direction?: string | undefined;
  sort_by?: string | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchData$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchData$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchData
> = z.object({
  transactions: z.array(
    z.lazy(() => GetClientTransactionsV1SearchTransaction$outboundSchema),
  ).optional(),
  count: z.number().int().optional(),
  direction: z.string().optional(),
  sortBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchData$ {
  /** @deprecated use `GetClientTransactionsV1SearchData$inboundSchema` instead. */
  export const inboundSchema = GetClientTransactionsV1SearchData$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchData$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchData$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchData$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchData$Outbound;
}

export function getClientTransactionsV1SearchDataToJSON(
  getClientTransactionsV1SearchData: GetClientTransactionsV1SearchData,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchData$outboundSchema.parse(
      getClientTransactionsV1SearchData,
    ),
  );
}

export function getClientTransactionsV1SearchDataFromJSON(
  jsonString: string,
): SafeParseResult<GetClientTransactionsV1SearchData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClientTransactionsV1SearchData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientTransactionsV1SearchData' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchResponseBody$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetClientTransactionsV1SearchData$inboundSchema)
    .optional(),
});

/** @internal */
export type GetClientTransactionsV1SearchResponseBody$Outbound = {
  data?: GetClientTransactionsV1SearchData$Outbound | undefined;
};

/** @internal */
export const GetClientTransactionsV1SearchResponseBody$outboundSchema:
  z.ZodType<
    GetClientTransactionsV1SearchResponseBody$Outbound,
    z.ZodTypeDef,
    GetClientTransactionsV1SearchResponseBody
  > = z.object({
    data: z.lazy(() => GetClientTransactionsV1SearchData$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchResponseBody$ {
  /** @deprecated use `GetClientTransactionsV1SearchResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchResponseBody$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchResponseBody$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchResponseBody$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchResponseBody$Outbound;
}

export function getClientTransactionsV1SearchResponseBodyToJSON(
  getClientTransactionsV1SearchResponseBody:
    GetClientTransactionsV1SearchResponseBody,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchResponseBody$outboundSchema.parse(
      getClientTransactionsV1SearchResponseBody,
    ),
  );
}

export function getClientTransactionsV1SearchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetClientTransactionsV1SearchResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetClientTransactionsV1SearchResponseBody' from JSON`,
  );
}

/** @internal */
export const GetClientTransactionsV1SearchResponse$inboundSchema: z.ZodType<
  GetClientTransactionsV1SearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => GetClientTransactionsV1SearchResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type GetClientTransactionsV1SearchResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: GetClientTransactionsV1SearchResponseBody$Outbound;
};

/** @internal */
export const GetClientTransactionsV1SearchResponse$outboundSchema: z.ZodType<
  GetClientTransactionsV1SearchResponse$Outbound,
  z.ZodTypeDef,
  GetClientTransactionsV1SearchResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    GetClientTransactionsV1SearchResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClientTransactionsV1SearchResponse$ {
  /** @deprecated use `GetClientTransactionsV1SearchResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetClientTransactionsV1SearchResponse$inboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetClientTransactionsV1SearchResponse$outboundSchema;
  /** @deprecated use `GetClientTransactionsV1SearchResponse$Outbound` instead. */
  export type Outbound = GetClientTransactionsV1SearchResponse$Outbound;
}

export function getClientTransactionsV1SearchResponseToJSON(
  getClientTransactionsV1SearchResponse: GetClientTransactionsV1SearchResponse,
): string {
  return JSON.stringify(
    GetClientTransactionsV1SearchResponse$outboundSchema.parse(
      getClientTransactionsV1SearchResponse,
    ),
  );
}

export function getClientTransactionsV1SearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClientTransactionsV1SearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetClientTransactionsV1SearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClientTransactionsV1SearchResponse' from JSON`,
  );
}
