/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DateTimeSeconds = {
  seconds?: number | undefined;
};

/** @internal */
export const DateTimeSeconds$inboundSchema: z.ZodType<
  DateTimeSeconds,
  z.ZodTypeDef,
  unknown
> = z.object({
  seconds: z.number().int().optional(),
});

/** @internal */
export type DateTimeSeconds$Outbound = {
  seconds?: number | undefined;
};

/** @internal */
export const DateTimeSeconds$outboundSchema: z.ZodType<
  DateTimeSeconds$Outbound,
  z.ZodTypeDef,
  DateTimeSeconds
> = z.object({
  seconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateTimeSeconds$ {
  /** @deprecated use `DateTimeSeconds$inboundSchema` instead. */
  export const inboundSchema = DateTimeSeconds$inboundSchema;
  /** @deprecated use `DateTimeSeconds$outboundSchema` instead. */
  export const outboundSchema = DateTimeSeconds$outboundSchema;
  /** @deprecated use `DateTimeSeconds$Outbound` instead. */
  export type Outbound = DateTimeSeconds$Outbound;
}

export function dateTimeSecondsToJSON(
  dateTimeSeconds: DateTimeSeconds,
): string {
  return JSON.stringify(DateTimeSeconds$outboundSchema.parse(dateTimeSeconds));
}

export function dateTimeSecondsFromJSON(
  jsonString: string,
): SafeParseResult<DateTimeSeconds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DateTimeSeconds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DateTimeSeconds' from JSON`,
  );
}
